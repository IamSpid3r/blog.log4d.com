<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/atom.xml" rel="self"></link><id>/</id><updated>2013-12-31T23:55:00+08:00</updated><entry><title>Goodbye 2013, Hello 2014</title><link href="/2013/12/2013/" rel="alternate"></link><updated>2013-12-31T23:55:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-12-31:2013/12/2013/</id><summary type="html">&lt;p&gt;2013 年末，我给自己制定了几个年度目标：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;离梦想更近一步&lt;/p&gt;
&lt;p&gt;找一个靠谱的姑娘，我感觉她需要我，我也需要她了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成为一个为百万用户级别提供技术支撑的人物，要能独当一面&lt;/li&gt;
&lt;li&gt;帮助网站进行性能优化&lt;/li&gt;
&lt;li&gt;制定规则，平衡猥琐实现和优雅&lt;/li&gt;
&lt;li&gt;继续写博客，分享积累 + 翻译文章&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来谈谈感情，我和她在一起一年半了，虽然偶尔有小摩擦，但总体上面还是非常幸福的。
找到一个能产生共鸣，生活兴趣相近，相互欣赏的人太难了。一定会珍惜的。&lt;/p&gt;


&lt;p&gt;再谈谈协作，相当艰辛的跨过了去年年末的痛苦挣扎，然后看待事物和进行平衡选择时候
就没那么痛苦了。我的一大问题就是，从小认为人或事都可以非黑即白，这种决定性的判断，
会让我在处理事情时候，失去对重心的控制，有可能花费大量时间在细枝末节的地方。
2013 年初时候，我甚至想一度放弃，而熬过来之后，工作就又变得非常开心，
现在可以包容别人的不同意见，尝试寻找相同共性（虽然处理的能力还不够）。&lt;/p&gt;
&lt;p&gt;也许是因为从小不够出色，所以工作之后在自己擅长的领域，反而变得异常强势和绝对，
这一点近来控制的不错，但是还可以做的更好。&lt;/p&gt;
&lt;p&gt;技术方面，似乎没有学习什么特别的语言、框架、类库之类的。不过我现在对 IO 模型，
资源限制，缓存的策略，性能侦查，运维有了更多的认识。去年夸下海口，要在 2013
年做到 &lt;code&gt;成为一个为百万用户级别提供技术支撑的人物，要能独当一面&lt;/code&gt;，
恩，觉得这个目标没那么遥不可及了。&lt;/p&gt;
&lt;p&gt;今年博客写的文章很少，只有 10 篇，还有一半是翻译的文章，只能托词说工作太忙了。
不过明年应该会好起来，因为在公司每周都有一次 Tech Share，我可以把新姿势
一并整理到博客来。&lt;/p&gt;
&lt;p&gt;总的来说，2013 我很幸福，但是还不够强，2014，我要达成这些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让她开心、幸福&lt;/li&gt;
&lt;li&gt;实施几个可以长期支撑堆糖核心业务的系统，让系统更健壮，产品给用户带来更多价值&lt;/li&gt;
&lt;li&gt;把我的想法和同事交流，推动更高效的团队协作，个体都很强，所以团队应该更强&lt;/li&gt;
&lt;li&gt;出去旅行至少一次&lt;/li&gt;
&lt;li&gt;每个月把思考和收获写成博客&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Linux 程序员的 Mac 安装记录</title><link href="/2013/12/mac/" rel="alternate"></link><updated>2013-12-08T15:44:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-12-08:2013/12/mac/</id><summary type="html">&lt;p&gt;作为一个 Linux 的老用户，我再一次验证了那句老话「Linux 用户有钱就换 Mac」。
前段时间，托朋友从香港购入一台 rMBP，下面就是我的 Mac 使用安装记录。&lt;/p&gt;
&lt;h2&gt;Brew&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://brew.sh/"&gt;Brew&lt;/a&gt; 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac
的编译配置以及 Patch，可以方便的安装开发工具。&lt;/p&gt;
&lt;p&gt;安装 Brew：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我安装的 Brew 包：&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ack&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;highlight&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;aria2&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dos2unix&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;privoxy&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nmap&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;iotop&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;htop&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tinyproxy&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;multitail&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cliclick&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;readline&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;reattach&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;macvim&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sshfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Brew cask&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/phinze/homebrew-cask"&gt;Brew cask&lt;/a&gt; 是类似 Brew 的管理工具，
直接提供 dmg 级别的二进制包，（Brew 是不带源码，只有对应项目所在的 URL）。&lt;/p&gt;
&lt;p&gt;Brew cask 安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="n"&gt;phinze&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;homebrew&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我通过 Brew cask 安装的软件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mplayerx&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;appcleaner&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bartender&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;alfred&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bettertouchtool&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;qq&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;slate&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;omnigraffle&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ide&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dradio&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;按键配置&lt;/h2&gt;
&lt;p&gt;作为 &lt;a href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt; 的用户，我实在是受不了 Mac
默认的按键控制，太渣。在两天狂搜之后，尝试了 Divvy / BetterTouchToll
这些按键控制软件之后，还是觉得按键不够自由，直到我发现了
&lt;a href="https://github.com/jigish/slate"&gt;Slate&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Slate 可以管理几乎所有按键，并进行 窗口/Workspace/Shell 控制，配合
&lt;a href="https://github.com/BlueM/cliclick"&gt;Cliclick&lt;/a&gt; 可以完全完成桌面控制。&lt;/p&gt;
&lt;p&gt;下面是我配置的 &lt;code&gt;.slate&lt;/code&gt; 文件：&lt;/p&gt;
&lt;p&gt;详细代码可以参见 &lt;a href="https://github.com/alswl/.oOo."&gt;alswl/.oOo.&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# This is the default .slate file.
# If no ~/.slate file exists this is the file that will be used.

config defaultToCurrentScreen true
config nudgePercentOf screenSize
config resizePercentOf screenSize

# Alias
alias mouse_left shell path:~/ &amp;#39;/usr/local/bin/cliclick m:640,400 &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh&amp;#39;
alias mouse_right shell path:~/ &amp;#39;/usr/local/bin/cliclick m:1920,400 &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh&amp;#39;

alias mouse_iTerm shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh iTerm&amp;#39;
alias mouse_Firefox shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh Firefox&amp;#39;
alias mouse_Google_Chrome shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh Google_Chrome&amp;#39;
alias mouse_QQ shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh QQ&amp;#39;
alias mouse_MacVim shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh MacVim&amp;#39;

# Resize Bindings
#bind right:alt       resize +10% +0
#bind left:alt        resize -10% +0
#bind up:alt          resize +0   -10%
#bind down:alt        resize +0   +10%
#bind right:ctrl;alt  resize -10% +0 bottom-right
#bind left:ctrl;alt   resize +10% +0 bottom-right
#bind up:ctrl;alt     resize +0   +10% bottom-right
#bind down:ctrl;alt   resize +0   -10% bottom-right

# Push Bindings
#bind right:ctrl;cmd  push right bar-resize:screenSizeX/3
#bind left:ctrl;cmd   push left  bar-resize:screenSizeX/3
#bind up:ctrl;cmd     push up    bar-resize:screenSizeY/2
#bind down:ctrl;cmd   push down  bar-resize:screenSizeY/2

# Nudge Bindings
#bind right:shift;alt nudge +10% +0
#bind left:shift;alt  nudge -10% +0
#bind up:shift;alt    nudge +0   -10%
#bind down:shift;alt  nudge +0   +10%

# Throw Bindings
bind 1:ctrl;alt         throw 0 resize
bind 2:ctrl;alt         throw 1 resize
#bind 3:ctrl;alt         throw 2 resize
#bind right:ctrl;alt;cmd throw right resize
#bind left:ctrl;alt;cmd  throw left  resize
#bind up:ctrl;alt;cmd    throw up    resize
#bind down:ctrl;alt;cmd  throw down  resize

# Focus Bindings
bind `:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_iTerm&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;iTerm&amp;#39;
bind 1:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_Firefox&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;Firefox&amp;#39;
bind 2:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_Google_Chrome&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;Google Chrome&amp;#39;
bind 3:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_QQ&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;QQ&amp;#39;
bind q:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_MacVim&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;MacVim&amp;#39;
bind h:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_left&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus left
bind l:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_right&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus right
#bind up:cmd       focus up
#bind down:cmd     focus down
bind k:alt   focus behind
bind j:alt focus behind

# Window Hints
#bind esc:cmd hint

# Toogle Application
#bind `:alt toggle &amp;#39;iTerm&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中用到的鼠标位置记忆脚本是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;## Save&lt;/span&gt;
&lt;span class="c"&gt;# get current postion, save to last&lt;/span&gt;
&lt;span class="nv"&gt;CURRENT_WINDOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;iTerm
&lt;span class="o"&gt;[&lt;/span&gt; -f /tmp/SLATE_M_CURR &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;CURRENT_WINDOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /tmp/SLATE_M_CURR&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c"&gt;# save now pos&lt;/span&gt;

&lt;span class="nv"&gt;NOW_POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/usr/local/bin/cliclick p | /usr/bin/awk &lt;span class="s1"&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$NOW_POS&lt;/span&gt; &amp;gt; /tmp/SLATE_M_&lt;span class="nv"&gt;$CURRENT_WINDOW&lt;/span&gt;

&lt;span class="c"&gt;## Restore&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;# get wanted position&lt;/span&gt;
        &lt;span class="nv"&gt;POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500,400
        &lt;span class="o"&gt;[&lt;/span&gt; -f /tmp/SLATE_M_&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /tmp/SLATE_M_&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

        &lt;span class="c"&gt;# restore postion&lt;/span&gt;
        /usr/local/bin/cliclick m:&lt;span class="nv"&gt;$POS&lt;/span&gt;

        &lt;span class="c"&gt;#LAST_WINDOW=iTerm&lt;/span&gt;
        &lt;span class="c"&gt;#[ -f /tmp/SLATE_M_LAST_WINDOW ] &amp;amp;&amp;amp; LAST_WINDOW=`cat /tmp/SLATE_M_LAST_WINDOW`&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &amp;gt; /tmp/SLATE_M_CURR
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="Mac"></category></entry><entry><title>Postfix 基本配置[译文]</title><link href="/2013/11/postfix-basic-configuration/" rel="alternate"></link><updated>2013-11-09T14:59:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-11-09:2013/11/postfix-basic-configuration/</id><summary type="html">&lt;p&gt;原文地址：&lt;a href="http://www.postfix.org/BASIC_CONFIGURATION_README.html#syntax"&gt;Postfix Basic Configuration &lt;/a&gt;。
有少许编译。&lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件 &lt;a href="http://www.postfix.org/postconf.5.html"&gt;main.cf&lt;/a&gt; 有数百个配置参数，
幸运的是，所有参数都有合理的默认配置项。
大部分时候，只需要配置两三个参数即可。&lt;/p&gt;
&lt;p&gt;安装 Postfix 的方法可以参见 &lt;a href="http://www.postfix.org/INSTALL.html"&gt;安装方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;特殊场景用途的配置方式，如邮件中枢，防火墙，拨号环境客户端的说明可以在
&lt;a href="http://www.postfix.org/STANDARD_CONFIGURATION_README.html"&gt;标准配置说明&lt;/a&gt; 里面查看。&lt;/p&gt;


&lt;h2&gt;Postfix 配置语法&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件默认在 &lt;code&gt;/etc/postfix&lt;/code&gt;。主力配置文件是 &lt;a href="http://www.postfix.org/postconf.5.html"&gt;main.cf&lt;/a&gt; 和
&lt;a href="http://www.postfix.org/master.5.html"&gt;master.cf&lt;/a&gt;。用户权限必须是 root 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; 配置语法有两个要点：不用引号，可以使用 &lt;code&gt;$&lt;/code&gt; 来引用参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 定义一个参数&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="cp"&gt;# 引用一个已有参数&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;other_parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引用参数时候，可以再定义之前先引用（Postfix 使用延迟计算技术）。&lt;/p&gt;
&lt;p&gt;Postfix 使用数据文件来控制接入权限。详情请看 &lt;a href="http://www.postfix.org/DATABASE_README.html"&gt;DATABASE 介绍&lt;/a&gt;，一般这样配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;virtual_alias_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 &lt;code&gt;main.cf&lt;/code&gt; 或者 &lt;code&gt;master.cf&lt;/code&gt; 之后，需要 &lt;code&gt;postfix reload&lt;/code&gt; 重新载入配置文件。&lt;/p&gt;
&lt;h2&gt;配置对外发送域名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#myorigin"&gt;myorigin&lt;/a&gt; 参数指定邮件中显示的发送域名，默认使用当前机器名 &lt;code&gt;$myhostname&lt;/code&gt;。
一般来说，我们会把 &lt;code&gt;myorigin&lt;/code&gt; 设置成顶级域名 &lt;code&gt;$mydomain&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myorigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user@$myhostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myorigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probably&lt;/span&gt; &lt;span class="n"&gt;desirable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user@$mydomain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置接收域名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mydestination&lt;/a&gt; 参数配置了本地直接接收的域名，而不会再对外发送。&lt;/p&gt;
&lt;p&gt;这个参数可以使用文件配置，也可以使用 &lt;code&gt;type:table&lt;/code&gt;，比如 hash / btree / ldap
/ mysql 等等。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 默认配置&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;

&lt;span class="cp"&gt;# 对整个域名生效&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;

&lt;span class="cp"&gt;# 对多个 DNS 域名生效&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt; 
        &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置允许从哪些地方接收&lt;/h2&gt;
&lt;p&gt;默认情况下面，Postfix 仅发送信任网络的邮件。信任网络配置在 &lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mynetworks&lt;/a&gt; 参数中。&lt;/p&gt;
&lt;p&gt;范例（使用下列任意一个）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subnet&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;subnetworks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mf"&gt;168.100.189.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以这样配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;168.100.189.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置允许发送到的域名&lt;/h2&gt;
&lt;p&gt;默认情况下，非信任网络仅仅被允许从发送邮件到特定域名。默认值是
&lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mydestination&lt;/a&gt; 下面的所有域名（包括子域名）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;strangers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;subdomains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置递送方式：直接或间接&lt;/h2&gt;
&lt;p&gt;默认情况下，Postfix 会直接递送邮件到因特网。有时候你的服务器在防火墙后面或者
无法直接连接互联网，那就需要将邮件递送到另外一个 &lt;a href="http://www.postfix.org/postconf.5.html#relayhost"&gt;relay host&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="n"&gt;delivery&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tld&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置报告错误&lt;/h2&gt;
&lt;p&gt;可以通过配置 &lt;a href="http://www.postfix.org/aliases.5.html"&gt;aliases&lt;/a&gt; 来将错误报告邮件转发给其他人。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;aliases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;postmaster:&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;
    &lt;span class="nl"&gt;root:&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下面，只会报告严重错误（资源错误和软件错误）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;notify_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他错误还有：bounce 拒收 / 2bounce 错误报告拒收 / delay 延迟 / policy 策略未通过
/ protocol 协议错误 / resouce 资源错误 / software 软件错误&lt;/p&gt;
&lt;h2&gt;代理/NAT 配置&lt;/h2&gt;
&lt;p&gt;有时候需要通过代理或者 NAT 连接互联网。参考 &lt;a href="http://www.postfix.org/postconf.5.html#proxy_interfaces"&gt;proxy_interfaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;proxy_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2.3.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NAT&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Postfix 日志分布情况&lt;/h2&gt;
&lt;p&gt;日志路径配置在 &lt;code&gt;/etc/syslog.conf&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syslog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;                                    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;                                  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;maillog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建议经常这样做日志审核：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# postfix check&lt;/span&gt;
&lt;span class="c"&gt;# egrep &amp;#39;(reject|warning|error|fatal|panic):&amp;#39; /some/log/file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在 chorooted 状态下运行 Postfix&lt;/h2&gt;
&lt;p&gt;初学者就不用管这个了。&lt;/p&gt;
&lt;h2&gt;配置机器名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#myhostname"&gt;myhostname&lt;/a&gt; 手工指定了 FQDN。它被其他好几个域名相关的地方引用。&lt;/p&gt;
&lt;p&gt;一般来说，如果指定了 &lt;code&gt;mydomain&lt;/code&gt;，就会自动通过它生成 &lt;code&gt;myhostname&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置域名&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href="http://www.postfix.org/postconf.5.html#mydomain"&gt;mydomain&lt;/a&gt; 配置，这个参数被很多地方引用。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;
    &lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置网络地址&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#inet_interfaces"&gt;inet_interfaces&lt;/a&gt; 配置监听网络。&lt;/p&gt;
&lt;p&gt;默认配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多个虚拟邮件服务器配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tld&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Postfix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Postfix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，这项参数配置完之后需要重启。&lt;/p&gt;</summary><category term="Postfix"></category></entry><entry><title>在 Python 中使用 GDB 来调试[译文]</title><link href="/2013/11/python-gdb/" rel="alternate"></link><updated>2013-11-01T01:11:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-11-01:2013/11/python-gdb/</id><summary type="html">&lt;p&gt;大约一年前，我接触了 Java 中的 &lt;a href="http://kenai.com/projects/btrace"&gt;Btrace&lt;/a&gt;
能够不停机查看线上 JVM 运行情况的特性让我艳羡不已。
另外还有强悍的 jStack 和 jConsole 来进行运行期侦测，JVM 的工业级强度果然不是盖的。&lt;/p&gt;
&lt;p&gt;当时公司技术方面也遇到了一些瓶颈，一部分原因是 CPython 本身的 IO 模型问题，
另一方面也和早期代码写的极不工整脱不了关系。万般无奈之下，我们用
Jython 推翻重做了主要业务，效果立竿见影，但同时也把真实问题给规避掉了。&lt;/p&gt;
&lt;p&gt;在这之后我们在 JVM 的领导下，走上了康庄大道。但我心中始终还有一个梗，
就是想对性能遇到瓶颈的 Python Process 进行线上侦测。
这篇文章就是开始的第一步。&lt;/p&gt;
&lt;p&gt;PS:这篇文章理论上是可行的，但是在我机器（Ubuntu 12.04 / 系统自带 Python）
无法正常执行，会爆出 &lt;code&gt;unable to read python frame information&lt;/code&gt;
的问题。解决方法我会在下篇文章中写出。这里只是单纯翻译一下原文。&lt;/p&gt;
&lt;p&gt;原文可以移步 &lt;a href="https://wiki.python.org/moin/DebuggingWithGdb"&gt;https://wiki.python.org/moin/DebuggingWithGdb&lt;/a&gt;。&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;有一些类型的 bugs 很难使用 Python 直接进行 debug，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段错误（无法被捕捉的 Python 异常）&lt;/li&gt;
&lt;li&gt;卡住的进程（这种情况下面没法使用 &lt;code&gt;pdb&lt;/code&gt; 来进行跟踪）&lt;/li&gt;
&lt;li&gt;控制之外的后台处理 daemon 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些情况下，你可以使用尝试使用 &lt;code&gt;gdb&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;需要在系统安装 &lt;code&gt;gdb&lt;/code&gt; 和 Python debug 扩展。
Python debug 扩展包含了一些 debug 命令，并且添加了一些 Python 特定的命令到 &lt;code&gt;gdb&lt;/code&gt;。
在主流的 Linux 发行版中，你可以轻松的安装他们：&lt;/p&gt;
&lt;p&gt;Fedora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debuginfo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubunt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一些老系统上面，也一样可以使用 &lt;code&gt;gdb&lt;/code&gt;，具体看文章末尾。&lt;/p&gt;
&lt;h2&gt;使用 &lt;code&gt;GDB&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;有两种可行的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始就使用 &lt;code&gt;gdb&lt;/code&gt; 来启动应用&lt;/li&gt;
&lt;li&gt;连接到一个已经运行的 Python 进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 下面启动 Python 同样有两种方式：&lt;/p&gt;
&lt;p&gt;交互式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt;
&lt;span class="nx"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="na"&gt;-ex&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的话，它会一直运行直到退出、段错误、或者人为的停止（使用 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;如果进程已经开始运行，你可以通过 PID 来接入它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;调试进程&lt;/h2&gt;
&lt;p&gt;如果你的程序段错误了， &lt;code&gt;gdb&lt;/code&gt; 会自动暂停程序，这样你可以切换到 &lt;code&gt;gdb&lt;/code&gt;
命令行来检查状态。你也可以人为地使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停程序运行。&lt;/p&gt;
&lt;p&gt;查看 &lt;a href="https://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;EasierPythonDebugging&lt;/a&gt;
获得 &lt;code&gt;gdb&lt;/code&gt; 里面的 Python 命令列表。&lt;/p&gt;
&lt;h2&gt;查看 C 调用栈&lt;/h2&gt;
&lt;p&gt;如果你在 debug 段错误，你最想做的可能就是查看 C 调用栈。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 的命令行里面，只要运行一下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;bt&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3b705&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3ce8e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;abort&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mh"&gt;0x00000000004c164f&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;posix_abort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;noargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;posixmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7158&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000489fac&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;call_function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pp_stack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x7fbffff110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oparg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3531&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000485fc2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;PyEval_EvalFrame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x66ccd8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2163&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运气好的话，你可以直接看到问题出现在什么地方。如果它提供的信息不能直接帮你解决问题，
你可以尝试继续追踪调用栈。
调式的结果取决于 debug 信息的有效程度。&lt;/p&gt;
&lt;h2&gt;查看 Python 调用栈&lt;/h2&gt;
&lt;p&gt;如果你安装了 Python 扩展，你可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以获取熟悉的 Python 源代码。&lt;/p&gt;
&lt;h2&gt;对挂住的进程开刀&lt;/h2&gt;
&lt;p&gt;如果一个进程看上去挂住了，他可能在等待什么东西（比如锁、IO 等等）。
也有可能在拼命的跑循环。连接上这个进程，然后检查调用栈也许可以帮上忙。&lt;/p&gt;
&lt;p&gt;如果进程在疯狂循环，你可以先让它运行一会，使用 &lt;code&gt;cont&lt;/code&gt; 命令，
然后使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停，并且打印出调用栈。&lt;/p&gt;
&lt;p&gt;如果一些线程卡住了，下面的命令可能会帮上忙：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;
  &lt;span class="n"&gt;Id&lt;/span&gt;   &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt;         &lt;span class="n"&gt;Frame&lt;/span&gt;
  &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa29feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17914&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NotificationThr&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa03fcb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17913&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QProcessManager&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa1bffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17909&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;31&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa31ffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17907&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa3fdfb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17906&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QInotifyFileSys&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;29&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa481cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17905&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa508db40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17883&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QThread&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa5cebb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17882&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa660cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17881&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xabdffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17876&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gdbus&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xac7b7b40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17875&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dconf worker&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xb7d876c0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17863&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当前运行的线程被标记为 &lt;code&gt;*&lt;/code&gt;，要查看 Python 代码运行到哪里，使用 &lt;code&gt;py-list&lt;/code&gt; 查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="mi"&gt;2025&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="mi"&gt;2026&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darwin&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Spyder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2027&lt;/span&gt;            &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="mi"&gt;2028&lt;/span&gt;                         &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;2029&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2030&lt;/span&gt;        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2031&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="mi"&gt;2032&lt;/span&gt;
&lt;span class="mi"&gt;2033&lt;/span&gt;
&lt;span class="mi"&gt;2034&lt;/span&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__remove_temp_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2035&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;osp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMP_SESSION_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有进程的 Python 代码位置，可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
 &lt;span class="mi"&gt;204&lt;/span&gt;        &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;205&lt;/span&gt;
 &lt;span class="mi"&gt;206&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;207&lt;/span&gt;            &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;dup() -&amp;gt; socket object&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;197&lt;/span&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_delegate_methods&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;198&lt;/span&gt;                &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mi"&gt;199&lt;/span&gt;        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock"&gt;https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;老系统上的 GDB&lt;/h2&gt;
&lt;p&gt;有时候你需要在老系统上面安装 &lt;code&gt;gdb&lt;/code&gt;，这时候你可能需要下列信息：&lt;/p&gt;
&lt;h3&gt;GDB Macros&lt;/h3&gt;
&lt;p&gt;一些随着 Python 发布的 GDB 脚本可以用来调试 Python 进程。
你可以把 Python 源码里面的 &lt;code&gt;Misc/gdbinit&lt;/code&gt;  拷贝到 &lt;code&gt;~/.gdbinit&lt;/code&gt;，
或者从 &lt;a href="http://svn.python.org/view/python/branches/release27-maint/Misc/gdbinit?view=log"&gt;Subversion&lt;/a&gt;
来拷贝他们。请注意你的 Python，确保使用正确的代码版本，否则有些功能可能无法工作。&lt;/p&gt;
&lt;p&gt;请注意有些新的 GDB 命令只有在 debug 需要的库存在才能正常工作。&lt;/p&gt;
&lt;p&gt;这个脚本在 Ubuntu 上面的 gcc 4.5.2 工作时，会爆出错误
&lt;code&gt;No symbol "co" in current context.&lt;/code&gt;，是因为 &lt;code&gt;call_function&lt;/code&gt; 在
&lt;a href="https://wiki.python.org/moin/EvalFrameEx"&gt;PyEval_EvalFrameEx&lt;/a&gt; 和
&lt;a href="https://wiki.python.org/moin/EvalCodeEx"&gt;PyEval_EvalCodeEx&lt;/a&gt; 之间。
重新使用 &lt;code&gt;make "CFLAGS=-g -fno-inline -fno-strict-aliasing"&lt;/code&gt;
编译 Python 可以解决这个问题。&lt;/p&gt;
&lt;h3&gt;使用 Python Stack Traces GDB 脚本&lt;/h3&gt;
&lt;p&gt;在 gdb 命令行里，可以这样查看 Python stack trace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，可以获取一列 stack frame 的 Python 变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystackv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多 gdbinit 里面没定义的有用的脚本可以在这里找到：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros"&gt;http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros&lt;/a&gt;&lt;/p&gt;</summary><category term="GDB"></category><category term="译文"></category></entry><entry><title>15 分钟学会 R 语言[译文]</title><link href="/2013/10/r-tutorial/" rel="alternate"></link><updated>2013-10-29T22:32:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-10-29:2013/10/r-tutorial/</id><summary type="html">&lt;p&gt;仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 &lt;a href="http://learnxinyminutes.com/"&gt;Learn X in Y minuts&lt;/a&gt; 就是我经常光顾的站点。&lt;/p&gt;
&lt;p&gt;前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。&lt;/p&gt;
&lt;p&gt;Learn X in Y minuts 的源码托管在 &lt;a href="https://github.com/adambard/learnxinyminutes-docs"&gt;Github&lt;/a&gt;。
小柒被我逼着把这篇 &lt;a href="http://learnxinyminutes.com/docs/r/"&gt;R 语言教程&lt;/a&gt;
翻译到 &lt;a href="http://learnxinyminutes.com/docs/zh-cn/r-cn/"&gt;R 语言教程中文版&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 &lt;code&gt;R&lt;/code&gt; 命令。&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 评论以 # 开始&lt;/span&gt;

&lt;span class="c"&gt;# R 语言原生不支持 多行注释&lt;/span&gt;
&lt;span class="c"&gt;# 但是你可以像这样来多行注释&lt;/span&gt;

&lt;span class="c"&gt;# 在窗口里按回车键可以执行一条命令&lt;/span&gt;


&lt;span class="c"&gt;###################################################################&lt;/span&gt;
&lt;span class="c"&gt;# 不用懂编程就可以开始动手了&lt;/span&gt;
&lt;span class="c"&gt;###################################################################&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# 浏览内建的数据集&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 北美主要河流的长度（数据集）&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c"&gt;# 在工作空间中查看「河流」是否出现&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 撇一眼数据集&lt;/span&gt;
&lt;span class="c"&gt;# 735 320 325 392 524 450&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 我们测量了多少条河流？&lt;/span&gt;
&lt;span class="c"&gt;# 141&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#  135.0   310.0   425.0   591.2   680.0  3710.0&lt;/span&gt;
&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 茎叶图（一种类似于直方图的展现形式）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is 2 digit(s) to the right of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 4&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 011223334555566667778888899900001111223333344455555666688888999&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 111222333445566779001233344567&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000112233578012234468&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 045790018&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 04507&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 1471&lt;/span&gt;
&lt;span class="c"&gt;#  14 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  16 | 7&lt;/span&gt;
&lt;span class="c"&gt;#  18 | 9&lt;/span&gt;
&lt;span class="c"&gt;#  20 |&lt;/span&gt;
&lt;span class="c"&gt;#  22 | 25&lt;/span&gt;
&lt;span class="c"&gt;#  24 | 3&lt;/span&gt;
&lt;span class="c"&gt;#  26 |&lt;/span&gt;
&lt;span class="c"&gt;#  28 |&lt;/span&gt;
&lt;span class="c"&gt;#  30 |&lt;/span&gt;
&lt;span class="c"&gt;#  32 |&lt;/span&gt;
&lt;span class="c"&gt;#  34 |&lt;/span&gt;
&lt;span class="c"&gt;#  36 | 1&lt;/span&gt;


&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# 查看数据集的方式既不是标准形式，也不是取log后的结果! 看起来，是钟形曲线形式的基本数据集&lt;/span&gt;

&lt;span class="c"&gt;#  The decimal point is 1 digit(s) to the left of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  48 | 1&lt;/span&gt;
&lt;span class="c"&gt;#  50 |&lt;/span&gt;
&lt;span class="c"&gt;#  52 | 15578&lt;/span&gt;
&lt;span class="c"&gt;#  54 | 44571222466689&lt;/span&gt;
&lt;span class="c"&gt;#  56 | 023334677000124455789&lt;/span&gt;
&lt;span class="c"&gt;#  58 | 00122366666999933445777&lt;/span&gt;
&lt;span class="c"&gt;#  60 | 122445567800133459&lt;/span&gt;
&lt;span class="c"&gt;#  62 | 112666799035&lt;/span&gt;
&lt;span class="c"&gt;#  64 | 00011334581257889&lt;/span&gt;
&lt;span class="c"&gt;#  66 | 003683579&lt;/span&gt;
&lt;span class="c"&gt;#  68 | 0019156&lt;/span&gt;
&lt;span class="c"&gt;#  70 | 079357&lt;/span&gt;
&lt;span class="c"&gt;#  72 | 89&lt;/span&gt;
&lt;span class="c"&gt;#  74 | 84&lt;/span&gt;
&lt;span class="c"&gt;#  76 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  78 | 4&lt;/span&gt;
&lt;span class="c"&gt;#  80 |&lt;/span&gt;
&lt;span class="c"&gt;#  82 | 2&lt;/span&gt;


&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 试试用这些参数画画 （译者注：给 river 做统计频数直方图，包含了这些参数：数据源，颜色，边框，空格）&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#你还可以做更多式样的绘图&lt;/span&gt;

&lt;span class="c"&gt;# 还有其他一些简单的数据集可以被用来加载。R 语言包括了大量这种 data()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：参数为（数据源，颜色，线条宽度，X 轴名称，标题）&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# 除了按照默认的年份排序，我们还可以排序来发现特征&lt;/span&gt;
&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2&lt;/span&gt;
&lt;span class="c"&gt;# [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3&lt;/span&gt;
&lt;span class="c"&gt;# [51]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4&lt;/span&gt;
&lt;span class="c"&gt;# [76]  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  8  9 10 12&lt;/span&gt;

&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：茎叶图（数据，放大系数）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is at the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 000000000&lt;/span&gt;
&lt;span class="c"&gt;#   1 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 00000000000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   3 | 00000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   5 | 0000000&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000000&lt;/span&gt;
&lt;span class="c"&gt;#   7 | 0000&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 0&lt;/span&gt;
&lt;span class="c"&gt;#   9 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  11 |&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 0&lt;/span&gt;

&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 12&lt;/span&gt;

&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#    0.0     2.0     3.0     3.1     4.0    12.0&lt;/span&gt;




&lt;span class="c"&gt;#基本的统计学操作也不需要任何编程知识&lt;/span&gt;

&lt;span class="c"&gt;#随机生成数据&lt;/span&gt;
&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;6.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：runif 产生随机数，round 四舍五入&lt;/span&gt;
&lt;span class="c"&gt;# 1 4 6 1 4 6 4&lt;/span&gt;

&lt;span class="c"&gt;# 你输出的结果会和我们给出的不同，除非我们设置了相同的随机种子 random.seed(31337)&lt;/span&gt;


&lt;span class="c"&gt;#从标准高斯函数中随机生成 9 次&lt;/span&gt;
&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# [1]  0.07528471  1.03499859  1.34809556 -0.82356087  0.61638975 -1.88757271&lt;/span&gt;
&lt;span class="c"&gt;# [7] -0.59975593  0.57629164  1.08455362&lt;/span&gt;









&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 基础编程&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 数值&lt;/span&gt;

&lt;span class="c"&gt;#“数值”指的是双精度的浮点数&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;5e4&lt;/span&gt; &lt;span class="c"&gt;# 50000             # 用科学技术法方便的处理极大值、极小值或者可变的量级&lt;/span&gt;
&lt;span class="mf"&gt;6.02e23&lt;/span&gt; &lt;span class="c"&gt;# 阿伏伽德罗常数#&lt;/span&gt;
&lt;span class="mf"&gt;1.6e-35&lt;/span&gt; &lt;span class="c"&gt;# 布朗克长度&lt;/span&gt;

&lt;span class="c"&gt;# 长整数并用 L 结尾&lt;/span&gt;
&lt;span class="il"&gt;5L&lt;/span&gt;  &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="c"&gt;#输出5L&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;5L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;integer&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 可以自己试一试？用 class() 函数获取更多信息&lt;/span&gt;
&lt;span class="c"&gt;# 事实上，你可以找一些文件查阅 `xyz` 以及xyz的差别&lt;/span&gt;
&lt;span class="c"&gt;# `xyz` 用来查看源码实现，?xyz 用来看帮助&lt;/span&gt;

&lt;span class="c"&gt;# 算法&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="c"&gt;# 76&lt;/span&gt;
&lt;span class="mf"&gt;53.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="c"&gt;# 49.2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;
&lt;span class="il"&gt;3L&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="c"&gt;# 0.75&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c"&gt;# 1&lt;/span&gt;

&lt;span class="c"&gt;# 特殊数值类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;     # 在以下场景中会用到 integrate( dnorm(x), 3, Inf ) -- 消除 Z 轴数据&lt;/span&gt;

&lt;span class="c"&gt;# 但要注意，NaN 并不是唯一的特殊数值类型……&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 看上面&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# NULL&lt;/span&gt;


&lt;span class="c"&gt;# 简单列表&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 6 8 7 5 3 0 9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gimmel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dalet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;he&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Zoro&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# FALSE FALSE FALSE FALSE&lt;/span&gt;

&lt;span class="c"&gt;# 一些优雅的内置功能&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="c"&gt;# 5  6  7  8  9 10 11 12 13 14 15&lt;/span&gt;

&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]     0  1337  2674  4011  5348  6685  8022  9359 10696 12033 13370 14707&lt;/span&gt;
&lt;span class="c"&gt;# [13] 16044 17381 18718 20055 21392 22729 24066 25403 26740 28077 29414 30751&lt;/span&gt;

&lt;span class="n"&gt;letters&lt;/span&gt;
&lt;span class="c"&gt;#  [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; &amp;quot;e&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;i&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;m&amp;quot; &amp;quot;n&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;q&amp;quot; &amp;quot;r&amp;quot; &amp;quot;s&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [20] &amp;quot;t&amp;quot; &amp;quot;u&amp;quot; &amp;quot;v&amp;quot; &amp;quot;w&amp;quot; &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abb&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Jan&amp;quot; &amp;quot;Feb&amp;quot; &amp;quot;Mar&amp;quot; &amp;quot;Apr&amp;quot; &amp;quot;May&amp;quot; &amp;quot;Jun&amp;quot; &amp;quot;Jul&amp;quot; &amp;quot;Aug&amp;quot; &amp;quot;Sep&amp;quot; &amp;quot;Oct&amp;quot; &amp;quot;Nov&amp;quot; &amp;quot;Dec&amp;quot;&lt;/span&gt;


&lt;span class="c"&gt;# Access the n&amp;#39;th element of a list with list.name[n] or sometimes list.name[[n]]&lt;/span&gt;
&lt;span class="c"&gt;# 使用 list.name[n] 来访问第 n 个列表元素，有时候需要使用 list.name[[n]]&lt;/span&gt;
&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;r&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LETTERS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;M&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;September&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# 7&lt;/span&gt;



&lt;span class="c"&gt;# 字符串&lt;/span&gt;

&lt;span class="c"&gt;# 字符串和字符在 R 语言中没有区别&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Horatio&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;character&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;multis &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ø&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;Fortøna møltis dat nimis, nølli satis.&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 逻辑值&lt;/span&gt;

&lt;span class="c"&gt;# 布尔值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 和我们预想的一样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;    &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;   &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;  &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;   &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="c"&gt;# 缺失数据（NA）也是逻辑值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#定义NA为逻辑型&lt;/span&gt;



&lt;span class="c"&gt;# 因子&lt;/span&gt;
&lt;span class="c"&gt;# 因子是为数据分类排序设计的（像是排序小朋友们的年级或性别）&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;female&amp;quot; &amp;quot;male&amp;quot;   &amp;quot;NA&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;#  female female male   NA     female&lt;/span&gt;
&lt;span class="c"&gt;# Levels: female male NA&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 自然以及引产导致的不育症&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;education&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;0-5yrs&amp;quot;  &amp;quot;6-11yrs&amp;quot; &amp;quot;12+ yrs&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 变量&lt;/span&gt;

&lt;span class="c"&gt;# 有许多种方式用来赋值&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;# 这样可以&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# 更推荐这样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="c"&gt;# 这样可行，但是很怪&lt;/span&gt;

&lt;span class="c"&gt;#我们还可以使用强制转型&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 1&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;5&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 循环&lt;/span&gt;

&lt;span class="c"&gt;# for 循环语句&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# while 循环&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 记住，在 R 语言中 for / while 循环都很慢&lt;/span&gt;
&lt;span class="c"&gt;# 建议使用 apply()（我们一会介绍）来错做一串数据（比如一列或者一行数据）&lt;/span&gt;

&lt;span class="c"&gt;# IF/ELSE&lt;/span&gt;

&lt;span class="c"&gt;# 再来看这些优雅的标准&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Noooo! This is blatantly illogical!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# [1] &amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 函数&lt;/span&gt;

&lt;span class="c"&gt;# 定义如下&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#add in a bit of (controlled) noise&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 和其他 R 语言函数一样调用&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 5±ε. 使用 set.seed(2716057) 后， jiggle(5)==5.005043&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 数据容器：vectors, matrices, data frames, and arrays&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 单维度&lt;/span&gt;
&lt;span class="c"&gt;# 你可以将目前我们学习到的任何类型矢量化，只要它们拥有相同的类型&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="c"&gt;#  8  9 10 11&lt;/span&gt;
&lt;span class="c"&gt;# 矢量的类型是这一组数据元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# If you vectorize items of different classes, weird coercions happen&lt;/span&gt;
&lt;span class="c"&gt;#如果你强制的将不同类型数值矢量化，会出现特殊值&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;dog&amp;quot;  &amp;quot;TRUE&amp;quot; &amp;quot;4&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#我们这样来取内部数据，（R 的下标索引顺序 1 开始）&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="c"&gt;# 我们可以根据条件查找特定数据&lt;/span&gt;
&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 3&lt;/span&gt;
&lt;span class="c"&gt;# 抓取矢量中第一个和最后一个字符&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="c"&gt;#如果下标溢出或不存会得到 NA&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# NA&lt;/span&gt;
&lt;span class="c"&gt;# 你可以使用 length() 获取矢量的长度&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;

&lt;span class="c"&gt;# 你可以直接操作矢量或者矢量的子集&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c"&gt;# 16 20 24 28&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="c"&gt;# 25 30&lt;/span&gt;
&lt;span class="c"&gt;# 这里有许多内置的函数，来表现向量&lt;/span&gt;
&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 9.5&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1.666667&lt;/span&gt;
&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 1.290994&lt;/span&gt;
&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 38&lt;/span&gt;

&lt;span class="c"&gt;# 二维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;#你可以为同样类型的变量建立矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# 和 vector 不一样的是，一个矩阵的类型真的是 「matrix」，而不是内部元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# =&amp;gt; &amp;quot;matrix&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 访问第一行的字符&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="c"&gt;# 操作第一行数据&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 3 6 9&lt;/span&gt;
&lt;span class="c"&gt;# 访问一个特定数据&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c"&gt;# 6&lt;/span&gt;
&lt;span class="c"&gt;# 转置整个矩阵（译者注：变成 2 行 3 列）&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    4    5    6&lt;/span&gt;

&lt;span class="c"&gt;# 使用 cbind() 函数把两个矩阵按列合并，形成新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,] &amp;quot;1&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [2,] &amp;quot;2&amp;quot;  &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [3,] &amp;quot;3&amp;quot;  &amp;quot;bird&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [4,] &amp;quot;4&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# matrix&lt;/span&gt;
&lt;span class="c"&gt;# Again, note what happened!&lt;/span&gt;
&lt;span class="c"&gt;# 注意&lt;/span&gt;
&lt;span class="c"&gt;# 因为矩阵内部元素必须包含同样的类型&lt;/span&gt;
&lt;span class="c"&gt;# 所以现在每一个元素都转化成字符串&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="c"&gt;# 按行合并两个向量，建立新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    4    5&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    6    7    0    4&lt;/span&gt;
&lt;span class="c"&gt;# 哈哈，数据类型都一样的，没有发生强制转换，生活真美好&lt;/span&gt;

&lt;span class="c"&gt;# 二维(不同的元素类型)&lt;/span&gt;

&lt;span class="c"&gt;# 利用 data frame 可以将不同类型数据放在一起&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;species&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 给数据列命名&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;data.frame&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#   number species&lt;/span&gt;
&lt;span class="c"&gt;# 1      5     dog&lt;/span&gt;
&lt;span class="c"&gt;# 2      2     cat&lt;/span&gt;
&lt;span class="c"&gt;# 3      1    bird&lt;/span&gt;
&lt;span class="c"&gt;# 4      4     dog&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;factor&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# data.frame() 会将字符向量转换为 factor 向量&lt;/span&gt;

&lt;span class="c"&gt;# 有很多精妙的方法来获取 data frame 的子数据集&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;

&lt;span class="c"&gt;# 多维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;# 使用 arry 创造一个 n 维的表格&lt;/span&gt;
&lt;span class="c"&gt;# You can make a two-dimensional table (sort of like a matrix)&lt;/span&gt;
&lt;span class="c"&gt;# 你可以建立一个 2 维表格（有点像矩阵）&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4    8    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5    9    6&lt;/span&gt;
&lt;span class="c"&gt;#你也可以利用数组建立一个三维的矩阵&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;847&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# , , 1&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    2    8&lt;/span&gt;
&lt;span class="c"&gt;# [2,]  300    9&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    4    0&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# , , 2&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    5   66&lt;/span&gt;
&lt;span class="c"&gt;# [2,]   60    7&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    0  847&lt;/span&gt;

&lt;span class="c"&gt;#列表（多维的，不同类型的）&lt;/span&gt;

&lt;span class="c"&gt;# R语言有列表的形式&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# 随机&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;

&lt;span class="c"&gt;# You can get items in the list like so&lt;/span&gt;
&lt;span class="c"&gt;# 你可以这样获得列表的元素&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="c"&gt;# You can subset list items like vectors&lt;/span&gt;
&lt;span class="c"&gt;# 你也可以和矢量一样获取他们的子集&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# apply()函数家族&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 还记得 mat 么？&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# Use apply(X, MARGIN, FUN) to apply function FUN to a matrix X&lt;/span&gt;
&lt;span class="c"&gt;# 使用(X, MARGIN, FUN)将函数 FUN 应用到矩阵 X 的行 (MAR = 1) 或者 列 (MAR = 2)&lt;/span&gt;
&lt;span class="c"&gt;# That is, R does FUN to each row (or column) of X, much faster than a&lt;/span&gt;
&lt;span class="c"&gt;# R 在 X 的每一行/列使用 FUN，比循环要快很多&lt;/span&gt;
&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    3   15&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    7   19&lt;/span&gt;
&lt;span class="c"&gt;# [3,]   11   23&lt;/span&gt;
&lt;span class="c"&gt;# 还有其他家族函数 ?lapply, ?sapply&lt;/span&gt;

&lt;span class="c"&gt;# 不要被吓到，虽然许多人在此都被搞混&lt;/span&gt;
&lt;span class="c"&gt;# plyr 程序包的作用是用来改进 apply() 函数家族&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;plyr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 载入数据&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# &amp;quot;pets.csv&amp;quot; 是网上的一个文本&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://learnxinyminutes.com/docs/pets.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 前两行&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 最后一行&lt;/span&gt;

&lt;span class="c"&gt;# 以 .csv 格式来保存数据集或者矩阵&lt;/span&gt;
&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pets2.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 保存到新的文件 pets2.csv&lt;/span&gt;
&lt;span class="c"&gt;# set working directory with setwd(), look it up with getwd()&lt;/span&gt;
&lt;span class="c"&gt;# 使用 setwd() 改变工作目录，使用 getwd() 查看当前工作目录&lt;/span&gt;

&lt;span class="c"&gt;# 尝试使用 ?read.csv 和 ?write.csv 来查看更多信息&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 画图&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 散点图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fake data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：横轴 list1$time，纵轴 wlist1$price，标题 fake data&lt;/span&gt;
&lt;span class="c"&gt;# 回归图&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：线性模型，数据集为list1，以价格对时间做相关分析模型&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="c"&gt;# 拟合结果&lt;/span&gt;
&lt;span class="c"&gt;# 将拟合结果展示在图上，颜色设为红色&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 也可以获取各种各样漂亮的分析图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 直方图&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpois&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;thistle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：统计频数直方图&lt;/span&gt;

&lt;span class="c"&gt;# 柱状图&lt;/span&gt;
&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# 可以尝试着使用 ggplot2 程序包来美化图片&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ggplot2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;获得 R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;a href="http://www.r-project.org/"&gt;http://www.r-project.org/&lt;/a&gt; 获得安装包和图形化界面&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rstudio.com/ide/"&gt;RStudio&lt;/a&gt; 是另一个图形化界面&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="译文"></category></entry><entry><title>读《大规模Web服务开发技术》</title><link href="/2013/06/web-technology/" rel="alternate"></link><updated>2013-06-29T00:17:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-06-29:2013/06/web-technology/</id><summary type="html">&lt;p&gt;年前看了这本书《大规模Web服务开发技术》，当时给的评价是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法，
在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。&lt;/p&gt;
&lt;p&gt;&lt;img alt="大规模Web服务开发技术" src="http://img3.douban.com/lpic/s6818566.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《大规模Web服务开发技术》@豆瓣： &lt;a href="http://book.douban.com/subject/6758780/"&gt;http://book.douban.com/subject/6758780/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;规模&lt;/h2&gt;
&lt;p&gt;小规模 / 大规模 /
超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便&lt;/p&gt;
&lt;h2&gt;内存、磁盘、负载&lt;/h2&gt;
&lt;p&gt;内存快，磁盘慢，ＩＯ 速度的差异&lt;/p&gt;
&lt;h2&gt;数据分布式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用局部分布式，热数据独立出来。&lt;/li&gt;
&lt;li&gt;Partition 分布式，按模块分割数据。&lt;/li&gt;
&lt;li&gt;按 ID 分割，比如 a-g, h-z&lt;/li&gt;
&lt;li&gt;按访问类型，一般请求 / feed / 图像（#毒药计划的原理）&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;索引&lt;/h2&gt;
&lt;p&gt;索引，B 树（是一颗平衡树，log n 速度查找，顺序读取，插入，删除） / Ｂ+
树（节点只保存子节点指针，叶子保存数据）&lt;/p&gt;
&lt;p&gt;使用 MySQL 索引的语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where&lt;/li&gt;
&lt;li&gt;order by&lt;/li&gt;
&lt;li&gt;group by&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个查询时候要使用复合索引，每次查询只会走单一一个索引。&lt;/p&gt;
&lt;h2&gt;算法&lt;/h2&gt;
&lt;p&gt;感受算法 log n, 线性的差距。&lt;/p&gt;
&lt;h3&gt;字符匹配&lt;/h3&gt;
&lt;p&gt;正则到 Trie&lt;/p&gt;
&lt;h3&gt;贝叶斯匹配&lt;/h3&gt;
&lt;h3&gt;全文搜索&lt;/h3&gt;
&lt;p&gt;逆向索引&lt;/p&gt;
&lt;h2&gt;基础设施&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云 / 自己构建&lt;/li&gt;
&lt;li&gt;评估服务器性能极限&lt;/li&gt;
&lt;li&gt;负载跟踪：平均负载 / 内存 / CPU 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;冗余&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web 服务器冗余&lt;/li&gt;
&lt;li&gt;DB 冗余&lt;/li&gt;
&lt;li&gt;存储系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;维稳&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能增加 / 内存泄漏&lt;/li&gt;
&lt;li&gt;特定 URL 的地雷，资源循环&lt;/li&gt;
&lt;li&gt;访问暴增&lt;/li&gt;
&lt;li&gt;数据量增加&lt;/li&gt;
&lt;li&gt;外部 API 稳定（新浪等）&lt;/li&gt;
&lt;li&gt;硬件故障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;对策&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保持余量， 在 70% 极限内运行&lt;/li&gt;
&lt;li&gt;异常时候的自动重启 / 自动中止耗时查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;虚拟化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解除物理限制&lt;/li&gt;
&lt;li&gt;软件层面主机控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 寻找瓶颈&lt;/h2&gt;
&lt;p&gt;调优的意义：「找出负载原因并去除」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看平均负载&lt;/li&gt;
&lt;li&gt;top / uptime&lt;/li&gt;
&lt;li&gt;确认 CPU、 I/O 瓶颈&lt;/li&gt;
&lt;li&gt;sar / vmstat 检查交换区状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 负载&lt;/h2&gt;
&lt;p&gt;负载的含义：等待 CPU / IO 资源的进程数。 知道了负载还要知道如何看 CPU
还是 IO 负载。&lt;/p&gt;
&lt;h2&gt;番外：sar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sar-P ALL&lt;/li&gt;
&lt;li&gt;sar -u&lt;/li&gt;
&lt;li&gt;sar -q&lt;/li&gt;
&lt;li&gt;sar -r&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外：Henata 的选择&lt;/h2&gt;
&lt;p&gt;队列系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/TheSchwartz"&gt;TheSchwartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gearman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DB 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key Value： memcached / &lt;a href="/TokyoTyrant"&gt;TokyoTyrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MyISAM / InnoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MogileFS&lt;/li&gt;
&lt;li&gt;NFS&lt;/li&gt;
&lt;li&gt;WebDAV&lt;/li&gt;
&lt;li&gt;DRBD&lt;/li&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓存系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squid&lt;/li&gt;
&lt;li&gt;Vanish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;/ul&gt;</summary><category term="读书笔记"></category></entry><entry><title>Arch，再见</title><link href="/2013/04/buy-arch/" rel="alternate"></link><updated>2013-04-13T22:04:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-04-13:2013/04/buy-arch/</id><summary type="html">&lt;p&gt;&lt;img alt="Arch" src="http://upload-log4d.qiniudn.com/2013/04/archlinux-logo-dark-1200dpi_.png" /&gt;&lt;/p&gt;
&lt;p&gt;Arch 是我真正使用的第一款 Linux 发行版，大约使用了三年，
现在的这个 VPS 跑的系统也是 Arch。
然而随着时间变化，我从最早的天天更新狂，到一周、一个月、三个月和不主动更新。
彻底从从不折腾会死星人变成了一个尽量避免变更的老用户。&lt;/p&gt;


&lt;p&gt;Arch 很适合作为第二个（第一个是新手使用的 Ubuntu），它的哲学 KISS 非常优雅，
Keep It Simple And Stupid。基于这原则，它将 Linux 内部的使用、运维细节都展现出来。
毫不夸张的说，被 Arch 折腾几年，就能胜任 Linux SA 的角色了（笑）。&lt;/p&gt;
&lt;p&gt;可是这种深入带来的学习成本也很高，需要不停地跟着 Arch 社区的变化而变化。
每次更新之前需要先阅读官方升级指南，搞不好就升级给挂了。
而且 Arch 社区升级激进得有些可怕。rc.d 升级 systemctl 时候，我还能撑住，
MySQL 转 MariaDB 时候，我也还凑合，但是当我安装一个 privoxy 导致 pacman
崩溃，进而不能安装程序时候，我失去了耐心。&lt;/p&gt;
&lt;p&gt;想来也是，我已过折腾系统的年龄，不会给手机刷机 ROM，
而是安安本本的使用没越狱的 iPhone。越发觉得时间和精力是有限的，
需要把它们用到「正经」的地方。我对 Linux 宗教般的膜拜，也逐渐消失，
等下次 MBP 发布我就考虑出手，哈哈。&lt;/p&gt;
&lt;p&gt;我曾经的签名中鲜亮的标着「ArchLinux / Python / Vim」，现在要把 ArchLinux 改成
Linuxer 了。
昨晚装了 Ubuntu 12.10，我不喜欢 Ubuntu，只是它图简单省事，社区支持丰富。
在装完之后就卸掉了几十个系统自带的应用，然后把 Awesome 桌面迁移到 Debian 环境。&lt;/p&gt;
&lt;p&gt;再见，ArchLinux，我会永远感谢你的。&lt;/p&gt;</summary><category term="ArchLinux"></category></entry><entry><title>读《人件》</title><link href="/2013/04/peopleware/" rel="alternate"></link><updated>2013-04-10T23:35:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-04-10:2013/04/peopleware/</id><summary type="html">&lt;p&gt;事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要，
还是通过语言/工具来约束人重要」。
我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。
如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。
并不是静态编译和工具检查就能搞定了。&lt;/p&gt;
&lt;p&gt;我愤愤的在 QQ 对话框中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学
后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量
现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="人件" src="http://img3.douban.com/lpic/s1299961.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;人件已经绝版，只能在找线上版，我花了两个星期把它读完。
书中给了我一部分答案，另外还有一些意外的收获。&lt;/p&gt;


&lt;p&gt;《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。&lt;/p&gt;
&lt;p&gt;《人件》@豆瓣： &lt;a href="http://book.douban.com/subject/1108725/"&gt;http://book.douban.com/subject/1108725/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《人件》在线阅读地址： &lt;a href="http://book.zi5.me/books/read/2206"&gt;http://book.zi5.me/books/read/2206&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。&lt;/p&gt;
&lt;h2&gt;以人为本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;技术人员转成项目经理经理之后，往往继续用工程化思维管理人员，
认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 &lt;strong&gt;有效&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作，
而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。
错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错，
会让团队成员失去创造的勇气。
我相信这也是为什么 Facebook 早期会践行「Break it Down」。&lt;/p&gt;
&lt;h2&gt;何不双赢&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;西班牙人的理论坚持认为地球上只有一个固定数量的价值，
因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。
而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命，
而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。
他们从海上运回大量的黄金，
他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我坚信公司和员工并不是对立面的，双赢才是正确的路线。
大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。
前提就是对产品有认同感，对公司有归属感。&lt;/p&gt;
&lt;h2&gt;最好和最坏&lt;/h2&gt;
&lt;p&gt;作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛，
分析出以下数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成绩最好与成绩最差的人之间的绩效比率是10 : 1。&lt;/li&gt;
&lt;li&gt;最好选手成绩大约是中等成绩选手成绩的2.5倍。&lt;/li&gt;
&lt;li&gt;成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.aqee.net/"&gt;外刊 IT 评论&lt;/a&gt;的
&lt;a href="http://www.aqee.net/why-programmers-are-not-paid-in-proportion-to-their-productivity/"&gt;为什么程序员的工作效率跟他们的工资不成比例&lt;/a&gt; 一文中也提供一些数据支持。&lt;/p&gt;
&lt;p&gt;我离最好还有很长的距离，但是我相信个人能力是可以提升的，
并且在个人能力上面的投资汇报比极高。&lt;/p&gt;
&lt;h2&gt;高效工作的秘诀&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进入顺流：咦？怎么时间过得这么快？！&lt;/li&gt;
&lt;li&gt;邮件比电话更不容易打乱人的思绪&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;团队的力量&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;团结起来，工作的更高效更开心&lt;/li&gt;
&lt;li&gt;有目标的团队，1 + 1 &amp;gt; 2&lt;/li&gt;
&lt;li&gt;为一个共同的目标走到一起&lt;/li&gt;
&lt;li&gt;优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队&lt;/li&gt;
&lt;li&gt;优秀的团队往往是带有个性的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;《人人都是产品经理》中当时讲了一个愿景（Vison）问题，
我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。&lt;/p&gt;
&lt;h2&gt;烂团队的苗头&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;防范团队成员&lt;/li&gt;
&lt;li&gt;官僚作风&lt;/li&gt;
&lt;li&gt;不挨在一起工作（空间上）&lt;/li&gt;
&lt;li&gt;某个成员的职责被分割多份&lt;/li&gt;
&lt;li&gt;对产品质量要求降低&lt;/li&gt;
&lt;li&gt;无意义的截止日期（不可能达到的目标）&lt;/li&gt;
&lt;li&gt;结党营私&lt;/li&gt;
&lt;li&gt;加班&lt;/li&gt;
&lt;li&gt;绩效考核 / 目标奖励 &lt;/li&gt;
&lt;li&gt;早期时候人员超编&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里和上文的愿景问题是对应的，无论是强制加班还是通过考核回报激励，
都不是激发人的创造力和战斗力的好方法。老大们应该学会画饼，画大饼。
另外，管理团队果然好难：做的事情必须靠谱，才能吸引到人才；
需要能管理好有个性的人才（比如伞哥这样的）； 在中国大环境下，还要不错的物质回报。&lt;/p&gt;
&lt;h2&gt;经营好团队&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;崇拜高质量：因为市场和用户需要高质量的产品&lt;/li&gt;
&lt;li&gt;通过里程碑的方式管理任务，提高士气&lt;/li&gt;
&lt;li&gt;崇拜精英&lt;/li&gt;
&lt;li&gt;允许和鼓励异端：异端代表创新和进化，没有异端就会种群灭亡&lt;/li&gt;
&lt;li&gt;给予自由度：对成员信任，而不是纯粹服从权威工作&lt;/li&gt;
&lt;li&gt;交流，唤醒那些有潜力的巨人（唤醒了才能将脑力劳动能力发挥到极限）&lt;/li&gt;
&lt;li&gt;内部竞争和培养&lt;/li&gt;
&lt;li&gt;管理层自身的学习，公司自身定位的不断改变&lt;/li&gt;
&lt;li&gt;将公司内部建设出社区文化（我觉得就是公司团队文化建设嘛）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我有一个观点是工程质量决定产品质量，产品质量决定整个团队。
质量的一个标准是：&lt;strong&gt;我以此为荣&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;工作是一种乐趣&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将混乱重建成秩序是有趣的&lt;/li&gt;
&lt;li&gt;敢于用小项目来做尝试&lt;/li&gt;
&lt;li&gt;组织竞赛游戏&lt;/li&gt;
&lt;li&gt;团队头脑风暴&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这本这么老的书居然提到团队竞争游戏，和 Facebook 的 Hackday 异曲同工啊。
再为这种乐趣补充一点：将公司的成果分享到开源社区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员需要做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;界定自己工作，成为主人翁&lt;/li&gt;
&lt;li&gt;促使自己成长为多面手，而不是单纯某个职位&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;给了成员足够的自由度，那么就会有相应的风险，需要对他们进行监测，
另外招人时候就需要找靠谱的人，这也是为什么 Facebook / Google / 早期百度对招人要求极其严格。&lt;/p&gt;
&lt;h2&gt;流程改进&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CMM 是标准，是标准的话就一定不是对于个体的最优情况&lt;/li&gt;
&lt;li&gt;CMM 自身也在改进，说明上一个版本的 CMM 不是最优&lt;/li&gt;
&lt;li&gt;流程的目标是：提高质量 / 提高生产力 / 减少风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;读后感&lt;/h2&gt;
&lt;p&gt;发挥个人的能力才是最关键的，要点在于信任、自由、乐趣。原则是 Pull 而不是 Push。&lt;/p&gt;
&lt;p&gt;我会继续学习和思考这些原则，因为总有一天我也会面临这样的挑战。&lt;/p&gt;</summary><category term="创业"></category><category term="读书笔记"></category></entry><entry><title>读《打造 Facebook》</title><link href="/2013/02/facebook/" rel="alternate"></link><updated>2013-02-25T00:51:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-02-25:2013/02/facebook/</id><summary type="html">&lt;p&gt;感谢好基友 &lt;a href="http://weibo.com/idao"&gt;@daodao&lt;/a&gt; 送了我这本《&lt;a href="http://book.douban.com/subject/20471120/"&gt;打造 Facebook&lt;/a&gt;》，
年前一直忙，最近腾出两个晚上，把这本很火的书看完了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="http://img3.douban.com/lpic/s24581301.jpg" /&gt;&lt;/p&gt;


&lt;p&gt;第一次听见王淮这个名字，其实是在知乎上面，
当时有一个问题 &lt;a href="http://www.zhihu.com/question/20239975"&gt;Facebook 早期员工王淮在职期间有什么成就？&lt;/a&gt;。
之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。&lt;/p&gt;
&lt;p&gt;书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。&lt;/p&gt;
&lt;p&gt;============================== 我是分割线 ============================== &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facebook 招人标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对公司的忠诚，是文化认同的附属品&lt;/li&gt;
&lt;li&gt;技术面试 2.5 / 系统设计 1 / 文化面试 0.5&lt;/li&gt;
&lt;li&gt;5 个程度的面试打分&lt;/li&gt;
&lt;li&gt;高标准人才，喜欢挑战和完成艰巨任务&lt;/li&gt;
&lt;li&gt;慢招人，快炒鱿鱼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新兵训练营&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局认识 / 工具和框架 / 运营商业模式 / 选组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程师入职不区分方向&lt;/li&gt;
&lt;li&gt;导师&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑客文化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习 / 再创造&lt;/li&gt;
&lt;li&gt;Done is better than perfect / Code wins arguments&lt;/li&gt;
&lt;li&gt;工程师参与构思、设计、实现&lt;/li&gt;
&lt;li&gt;很少有「这样子一定成功」，「我们来试试吧」，通过数据反馈&lt;/li&gt;
&lt;li&gt;工程师主导产品开发&lt;/li&gt;
&lt;li&gt;跨部门回忆，由工程师汇报进度&lt;/li&gt;
&lt;li&gt;开发准则：迅速开发、进行监测 / 坦然对待不确定性 / 不追求极致，不断发布到达目标&lt;/li&gt;
&lt;li&gt;工具文化&lt;/li&gt;
&lt;li&gt;换职位，Hack a month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;王淮转管理岗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facebook 开发流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描绘远景、设置目标&lt;ul&gt;
&lt;li&gt;SMART：详细、可度量、有难度、现实的、有期限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优先级和时间分配（6-2-2：预期任务-品质改良-有风险任务）&lt;ul&gt;
&lt;li&gt;120% 难度任务 / 任务段分片进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跨团队沟通 / 通知&lt;/li&gt;
&lt;li&gt;设计产品&lt;ul&gt;
&lt;li&gt;衡量指标：时间、预算、质量&lt;/li&gt;
&lt;li&gt;3 倍目标经验&lt;/li&gt;
&lt;li&gt;早期快速迭代变成多方面参与的流程控制&lt;/li&gt;
&lt;li&gt;前期评估优缺点和风险&lt;/li&gt;
&lt;li&gt;不重复造轮子，拥抱开源&lt;/li&gt;
&lt;li&gt;一些理念：不要过度设计、越简单越好、自己就是用户、好用流畅、不追求完美、最基本质量线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定责任人，定期碰头，了解进度，汇总报告&lt;/li&gt;
&lt;li&gt;发布产品，监测数据（系统状态，用户反馈，报警系统）&lt;ul&gt;
&lt;li&gt;问题事件分析：发生了什么，影响多大，问题原因，发生过程，如何避免&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考核激励&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;王淮做天使&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本书谈不上经典，也不是全文干货，但仍然能从一些章节中获取有用的信息，
推荐一读。&lt;/p&gt;</summary><category term="创业"></category><category term="读书笔记"></category></entry><entry><title>在 Python 中使用 epoll[译文]</title><link href="/2013/01/python-epoll/" rel="alternate"></link><updated>2013-01-12T00:01:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-01-12:2013/01/python-epoll/</id><summary type="html">&lt;p&gt;原文地址： &lt;a href="http://scotdoyle.com/python-epoll-howto.html"&gt;http://scotdoyle.com/python-epoll-howto.html&lt;/a&gt; ，
我这里取精简内容翻译过来。&lt;/p&gt;
&lt;p&gt;============ 正文开始 ============ &lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Python 从 2.6 开始支持 &lt;a href="http://linux.die.net/man/4/epoll"&gt;epoll&lt;/a&gt;。现在我们用 Python3 来写基于这些 API
的 epoll 范例。&lt;/p&gt;


&lt;h2&gt;阻塞的 Socket 通信范例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: Mon, 1 Jan 1996 01:01:01 GMT&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type: text/plain&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 13&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个范例中的代码在 &lt;code&gt;accept()&lt;/code&gt; 、 &lt;code&gt;recv()&lt;/code&gt; 和 &lt;code&gt;send()&lt;/code&gt; 时候会发生阻塞，
导致其他连接无法完成。&lt;/p&gt;
&lt;p&gt;通常情况下，在我们使用阻塞模型时候，会专门建立一个主线程来进行监听，
将建立成功的连接交给其他线程操作，然后继续在主线程上面监听。
这样一来，就不会受单次请求阻塞的限制。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kegel.com/c10k.html"&gt;C10K&lt;/a&gt; 问题描述了其他处理高并发方法，比如异步 Socket，
通过监听事件来触发预设的响应。异步 Socket 可以是单线程，也可以是多线程。&lt;/p&gt;
&lt;p&gt;Python 的 API 中包含了 select / poll / epoll，具体的可用性依赖于操作系统。
他们的效率是 epoll &amp;gt; poll &amp;gt; select，从这个 &lt;a href="http://lse.sourceforge.net/epoll/index.html"&gt;性能测试文章&lt;/a&gt; 就可以看出来。&lt;/p&gt;
&lt;h2&gt;epoll 异步编程范例&lt;/h2&gt;
&lt;p&gt;epoll 的流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 epoll 实例&lt;/li&gt;
&lt;li&gt;告诉 epoll 去监听哪几种类型事件&lt;/li&gt;
&lt;li&gt;向 epoll 查询最近已监听事件的变化&lt;/li&gt;
&lt;li&gt;根据不同的类型做不同的处理&lt;/li&gt;
&lt;li&gt;让 epoll 修改监听列表&lt;/li&gt;
&lt;li&gt;重复 3-5 直到结束&lt;/li&gt;
&lt;li&gt;消灭 epoll 实例&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;

&lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: Mon, 1 Jan 1996 01:01:01 GMT&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type: text/plain&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 13&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;epoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
            &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
               &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;byteswritten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;byteswritten&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SHUT_RDWR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLHUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最关键的几行如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;16：注册感兴趣的事件&lt;/li&gt;
&lt;li&gt;23：如果发现是监听 socket，则创建连接&lt;/li&gt;
&lt;li&gt;30：读事件处理&lt;/li&gt;
&lt;li&gt;33：读事件完成后，修改 epoll 对应的状态到写事件&lt;/li&gt;
&lt;li&gt;35：写事件&lt;/li&gt;
&lt;li&gt;41：释放对应的连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Epoll 分边缘触发（edge-triggered）和水平触发（level-triggered）两种，
前者只被内核触发一次通知（除非状态被改变为未就绪），后者在触发后如果不做操作，
以后仍然会收到内核的触发通知。&lt;/p&gt;
&lt;h2&gt;更多优化&lt;/h2&gt;
&lt;h3&gt;连接等待池大小&lt;/h3&gt;
&lt;p&gt;我们之前的代码直接使用 &lt;code&gt;listen()&lt;/code&gt; 建立连接，可以通过设定一个队列大小，
在队列满了时候，就不再接受新的连接，从而保证已经接受的连接顺利完成。&lt;/p&gt;
&lt;h3&gt;TCP 选项&lt;/h3&gt;
&lt;p&gt;使用 [TCP_CORK][] 功能，可以将小数据包封装成大包传输，提高效率。&lt;/p&gt;
&lt;p&gt;[TCP_NODELAY][] 则作用相反，将大包分成小包发送出去。比较适合实时应用比如 SSH。&lt;/p&gt;
&lt;p&gt;（译者：&lt;a href="http://www.uplook.cn/blog/8/81276/"&gt;Linux下高性能网络编程中的几个TCP/IP选项&lt;/a&gt;介绍这几个 HTTP，写的不错。&lt;/p&gt;
&lt;p&gt;范例中的源码在 &lt;a href="http://scotdoyle.com/python-epoll-examples.tar.gz"&gt;source code&lt;/a&gt; 下载。&lt;/p&gt;</summary><category term="译文"></category></entry><entry><title>My 2012</title><link href="/2013/01/my_2012/" rel="alternate"></link><updated>2013-01-01T22:59:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-01-01:2013/01/my_2012/</id><summary type="html">&lt;p&gt;本想着末日来了也是好事，大家都挂了，一了百了，啥事情都不用干了。
不过末日既然没来，工作和生活就得继续下去，年末了还是需要缅怀一下 2012，
然后展望一下 2013。&lt;/p&gt;


&lt;h2&gt;2012 关键词：妹子&lt;/h2&gt;
&lt;p&gt;和姑娘 A 不得不说的故事，追了一段时间之后发现太熟了，不好下手，另外三观有点不一致，
现在已经有男朋友了。更八卦的段子见
&lt;a href="http://www.zhihu.com/question/20105731/answer/13994954"&gt;有哪些智能手机用户的行为让你当时就震惊了？&lt;/a&gt;
另有青春年少萝莉一枚，让我确认自己不是基佬，已死心。&lt;/p&gt;
&lt;p&gt;最近几年我蛮少对异性有好感产生，或许是周围姑娘太少的缘故，或许是爱无能了。&lt;/p&gt;
&lt;h2&gt;2012 关键词：魔都&lt;/h2&gt;
&lt;p&gt;8 月份的时候我做了决定，从南京撤出，战略大转移到上海，当时家人都极度反对，
我还是偷偷摸摸进行的。面试火花时候，Jim Sang 问一个问题：
「长这么大做过最大的决定是什么？」我下意识的回答说，从南京到上海算是一个。
现在看来，这个决定是蛮正确的，大体上是我想要的生活。&lt;/p&gt;
&lt;h2&gt;2012 关键词：技术&lt;/h2&gt;
&lt;p&gt;今年技术方面是修修补补的进步，没有以往跳跃式的变化。年初的时候做了一个
Shiu HTML5 应用，顺便在南京 HTML5 小组分享了一下，貌似那是南京 HTML5
小组今年唯一一次聚会。5 月份时候回了一趟母校，做了一个关于 Linux 以及开源的分享。
上半年在公司大部分时间被拉过去做 Java@Play 的业务开发。&lt;/p&gt;
&lt;p&gt;9 月份开始在上海上班，在这 4 个月中，从企业开发走到互联网创业公司，
一下子就被公司文化吸引住了。最早的两个月很是开心，然后就发现些问题，
然后最大的问题是我不知道是我自己的问题还是公司的问题。
因为不懂，我只能少说多做，多看资料做查证。这也是我接来下三个月要做的事情。&lt;/p&gt;
&lt;p&gt;既然到了魔都，那很多技术聚会当然是不得不去啦，从 HUJS 到 PyCon2012，
再到 SHLUG 15 周年，都留下了我猥琐的身影。结识了蛮多厉害的朋友，
还有很多传说中的大神，笔记本上也贴上了花花绿绿的贴纸。&lt;/p&gt;
&lt;p&gt;今年技术的主要进步在 Python 继续学习 + 高并发处理，我以前竟然都不知道 C10K 问题，
真是太土鳖了。&lt;/p&gt;
&lt;h2&gt;2012 关键词：结婚&lt;/h2&gt;
&lt;p&gt;表紧张，不是我结婚，而是。。。毛爷爷、阿娇、鸡鸡、晨晨他们结婚了，
毛爷爷和晨晨甚至都搞定了儿子。好朋友都结婚了，我还是学左右互搏之术，真是弱爆了。&lt;/p&gt;
&lt;h2&gt;展望 2013&lt;/h2&gt;
&lt;p&gt;去年我写 2012 的愿望是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;离梦想更近一步&lt;/p&gt;
&lt;p&gt;找一个靠谱的姑娘，我感觉她需要我，我也需要她了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;离梦想更进一步，这个我在地理上做到了，今年我把这个愿望拆得再细致一点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成为一个为百万用户级别提供技术支撑的人物，要能独当一面&lt;/li&gt;
&lt;li&gt;帮助网站进行性能优化&lt;/li&gt;
&lt;li&gt;制定规则，平衡猥琐实现和优雅&lt;/li&gt;
&lt;li&gt;继续写博客，分享积累 + 翻译文章&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS：去年的第二个愿望没有完成，今年继续争取～&lt;/p&gt;</summary></entry><entry><title>如何让 Instagram 在一百多万用户爆炸后稳定运行</title><link href="/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/" rel="alternate"></link><updated>2012-11-19T00:06:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-11-19:2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</id><summary type="html">&lt;p&gt;原文链接：&lt;a href="http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in"&gt;Keeping Instagram up with over a million new users in twelve hours&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这周二我们发布了 &lt;a href="https://play.google.com/store/apps/details?id=com.instagram.android"&gt;Instagram for Android&lt;/a&gt;，反响空前强烈。
最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。
尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。
在这里我们将分享一些帮助我们解决问题的工具和技术。&lt;/p&gt;


&lt;h2&gt;statsd&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://github.com/etsy/statsd/"&gt;statsd&lt;/a&gt; 在 Instagram 很受欢迎。这是 &lt;a href="http://github.com/etsy/"&gt;Etsy&lt;/a&gt; 写的一个网络监控器，
能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。
我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。
同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。&lt;/p&gt;
&lt;p&gt;我们喜欢 statsd 的最大原因是它能迅速将状态显示并图形化出来。
Stats 几乎是实时的（在我们系统中有 10 秒钟的延时）
帮助我们评估系统状况和代码变化情况。
Stats 可以随意启用，当我们需要跟踪时，能够快速启用它。
你可以指定一个取样密度，来均匀的查看 web 应用概况，
而不会影响它运行效率。&lt;/p&gt;
&lt;p&gt;总结：实时统计可以动态添加，帮助你线上诊断而无须等待问题重现。&lt;/p&gt;
&lt;h2&gt;Dogslow&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.bitbucket.org/2011/05/17/tracking-slow-requests-with-dogslow/"&gt;Bitbucket&lt;/a&gt; 出品，Dogslow 是一个 Django middleware，它能监视运行的进程，
当发现有进程运行时间超过 &lt;em&gt;N&lt;/em&gt; 秒时，会保存当前进程信息的快照到磁盘。
一直开着它很耗性能，但当去定位突发问题的瓶颈时，就会非常有用（我们在 web
服务器上加了一个开关控制）。&lt;/p&gt;
&lt;p&gt;在发布那天，我们发现很多运行时间超过 1.5s 的进程都卡在 memcached 的 set()
和 get_many() 方法上。我们使用 Munin 跟踪我们的机器状态，发现 memcached
每秒有 5 万次请求，因此，尽管还没到达 CPU 上限，却被 memcached
拖慢了应用服务器速度。&lt;/p&gt;
&lt;p&gt;总结：瓶颈往往是后台的一个短板造成的，定位到底哪里卡下来能帮助找出问题根源。&lt;/p&gt;
&lt;h2&gt;Replication &amp;amp; Read-slaves&lt;/h2&gt;
&lt;p&gt;我们主要的两个数据源 &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; 和 &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt; 都可以方便地主从分离。
当我们的 Redis 数据库到达每秒 4 万请求时候，开始成为瓶颈。我们在另外一台服务器
打开 &lt;a href="http://redis.io/topics/replication"&gt;SYNCing to the master&lt;/a&gt;，然后将读请求发送到这台服务器，
这些操作仅耗时 20 分钟。根据几个案例，有些机器的负载会偏离了我们预期，
所以我们会提前准备好从服务器，从而快速地分离出读请求。&lt;/p&gt;
&lt;p&gt;比方说 Postgres，我们混合使用 &lt;a href="http://wiki.postgresql.org/wiki/Streaming_Replication"&gt;Streaming Replication&lt;/a&gt; 和 Amazon EBS
快照来快速启动从服务器。所有从主 DB 到从服务器的数据不定时会有 EBS 快照。
根据这些快照，我们可以在 20 分钟内启动新的从服务器并通知主服务器。
在 AWS 这样的环境中，我们使用脚本和命令来很快的预判并部署新的从服务器。&lt;/p&gt;
&lt;p&gt;总结：如果读能力会变成瓶颈，那就预先准备好从服务器，并让他们轮询服务。
一旦出现了新的读问题，要做的仅仅是加更多的读服务器到轮询中去。&lt;/p&gt;
&lt;h2&gt;PGFouine&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://pgfouine.projects.postgresql.org/"&gt;PGFouine&lt;/a&gt; 是一个分析 PostgreSQL 查询日志并生成查询结果的工具。
将最重、最常用、最慢的查询拆分出来。我们写了一个 Fabric 脚本来方便的使用它，
连接到一个数据库，然后等待 30 秒并记录下其中每条查询，把结果保存到本地再用
pgfouine 来分析，这里可以看到 &lt;a href="https://gist.github.com/2307647"&gt;as a gist&lt;/a&gt;。PGFouine
是我们用来分析数据库性能的核心工具。帮我们找出哪些查询应该被 memcached 缓存，
哪些查询了过度的数据等等。发布那天数据库出现了一点压力，我们就跑 PGFouine，
然后部署一些提升性能的代码来缓解压力，然后再跑一次 PGFouine 来确认效果。&lt;/p&gt;
&lt;p&gt;知道平日里数据库表现性能很重要，因此我们也定期在无压力的服务器上统计信息。&lt;/p&gt;
&lt;p&gt;总结：数据库日志分析（尤其注意迭代循环查询和缓存经常使用的数据）&lt;/p&gt;
&lt;h2&gt;One more thing&lt;/h2&gt;
&lt;p&gt;另一个帮助我们顺利通过发布第一天的工具是我们自己写的一个 node.js 服务，node2dm，
用来推送通知消息到 Android C2DM 服务。它至今已经发送了 500 万条推送。&lt;/p&gt;
&lt;p&gt;我们调查了一些支持 C2DM 的可用服务，但要么是开源包不那么被积极维护，
要么是不支持 Google 所有的功能。我们现在用 &lt;a href="http://github.com/Instagram/node2dm"&gt;open sourcing node2dm&lt;/a&gt;，
你可以随意 forlk / pull-request 来帮助我们改进。&lt;/p&gt;
&lt;h2&gt;Interested?&lt;/h2&gt;
&lt;p&gt;如果你对这些很感兴趣，你可以跟我们联系来获得工作机会，&lt;a href="http://instagram.jobscore.com/jobs/instagram/engineer/bXctey0Oir4kCZeJe4bk1X"&gt;drop us a note&lt;/a&gt;，
我们需要知道你的想法。&lt;/p&gt;
&lt;p&gt;你可以在 Hacker News 来 &lt;a href="http://news.ycombinator.com/item?id=3804351"&gt;discuss this post&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mike Krieger, co-founder&lt;/em&gt;&lt;/p&gt;</summary><category term="Instagram"></category><category term="译文"></category><category term="Django"></category><category term="Database"></category></entry><entry><title>KuKu-一个 Weekend Project</title><link href="/2012/11/kuku/" rel="alternate"></link><updated>2012-11-18T22:31:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-11-18:2012/11/kuku/</id><summary type="html">&lt;p&gt;一个小小的 Weekend Project，基于 &lt;a href="http://webpy.org/"&gt;web.py&lt;/a&gt;。
代码在 &lt;a href="https://github.com/alswl/kuku"&gt;alswl / kuku&lt;/a&gt; ，很简陋，属于差不多能用阶段。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kuku" src="http://upload-log4d.qiniudn.com/2012/11/kuku.png" /&gt;&lt;/p&gt;
&lt;p&gt;基于以下原因开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想把服务器去 PHP 化，以前的 &lt;a href="http://upload-log4d.qiniudn.com/"&gt;upload.log4d.com&lt;/a&gt; 是基于 PHP 的，
详情请见 &lt;a href="http://log4d.com/2012/05/image-host/"&gt;使用独立图床子域名&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;刚买的 &lt;a href="http://www.linode.com/?r=7e51a136a0eca06c5f6474373f616bbdaa2b5b6c"&gt;Linode VPS&lt;/a&gt;，终于从 128MB 内存解放出来了，赶紧放个 Python 程序跑跑。&lt;/li&gt;
&lt;li&gt;想些 Python 了，手痒，想看看写这么简单的功能需要多长时间，
弥补上次没能参加黑客马拉松的遗憾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KuKu 的发音是我家乡话的「看看」。&lt;/p&gt;
&lt;p&gt;KuKu 中比较有趣的地方是，用了 &lt;a href="http://foundation.zurb.com/"&gt;Foundation&lt;/a&gt; 这个流式 Web 前端框架，
用了 &lt;a href="http://www.zurb.com/playground/foundation-icons"&gt;Foundation Icons Fonts&lt;/a&gt;，将 js 库全部托管在 &lt;a href="https://developers.google.com/speed/libraries/"&gt;Google Hosted Libaries&lt;/a&gt;
和 &lt;a href="http://cdnjs.com"&gt;cdnjs&lt;/a&gt; 上。&lt;/p&gt;
&lt;p&gt;这篇文章我看着都觉得水。&lt;/p&gt;</summary><category term="kuku"></category><category term="web.py"></category><category term="OpenSource"></category><category term="coffee-time-project"></category><category term="Foundation"></category></entry><entry><title>PyCon 2012 见闻</title><link href="/2012/10/pycon-2012/" rel="alternate"></link><updated>2012-10-21T21:15:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-10-21:2012/10/pycon-2012/</id><summary type="html">&lt;p&gt;PyCon 是 Python 领域最著名的技术会议，从 2011 年开始，中国区开始举办自己的
PyCon 大会。这次 PyCon 2012 分成两个场地同时进行，北京和上海，
并且在网上提供同步转播，各地也有组织线下收看的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyCon Logo" src="http://upload-log4d.qiniudn.com/2012/10/PyConChina2012.png" /&gt;&lt;/p&gt;
&lt;p&gt;去年时候我很遗憾的不能跑到上海来参加，现在我人就在上海，
怎能错过 Pythoner 的饕餮大餐呢？早就眼巴巴的买票准备参加了。&lt;/p&gt;


&lt;p&gt;上海这边的主题如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Python 产品构建与发布指南》- 沈崴&lt;/li&gt;
&lt;li&gt;《实战游戏客户端》 - 林伟&lt;/li&gt;
&lt;li&gt;《让程序运行更快》- 李小红&lt;/li&gt;
&lt;li&gt;《演进或革命 - 选型和架构的实践经验谈》 - 潘俊勇&lt;/li&gt;
&lt;li&gt;《网游开发中的 Python 组件》- 赖勇浩&lt;/li&gt;
&lt;li&gt;《自动化即时战斗游戏解决方案》 - 王健&lt;/li&gt;
&lt;li&gt;《人人可以化半小时开发一个全功能OpenERP模块》 - Tony Gu&lt;/li&gt;
&lt;li&gt;《元编程在redis orm中的应用》 - 许智翔&lt;/li&gt;
&lt;li&gt;《OpenERP即将推出的第7版的功能和新的编程框架介绍》- Eric Caudal&lt;/li&gt;
&lt;li&gt;《Python如何帮助「逆转三国」获得成功》- 车蕙怡&lt;/li&gt;
&lt;li&gt;《Pyramid Web Framework for Advanced Web Applications》- 黄峥峼 （Mark Huang）&lt;/li&gt;
&lt;li&gt;《用Tornado开发RESTful API应用》- 飞龙非龙&lt;/li&gt;
&lt;li&gt;《NOSQL和MySQL在django上的混合使用》- 黄昶&lt;/li&gt;
&lt;li&gt;《网页游戏的跨界开发》 - 董诣&lt;/li&gt;
&lt;li&gt;《阿里云之移动开发者上云》 - 刘飞&lt;/li&gt;
&lt;li&gt;《使用 Python 和 Django 建设维护学校门户》- 于夏桥 &lt;/li&gt;
&lt;li&gt;《python在linux运维中的应用》 - 吴晗&lt;/li&gt;
&lt;li&gt;《用Python替换C代码——A Python Successful Story》- Adieu（刁立知）&lt;/li&gt;
&lt;li&gt;《 Python in Gentoo Linux》- Patrick Lauer&lt;/li&gt;
&lt;li&gt;《基于nova的自动扩展和负载均衡》- 刘明华&lt;/li&gt;
&lt;li&gt;《用myTestCase模块来做python的UT》- 陈钢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我最喜欢的是 &lt;a href="http://shell909090.com/blog/"&gt;许智翔（shell）&lt;/a&gt; / 沈崴 / 林伟 / 黄峥峼 / 李小红 / 赖勇浩
的 Topic。其中尤其是沈崴关于输入处理的准则，解开我一个很久的疑惑。
沈崴这个 &lt;a href="http://www.slideshare.net/wilhelmshen/py-art"&gt;Python 编程艺术&lt;/a&gt; 是赖勇浩提到的幻灯片，强烈推荐观看。&lt;/p&gt;
&lt;p&gt;shell 的博客我一直在关注，也列入了我的 GR 「tag-必读」中，
这次听了他关于「元编程」的黑魔法，我也很有收获，而且他是个很有趣的人，
把 Topic 讲的很生动。&lt;/p&gt;
&lt;p&gt;我用 Pylons 一年多，所以对 Pyramid 有一种天然好感，可惜一直可机会去学习，
黄峥峼的 Topic 讲了很多关于 Pyramid 的东西，也很值得一看，
潘俊勇对 Pyramid 的来源补充也非常详细，果然是高手啊。&lt;/p&gt;
&lt;p&gt;本来还想听王捷讲一讲 &lt;a href="http://www.shanbay.com/"&gt;扇贝网&lt;/a&gt; 的 Django，可惜他居然去北京做 Topic，
我勒个去，要知道扇贝网可是在南京。王捷也是 NJLUG 成员，
下月他们还将提供 NJLUG 会场，一直没有机会见到，蛮可惜的。
而且他们也是用的 Django，现在遇到一些性能瓶颈，
讲座内容应该有很多值得学习，只能一会去看视频了。&lt;/p&gt;
&lt;p&gt;比较广告的就是「逆转三国」和「阿里云」的 Topic 啦，赞助商嘛，大家懂的。&lt;/p&gt;
&lt;p&gt;上一些拍的照片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="主持人开场" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-09.16.05.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;主持人开场，这位主持应该是 Intridea 的 Ruby 程序员，哈哈。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shell 在讲黑魔法" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-14.06.18.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;shell 在讲黑魔法&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 1 的圆桌" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-16.54.39.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Day 1 的圆桌&lt;/p&gt;
&lt;p&gt;&lt;img alt="赖勇浩和沈葳" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-21-09.58.48.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;赖勇浩和沈葳&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2 的圆桌" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-21-17.48.42.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Day 2 的圆桌&lt;/p&gt;
&lt;p&gt;虽然 Python CN 邮件列表中有人反应今年不如去年质量高，我没有看过去年的 PyCon，
但是觉得今年的还是很不错，学到了很多东西，也见到了很多牛人真身。
一会准备把去年的 &lt;a href="2011"&gt;PyCon 2011&lt;/a&gt; 也学习一下。&lt;/p&gt;</summary><category term="PyCon"></category></entry><entry><title>Working with Python subprocess[译文]</title><link href="/2012/10/working-with-python-subprocess/" rel="alternate"></link><updated>2012-10-16T00:42:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-10-16:2012/10/working-with-python-subprocess/</id><summary type="html">&lt;p&gt;8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。&lt;/p&gt;
&lt;p&gt;这篇文章是在写 &lt;a href="http://kenai.com/projects/btrace/pages/Home"&gt;Btrace&lt;/a&gt; 脚本时候查资料看到的，
看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。
熬了一个月才磨出来，媳妇都快成婆了有木有。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href="http://jimmyg.org/blog/2009/working-with-python-subprocess.html"&gt;Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于「执行命令时候发生了什么」这个问题，可以在
&lt;a href="http://en.wikipedia.org/wiki/Redirection_(computing)"&gt;http://en.wikipedia.org/wiki/Redirection_(computing)&lt;/a&gt;
找到更多最新信息。这篇文章遵循 &lt;a href="http://www.gnu.org/copyleft/fdl.html"&gt;GFDL&lt;/a&gt; 协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我的上一篇日志中，我写到如何
&lt;a href="http://jimmyg.org/blog/2009/python-command-line-interface-%28cli%29-with-sub-commands.html"&gt;build a command line interface with sub-commands in Python&lt;/a&gt;。
这次我来尝试如何通过 Python 的 &lt;code&gt;subprocess&lt;/code&gt; 模块来和命令行指令进行交互。&lt;/p&gt;
&lt;p&gt;我想达到的目标是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当你键入命令时究竟发生了什么&lt;/li&gt;
&lt;li&gt;如何确认一个命令是否存在并找出到底在哪&lt;/li&gt;
&lt;li&gt;通过 Python 或 shell 执行命令&lt;/li&gt;
&lt;li&gt;向一个运行中的进程读取 STDOUT 或写入 STDIN&lt;/li&gt;
&lt;li&gt;检查进程的退出返回状态&lt;/li&gt;
&lt;li&gt;理解 Bash 在命令中断中扮演的角色，并如何将它们发送给程序&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;执行程序时发生了什么&lt;/h2&gt;
&lt;p&gt;当你双击桌面上的终端程序图标时，就会打开一个载入 &lt;code&gt;shell&lt;/code&gt; 的程序。
你键入的命令不会直接在内核执行，而是先和 shell 进行交互。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;Command&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
&lt;span class="n"&gt;Terminal&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;gnome&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
     &lt;span class="n"&gt;Shell&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="n"&gt;Bash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
     &lt;span class="n"&gt;Kernel&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Linux&lt;/span&gt; &lt;span class="mf"&gt;2.6.24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多关于 shell 的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Unix_shell"&gt;http://en.wikipedia.org/wiki/Unix_shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于进程如何运行的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html"&gt;http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你通过 Python 执行程序时候，你可以选择直接从内核执行或者通过 shell。
如果你选择直接执行，你就没办法和 bash 同样方式执行命令。&lt;/p&gt;
&lt;p&gt;我们先看看怎么使用 shell 和那些好玩的特性功能，
然后再通过 &lt;code&gt;subprocess&lt;/code&gt; 来实现同样的功能，&lt;/p&gt;
&lt;h3&gt;数据流&lt;/h3&gt;
&lt;p&gt;在 UNIX 和 Linux 下，有三个被称作 &lt;em&gt;流&lt;/em&gt; 的 I/O 通道，它们通过文本终端
（比如用 gnome-terminal 运行 Bash）和其他应用程序（比如通过 Python 的
&lt;code&gt;subprocess&lt;/code&gt; ）这类环境来连接程序。
这几个 I/O 通道分别称为 &lt;em&gt;标准输入&lt;/em&gt;， &lt;em&gt;标准输出&lt;/em&gt;，和 &lt;em&gt;标准错误输出&lt;/em&gt; ,
它们的 &lt;em&gt;文件描述符&lt;/em&gt; 分别为 0，1，2。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; 句柄 &lt;/th&gt; &lt;th&gt; 名称 &lt;/th&gt; &lt;th&gt; 描述 &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; 0 &lt;/td&gt; &lt;td&gt; stdin &lt;/td&gt; &lt;td&gt; 标准输入 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; 1 &lt;/td&gt; &lt;td&gt; stdout &lt;/td&gt; &lt;td&gt; 标准输出 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; 2 &lt;/td&gt; &lt;td&gt; stderr &lt;/td&gt; &lt;td&gt; 标准错误输出 &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里你能看到标准输入叫做 &lt;code&gt;stdin&lt;/code&gt;，标准输出称作 &lt;code&gt;stdout&lt;/code&gt;，标准错误输出叫做
&lt;code&gt;stderr&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;流是这样工作的：从终端输出获取输入并通过标准输入发送到程序，
程序返回的正常输出从标准输出输出，错误则返回到环境上下文的标准错误输出。
维基百科有幅图将描述这个过程：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/File:Stdstreams-notitle.svg"&gt;&lt;img alt="Stdstreams-notitle.svg" src="http://upload-log4d.qiniudn.com/2012/09/Stdstreams-notitle.svg.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想将流从一个程序重定向到另一个地方，请看下文分解。&lt;/p&gt;
&lt;h2&gt;使用 Shell&lt;/h2&gt;
&lt;h3&gt;重定向标准输入和输出到文件&lt;/h3&gt;
&lt;p&gt;你可以在 Bash 中使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 操作符将一个程序的标准输出重定向到一个文件
（在其他 Shell 也许略有语法差异）。这里有个范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;program1&lt;/code&gt; 执行后的输出结果从标准输出流写入 &lt;code&gt;file1&lt;/code&gt;，并将 &lt;code&gt;file1&lt;/code&gt;
其中现有的内容所替换。如果你只是想追加内容，你可以使用 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 操作符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt;&amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 操作符可以被用来从文件中读取数据并传输到程序的标准输入流：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;lt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，&lt;code&gt;program1&lt;/code&gt; 会被执行，但是此时 &lt;code&gt;file1&lt;/code&gt; 取代了键盘，
成为了标准输入的数据源。&lt;/p&gt;
&lt;p&gt;你可以组合 shell 操作符以完成更复杂的操作。
下面这个范例中，&lt;code&gt;program1&lt;/code&gt; 从 &lt;code&gt;file1&lt;/code&gt; 获取数据并发送到标准输入。标准输出则从
&lt;code&gt;program1&lt;/code&gt; 输出到 &lt;code&gt;file2&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;lt; file1 &amp;gt; file2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也许有时候你需要从一个程序获取输出并将其作为另一个程序的输入。
你可以通过一个临时文件来实现这个操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt; tempfile1
program2 &amp;lt; tempfile1
rm tempfile1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法有点累赘，因此 shell 提供了方便的机制，称为 &lt;em&gt;管道&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;管道&lt;/h3&gt;
&lt;p&gt;管道允许一个程序的标准输出直接输入到另一个程序的标准输入流中，
而无须创建临时文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 | program2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;操作符 &lt;code&gt;|&lt;/code&gt; 被称作 &lt;em&gt;管道&lt;/em&gt; 符号，因此这种操作就被称为 &lt;em&gt;管道&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;这里有一幅来自维基百科的图片来描述管道：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/File:Pipeline.svg"&gt;&lt;img alt="Pipeline.svg" src="http://upload-log4d.qiniudn.com/2012/09/Pipeline.svg.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有个使用 &lt;code&gt;find .&lt;/code&gt;（遍历当前目录下的文件和目录）的例子，将输出定向到 &lt;code&gt;grep&lt;/code&gt;
程序来查找特定文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . | grep &lt;span class="s2"&gt;&amp;quot;The file I&amp;#39;m after.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个程序产生的数据是一行一行地导向第二个程序的，所以在第一个程序运行结束之前，
第二个程序就可以开始使用它们。&lt;/p&gt;
&lt;h3&gt;从文件重定向标准输入和输出&lt;/h3&gt;
&lt;p&gt;在重定向标准输出的同时，你也可以重定向其他流，
比如重定向标准错误输出到标准输出。我们已经讨论过在 Bash 中，
可以在文件描述符之前使用 &lt;code&gt;&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 操作符来重定向数据流
（还记得之前讨论的数字 0，1，2 么）。如果把标准输出代表的数字 1 省略掉看，
会发现我们一直在使用标准输出。&lt;/p&gt;
&lt;p&gt;下面这条命令执行 &lt;code&gt;program1&lt;/code&gt; 并将所有标准 &lt;em&gt;错误&lt;/em&gt; 数据输出到 &lt;code&gt;file1&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 2&amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行 &lt;code&gt;program1&lt;/code&gt;，错误信息就被重定向到 &lt;code&gt;file&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;这里有个范例程序让你来测试，将它保存成 &lt;code&gt;redirect1.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Echo to stdout: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Echo to stderr: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;KeyboardError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个程序始终将接受到的输入数据并同时输出到 stdout 和 stderr 。&lt;/p&gt;
&lt;p&gt;在 csh 衍生出来的 shell 中，语法则是在重定向符号之后加上 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号，
可以达到同样的效果。（译者注：即 &lt;code&gt;|&amp;amp;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;另一个常用的特性是将一个输出流重定向到定一个。
最常见的用法是将标准错误输出重定向到标准输出，
这样就可以把错误信息和正确信息合并在一起，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find / -name .profile &amp;gt; results 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令将会找出所有名叫 &lt;code&gt;.profile&lt;/code&gt; 的文件。
如果没有重定向，它将输出命中信息到 stdout，错误信息到 stderr
（比如有些目录无权限访问）。如果标准输出定向到文件，错误信息则会显示在命令行上。
为了在结果文件中可以同时看到命中信息和错误信息，我们需要使用 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;
将标准错误输出（2）输出到标准输出（1）。（这次即使在 Bash 中也需要 &lt;code&gt;&amp;amp;&lt;/code&gt; 符。）&lt;/p&gt;
&lt;p&gt;虽然语法上可以将 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 放到 &lt;code&gt;&amp;gt;&lt;/code&gt; 前面，但这样不能正常工作。
事实上，当解析器读取 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 时候，它还不知道标准输出将重定向到哪里，
所以标准错误输出就不会被合并。&lt;/p&gt;
&lt;p&gt;如果使用管道合并输出流，那么合并符号 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 需要在管道符号 &lt;code&gt;|&lt;/code&gt; 之前。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find / -name .profile 2&amp;gt;&amp;amp;1 | less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bash 中的合并输出简写形式是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;gt; file 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;amp;&amp;gt;file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;gt;&amp;amp;file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是最好别用简写形式，否则你会弄糊涂。我提倡宁愿麻烦但是要清晰。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; 操作符同时重定向标准输出和标准错误输出。
它的作用和在 Bourne Shell 中的 &lt;code&gt;command &amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code&gt; 一样。&lt;/p&gt;
&lt;h3&gt;管道链&lt;/h3&gt;
&lt;p&gt;重定向可以和管道连接起来组成复杂的命令，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ls | grep &lt;span class="s1"&gt;&amp;#39;\.sh&amp;#39;&lt;/span&gt; | sort &amp;gt; shlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列出当前目录下所有文件，然后过滤剩下仅包含 .sh 的内容，根据文字编码排序，
然后将最终结果输出到 shlist。这种类型的命令经常在 shell 脚本和批处理文件中使用。&lt;/p&gt;
&lt;h3&gt;多重输出重定向&lt;/h3&gt;
&lt;p&gt;标准命令 &lt;code&gt;tee&lt;/code&gt; 可以重定向一个命令到多个地方。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ls -lrt | tee xyz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将文件列表同时输出到标准输出和文件 &lt;code&gt;xyz&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3&gt;Here 文档&lt;/h3&gt;
&lt;p&gt;大部分 Shell，包括 Bash 都支持 &lt;em&gt;Here 文档&lt;/em&gt;，它允许你使用 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 
操作符和一些文本作为分隔符将文本块嵌入到命令之中。&lt;/p&gt;
&lt;p&gt;在下面的范例中，文本块被传送给 &lt;code&gt;tr&lt;/code&gt; 命令，同时使用 &lt;code&gt;END_TEXT&lt;/code&gt; 作为 Here
文档分隔符来指明文本的开始和结束。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tr a-z A-Z &lt;span class="s"&gt;&amp;lt;&amp;lt;END_TEXT&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; one two three&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; uno dos tres&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; END_TEXT&lt;/span&gt;
ONE TWO THREE
UNO DOS TRES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过 &lt;code&gt;tr&lt;/code&gt; 处理后，输出的结果是 &lt;code&gt;ONE TWO THREE&lt;/code&gt; 和 &lt;code&gt;UNO DOS TRES&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一种常用用法是用 Here 文档向文件添加文本。
默认情况下，文本中的变量是会被替换成真实值的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; Working dir $PWD&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
Working dir /home/user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过在 Here 文档标签引上单引号或者双引号，就可以避免这种转义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat &amp;lt;&amp;lt; &lt;span class="s2"&gt;&amp;quot;EOF&amp;quot;&lt;/span&gt;
&amp;gt; Working dir &lt;span class="nv"&gt;$PWD&lt;/span&gt;
&amp;gt; EOF
Working dir &lt;span class="nv"&gt;$PWD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;介绍 &lt;code&gt;subprocess&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;刚才我们讨论过了一些命令行提供的功能，现在让我们体验一下 &lt;code&gt;subprocess&lt;/code&gt; 模块。
你可以在命令行中运行下面这条简单的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们试着在 Python 中运行它。&lt;/p&gt;
&lt;p&gt;以前我们需要使用一堆各异的标准库来实现进程管理。
从 Python 2.4 开始，所有功能都被精心地整理到 &lt;code&gt;subprocess&lt;/code&gt; 这个模块，
其中的 &lt;code&gt;Popen&lt;/code&gt; 类可以提供所有我们需要的。&lt;/p&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你对新的 &lt;code&gt;Popen&lt;/code&gt; 如何替换旧模块，&lt;a href="http://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module"&gt;subprocess-doc&lt;/a&gt;[subprocess-documentation]
有一个章节解释过去是如何作用以及当前是如何作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Popen&lt;/code&gt; 可以接受一下参数，详情可以在 &lt;a href="http://docs.python.org/library/subprocess.html#using-the-subprocess-module"&gt;using-the-subprocess-module&lt;/a&gt;[http://docs.python.org/library/subprocess.html#using-the-subprocess-module]：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;args, &lt;span class="nv"&gt;bufsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0, &lt;span class="nv"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None,
    &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;preexec_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,
    &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False, &lt;span class="nv"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,
    &lt;span class="nv"&gt;startupinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;creationflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 Shell&lt;/h2&gt;
&lt;p&gt;让我们以 Hello World! 这个例子开始。和之前类似，通过
Python shell 执行下列命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import subprocess
&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，标准输出和同样打印出 &lt;code&gt;Hello world!&lt;/code&gt; ，
区别在于命令行显示了一个我们创建的 &lt;code&gt;subprocess.Popen&lt;/code&gt; 实例。&lt;/p&gt;
&lt;p&gt;如果你将代码保存为 &lt;code&gt;process_test.py&lt;/code&gt; ，然后在命令行执行，你会得到一样的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python process_test.py
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去运行 OK。&lt;/p&gt;
&lt;p&gt;你可能在琢磨我们到底使用了哪个 shell。Unix 的默认 shell 是 &lt;code&gt;/bin/sh&lt;/code&gt; ，
而 Windows 下面则取决于 &lt;code&gt;COMSPEC&lt;/code&gt; 这个环境变量。
如果你设置 &lt;code&gt;shell=True&lt;/code&gt; ，则可以通过 &lt;code&gt;executable&lt;/code&gt; 参数来自定义 shell。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True, &lt;span class="nv"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和我们之前看到的一样，但是如果你使用特定的 shell ，
你也许会发现不同的地方。&lt;/p&gt;
&lt;p&gt;让我们探索一下通过 Python 使用 shell 的其他特性：&lt;/p&gt;
&lt;p&gt;变量解析：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo $PWD&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
/home/james/Desktop
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;管道和重定向：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot; | tr a-z A-Z 2&amp;gt; errors.txt&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; HELLO WORLD!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;errors.txt&lt;/code&gt; 应该是空的，因为没有任何错误产生。
有趣的是在我电脑上，&lt;code&gt;Popen&lt;/code&gt; 实例在 &lt;code&gt;HELLO WORLD!&lt;/code&gt; 被打印到标准输出
&lt;em&gt;之前&lt;/em&gt; 出现。
恩，管道和重定向都可以正常工作。&lt;/p&gt;
&lt;p&gt;Here 文档：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;... cat &amp;lt;&amp;lt; EOF &amp;gt; new.txt&lt;/span&gt;
&lt;span class="s2"&gt;... Hello World!&lt;/span&gt;
&lt;span class="s2"&gt;... EOF&lt;/span&gt;
&lt;span class="s2"&gt;... &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;subprocess.Popen object at 0xb7dbbe2c&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;new.txt&lt;/code&gt; 文件正常生成，并且包含内容 &lt;code&gt;Hello World!&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如我们预料，在 shell 中正常运行的命令同样可以在 Python shell 中运行。&lt;/p&gt;
&lt;h2&gt;字符串和参数列表&lt;/h2&gt;
&lt;p&gt;现在可以轻松地在 Python 中执行命令行了，你也许会需要传递变量过去。
假设我们要用 &lt;code&gt;echo&lt;/code&gt; 重写刚才那个函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也许想当然这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种写法，当字符串是 &lt;code&gt;Hello World!&lt;/code&gt; 时候没问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但这样就有问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasty &amp;quot; example&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
/bin/sh: Syntax error: Unterminated quoted string
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个命令会被执行成 &lt;code&gt;echo "nasty" example"&lt;/code&gt; ，唔，这里的转义有问题。&lt;/p&gt;
&lt;p&gt;一种解决方式是在代码里面做好转义，但这样会很麻烦，
你需要处理所有可能出现的转义字符和空格等等。&lt;/p&gt;
&lt;p&gt;Python 可以帮你处理好，条件是你不能直接操作 shell，
如何操作看下文。&lt;/p&gt;
&lt;h2&gt;Shell 之外&lt;/h2&gt;
&lt;p&gt;现在让我们试试不操作 shell 来实现同样的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def print_string&lt;span class="o"&gt;(&lt;/span&gt;string&lt;span class="o"&gt;)&lt;/span&gt;:
    subprocess.Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;, string&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasty &amp;quot; example&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
nasty &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; example
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你可以看到它正常地处理了转义。&lt;/p&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上你也可以在 &lt;code&gt;shell=False&lt;/code&gt; 那里直接使用一个单独的字符串作为参数，
但是它必须是命令程序本身，这种做法和在一个列表中定义一个 &lt;code&gt;args&lt;/code&gt;
没什么区别。而如果当 &lt;code&gt;shell=False&lt;/code&gt; 时候直接执行字符串命令，则会报错：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;594&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="n"&gt;errread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errwrite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1147&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_child&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;child_exception&lt;/span&gt;
&lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们还是坚持使用一个字符串，Python 会认为这个 &lt;em&gt;完整的字符串&lt;/em&gt;
是一个可执行的程序名，而实际上没有一个叫做 &lt;code&gt;echo "Hello world!"&lt;/code&gt;
的程序，所以报错了。正确的做法要用 list 分开传送参数。&lt;/p&gt;
&lt;h3&gt;检查 PATH 中的程序&lt;/h3&gt;
&lt;p&gt;这里有个方法可以找出程序真正的位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;whereis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
           &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们用它来找出 &lt;code&gt;echo&lt;/code&gt; 程序在哪里：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whereis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法同样可以检查用户的 &lt;code&gt;PATH&lt;/code&gt; 里面是否有 Python 需要的程序。&lt;/p&gt;
&lt;p&gt;当然你也可以使用命令行中的程序 &lt;code&gt;whereis&lt;/code&gt; 来找出程序的路径。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;whereis &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;: /bin/echo /usr/share/man/man1/echo.1.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论我们使用 &lt;code&gt;shell&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; 或者 &lt;code&gt;False&lt;/code&gt; ，
我们都没有指定执行程序的全路径。
如果这个程序在上下文环境的 &lt;code&gt;PATH&lt;/code&gt; 变量中，我们才可以执行。
当然如果你愿意，指定全路径也没问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你也可以坚持指定 &lt;code&gt;executable&lt;/code&gt; 为想要执行的程序，
然后 &lt;code&gt;args&lt;/code&gt; 就不设定程序。虽然没看到明确的文档，不过我电脑上面可以这么执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xb776f56c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不直接使用 shell 会导致不能直观地使用重定向、管道、here 文档、shell
参数或其他那些可以在命令行使用的技巧。接下来我们会看看怎么使用这些功能。&lt;/p&gt;
&lt;h2&gt;从标准输出和错误重定向&lt;/h2&gt;
&lt;p&gt;当你使用 &lt;code&gt;Popen&lt;/code&gt; 执行程序时候，输出内容通常被发送到 stdout，
这也是为什么你能看到这些内容。&lt;/p&gt;
&lt;p&gt;当你想尝试从某个程序读取标准输出信息时候，则需要在调用 &lt;code&gt;Popen&lt;/code&gt; 之前设定
&lt;code&gt;stdout&lt;/code&gt; 参数。要设定的值是 &lt;code&gt;subprocess.PIPE&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subprocess.PIPE&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以为 &lt;code&gt;Popen&lt;/code&gt; 指定标准输入、标准输出和标准错误输出的参数，
需要注意的是标准输出流需要打开可写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有个范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To read the output from the pipe you use the &lt;code&gt;communicate()&lt;/code&gt; method:&lt;/p&gt;
&lt;p&gt;为了从管道获取输出，你可以使用 &lt;code&gt;communicate()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;communicate()&lt;/code&gt; 的返回值是一个 tuple，第一个值是标准输出的数据，
第二个输出是标准错误输出的内容。&lt;/p&gt;
&lt;p&gt;这里有段脚本能让我们测试标准输出和标准错误输出的表现行为，
将它存为 &lt;code&gt;test1.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stderr&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意标准错误输出在被生成后就打印了，而标准输出则被管道传输了。
这是因为我们只设定了标准输出的管道，让我们同时也设定标准错误输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Message to stderr&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次标准输出和标准错误输出都被 Python 获取到了。&lt;/p&gt;
&lt;p&gt;现在所有的消息能被打印出来了，如果我们再次调用 &lt;code&gt;communicate()&lt;/code&gt;，
则会得到一个错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;communicate&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_communicate&lt;/span&gt;
    &lt;span class="n"&gt;rlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;write_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;communicate()&lt;/code&gt; 方法读取标准输出和标准错误输出时候，遇到结束符（EOF）
就会结束。&lt;/p&gt;
&lt;h3&gt;重定向 stderr 到 stdout&lt;/h3&gt;
&lt;p&gt;如果你想将错误信息重定向到标准输出，只需要给 &lt;code&gt;stderr&lt;/code&gt; 
参数指定一个特殊值： &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2&gt;写入标准输入&lt;/h2&gt;
&lt;p&gt;写数据入一个进程和之前所述比较类似。为了要写入数据，需要先打开一个管道到标准输入。
通过设定 &lt;code&gt;Popen&lt;/code&gt; 参数 &lt;code&gt;stdin=subproces.PIPE&lt;/code&gt; 可以实现。&lt;/p&gt;
&lt;p&gt;为了测试，让我们另外写一个仅输出 &lt;code&gt;Received:&lt;/code&gt; 和输入数据的程序。
它在退出之前会输出消息。调用这个 &lt;code&gt;test2.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Received: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了发送消息到标准输入，把你想发送的信息作为 &lt;code&gt;communicate()&lt;/code&gt; 的参数 &lt;code&gt;input&lt;/code&gt; 。让我们跑起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test2.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;How are you?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意 &lt;code&gt;test2.py&lt;/code&gt; 发送的信息被打印到标准输出，随后的是 &lt;code&gt;(None, None)&lt;/code&gt; ，
这是因为标准输出和标准错误输出没有设定输出管道。&lt;/p&gt;
&lt;p&gt;你可以和之前那样指定 &lt;code&gt;stdout=subprocess.PIPE&lt;/code&gt;
和 &lt;code&gt;stderr=subprocess.PIPE&lt;/code&gt; 来设定输出管道。&lt;/p&gt;
&lt;h3&gt;类文件属性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Popen&lt;/code&gt; 拥有 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 属性，从而可以当作文件一样写出数据，同时 &lt;code&gt;stdin&lt;/code&gt; 属性可以像文件一样读取数据。
你可以使用他们来替换 &lt;code&gt;communicate()&lt;/code&gt;。下面我们将看如何用它们。&lt;/p&gt;
&lt;h3&gt;读写同一个进程&lt;/h3&gt;
&lt;p&gt;这里有个例子，将它保存为 &lt;code&gt;test3.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Received: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个程序也是简单的响应接受到的数据，让我们把它跑起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test3.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每隔一秒钟会输出一行。&lt;/p&gt;
&lt;p&gt;现在你应该掌握了所有需要通过 Python 来跟 Shell 交互需要的知识。&lt;/p&gt;
&lt;h2&gt;获取返回值， &lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;当一个程序退出时候，他会返回一个正整数来表明它的退出状态。
0 代表「成功地结束」，非零则表示「非正常结束」。
大部分系统要求返回值在 0-127 之间，其他都是未定义的结果。
一些系统会有事先定义好的错误对应关系，但一般不被拿出来用。
Unix 程序通常使用 2 作为命令语法错误，1 作为其他错误。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;code&gt;Popen&lt;/code&gt; 的 &lt;code&gt;.returncode&lt;/code&gt; 属性获取程序返回值。这儿有个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;
&lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个 &lt;code&gt;returncode&lt;/code&gt; 并不是一开始就设定好的，最初是默认值 &lt;code&gt;None&lt;/code&gt;，
它会一直是 &lt;code&gt;None&lt;/code&gt; 知道你调用 &lt;code&gt;subprocess&lt;/code&gt; 的方法比如 &lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt;。
这些方法会设定 &lt;code&gt;returncode&lt;/code&gt;。因此，如果你想知道返回值，那就调用 &lt;code&gt;poll()&lt;/code&gt;
和 &lt;code&gt;wait()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt; 方法区别很小：&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Popen.poll()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;检查子进程是否结束。并设置和返回 &lt;code&gt;.returncode&lt;/code&gt; 属性。&lt;/dt&gt;
&lt;dt&gt;&lt;code&gt;Popen.wait()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;等待子进程结束。并设置和返回 &lt;code&gt;.returncode&lt;/code&gt; 属性。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;便捷的方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;subprocess&lt;/code&gt; 模块还提供了很多方便的方法来使得执行 shell 命令更方便。
我没有全部试试。（译者：意思是让读者自己挖掘？）&lt;/p&gt;
&lt;h2&gt;理解 &lt;code&gt;sys.argv&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;如果你想写一个 Python 脚本来接受命令行参数，
那么命令行的参数会被传送并成参数 &lt;code&gt;sys.argv&lt;/code&gt;。
这里有个小范例，将它保存成 &lt;code&gt;command.py&lt;/code&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Executable: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Arg: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 这行确保代码在被执行是才运行，
而不是被引入时候运行。给这个文件执行权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod 755 command.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里是一些运行时的范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py
Executable: command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py arg1
Executable: command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py arg1 arg2
Executable: command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意无论 Python 脚本怎么执行， &lt;code&gt;sys.argv[0]&lt;/code&gt; 始终是脚本的名称。
&lt;code&gt;sys.argv[1]&lt;/code&gt; 和之后的参数是命令行接受的参数。
你可以通过使用参数 &lt;code&gt;-m&lt;/code&gt; 来强制 Python 脚本作为模块导入使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command&lt;/span&gt;
Executable: /home/james/Desktop/command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command &lt;/span&gt;arg1
Executable: /home/james/Desktop/command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command &lt;/span&gt;arg1 arg2
Executable: /home/james/Desktop/command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，Python 将 &lt;code&gt;-m&lt;/code&gt; 作为命令的一部分，因此 `sys.srgv[0] 包含了脚本的全路径。
现在我们来直接执行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py
Executable: ./command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py arg1
Executable: ./command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py arg1 arg2
Executable: ./command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看吧，&lt;code&gt;sys.argv[0]&lt;/code&gt; 包含 Python 脚本的名称， &lt;code&gt;sys.argv[1]&lt;/code&gt;
以及他的兄弟们还是老样子，包含各类参数。&lt;/p&gt;
&lt;h3&gt;展开 Shell&lt;/h3&gt;
&lt;p&gt;有时候，我们会在 shell 中使用通配符来设定一组参数，比如，
我们在 Bash 中运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能觉得输出应该是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Executable: ./command.py
Arg: *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这不是你想要的结果。输出结果应该依赖当前文件夹中 &lt;code&gt;.txt&lt;/code&gt; 文件的数目。执行效果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Executable: ./command.py
Arg: errors.txt
Arg: new.txt
Arg: output.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bash 会将 &lt;code&gt;\*.txt&lt;/code&gt; 自动展开成所有符合 &lt;code&gt;.txt&lt;/code&gt; 的参数。所以接受到的参数会超过你预期。&lt;/p&gt;
&lt;p&gt;你可以通过将参数用引号抱起来来关闭 Shell 解释特性，
但是只要你用过，就会意识到在大多数情况下面这是非常有用的功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py &lt;span class="s2"&gt;&amp;quot;*.txt&amp;quot;&lt;/span&gt;
Executable: ./command.py
Arg: *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多关于 Bash 解释信息，可以看 &lt;a href="http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion"&gt;http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;拓展阅读&lt;/h2&gt;
&lt;p&gt;可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.doughellmann.com/PyMOTW/subprocess/"&gt;http://www.doughellmann.com/PyMOTW/subprocess/&lt;/a&gt; (and its O'Reilly copy here)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/library/subprocess.html"&gt;http://docs.python.org/library/subprocess.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webpython.codepoint.net/cgi_shell_command"&gt;http://webpython.codepoint.net/cgi_shell_command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829"&gt;http://www.artima.com/weblogs/viewpost.jsp?thread=4829&lt;/a&gt; (About writing main() functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来相关的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程间信号通信&lt;/li&gt;
&lt;li&gt;后台执行程序&lt;/li&gt;
&lt;/ul&gt;</summary><category term="subprocess"></category><category term="bash"></category><category term="shell"></category><category term="译文"></category></entry><entry><title>面试小记</title><link href="/2012/08/interview/" rel="alternate"></link><updated>2012-08-16T05:46:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-08-16:2012/08/interview/</id><summary type="html">&lt;p&gt;最近在上海找工作面试，这两天就要出结果了。早晨5点多就醒过来，睡不着觉，
那就写篇这段时间面试感觉的小记。&lt;/p&gt;
&lt;h2&gt;选择&lt;/h2&gt;
&lt;p&gt;我在台风「海葵」登录上海那天离开南京，已经约好了几个面试，
这几个团队都是我慎重筛选的。招聘消息来源于各大社区：
&lt;a href="http://python.cn/"&gt;Python-CN 邮件列表&lt;/a&gt; / &lt;a href="http://www.v2ex.com/"&gt;V2EX&lt;/a&gt; /
&lt;a href="http://ruby-china.org/"&gt;Ruby-China&lt;/a&gt; / &lt;a href="http://www.douban.com/group/"&gt;豆瓣小组&lt;/a&gt;。
来源于社区的招聘信息会更靠谱，在社区投递的很有可能是直接主管，而不是人事 HR。
仅仅在 51job 上投放招聘，而不参到社区来的公司，很可能氛围不是那么有活力。&lt;/p&gt;


&lt;p&gt;我尽量避免被分散注意力，只选择自己认可的公司，几乎是清一色创业团队。
个人的精力是有限的，找到最适合自己的是我的核心原则。使用所有手段：「Google /
社区 / 业内人士咨询 / 微博 / 新闻报道」的方法，
来了解自己想去团队的产品和文化。来对比公司理念和自己理念的异同，
自己是否认可一些团队文化，还有创始人和主管的性格和技术取向是否和自己偏差很大。
有些人会觉得这有偷巧之嫌，但在我看来，这是对双方负责的表现。
贸贸然的选择，会浪费双方的时间和精力。&lt;/p&gt;
&lt;p&gt;一个技巧是，可以把自己觉得拿 Offer 可能性大的公司安排在面试前面，
到时候如果拿一个现场 Offer，对自己的信心是一种极大的鼓励。&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;面试需要详细的准备，但同时，最长的准备阶段其实是上一份乃至上上份工作历程。
这个不是通过短短几天能够伪造的。优秀的面试官能通过三言两语来轻松判断出面试者
平时的工作状态。简历上的文字，仅仅是让面试官找一些发问的方向，
最大的简历我们一直在书写，也就是面试者本身。&lt;/p&gt;
&lt;p&gt;在日常工作生活中，对周围的事物保持思考的习惯，热忱并负责对待工作职责，
不被当下环境僵化，保持学习和创新的能力，这些才是「简历」中需要准备的东西。&lt;/p&gt;
&lt;p&gt;我喜欢和面试官家常式的聊天，可以放松自己，将自己状态更原生的表现出来。
我不喜欢笔试和智力测试，它们作用是减少面试成本，但也增加了交流的距离。&lt;/p&gt;
&lt;h2&gt;天花板&lt;/h2&gt;
&lt;p&gt;在面试过程中，可能被一些问题问得手足无措，甚至浑身冒冷汗。这其实是好事，
说明自己在面试官的帮助下撞到天花板了。面试官有责任将面试者的能力上限测试出来，
如果没测出来，会无法安排合适的岗位，甚至导致在以后工作中无法发挥面试者的全部能力。&lt;/p&gt;
&lt;p&gt;在碰到天花板时候，我的经验是不要急，尽量老实诚恳地回答。有些面试官不喜欢打太极，
很直接了当，有些面试官则会观察在这种情况下面的应急能力。依据不同的人，
用不同的方式做出诚实的回答。&lt;/p&gt;
&lt;p&gt;能发现自己的天花板或者短板，对成长也是非常有帮助的。
所以面试过程不但是对个人的考验，也是向前辈学习的机会
（好好使用「你有什么问题要问我么？」这个问题），还是对自身进行总结，
对行业进行思考，寻找自己瓶颈的过程。&lt;/p&gt;
&lt;h2&gt;机会&lt;/h2&gt;
&lt;p&gt;在合适的时间，以合适的状态，加入合适的团队，这是我对机会的理解。
个人只能给机会做「状态」准备，而无法改变这种如同命运丝线般的交叉。&lt;/p&gt;
&lt;p&gt;谁都不知道下次有没有更好的机会出现。尝试抓住这种交叉，就是把握住时机了。
然后就是全力以赴，做到最好。&lt;/p&gt;
&lt;p&gt;暂时就想这么多啦，没更多干货了，小菜鸟的上海生活即将开始。&lt;/p&gt;</summary></entry><entry><title>我为什么来上海</title><link href="/2012/08/why-shanghai/" rel="alternate"></link><updated>2012-08-09T21:10:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-08-09:2012/08/why-shanghai/</id><summary type="html">&lt;p&gt;今天是我到上海的第二天，窗外的台风依然在肆虐，
我用半天的时间来研究这几天要面试公司的产品。放下腿上的笔记本，
抽了根烟，我开始整理一下思绪，准备回答这么一个问题：「&lt;strong&gt;我为什么要到上海来？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;南京有相对悠闲的生活节奏，开车回家 1 小时不到，
父母在毕业那年帮我购置并装修好了新房，工作也比较稳定。
那我为什么还要抛弃这些去上海？&lt;/p&gt;
&lt;p&gt;回答这个问题，我需要从我的经历讲起。&lt;/p&gt;


&lt;p&gt;前天在和 &lt;a href="http://lightory.net/"&gt;@lightory&lt;/a&gt; 在雕刻时光聊天，我提到自己的成长经历：
我从小就是一个 loser，成绩不好，长得不高不帅，没有突出的能力。
尤其是在学生时代，学习是他们的本职工作，而我完成的很差劲，
最后也是很勉强的上了大学。&lt;/p&gt;
&lt;p&gt;按照正常的人生走向，同时也是父母规划的路线发展。我会勉强读完大学，
可能还要挂几门功课导致拿不到学位证，然后回家找一份普通工作，差不多能养活自己，
然后找个差不多的女人当老婆，生个孩子，凑活着过日子。生活即使不能一直开心，
但至少小康没什么问题，一晃就能把一辈子晃过去。&lt;/p&gt;
&lt;p&gt;我的大一也的确是这么过的。转折点是大二，那时候跟老师关系不错，
自己对专业也比较感兴趣，开始能变的不那么 loser。
真正「毁三观」的转折点是大三之后接触互联网，我开始探索世界，
知道了自己的渺小，知道了那些优秀的人。破而后立，我开始寻找自己的方向，
渴求自己价值的实现，渴望发现世界的精彩，渴望变得卓越。&lt;/p&gt;
&lt;p&gt;几年后阅读心理学书籍才知道，当时一个重要的改变因素是 - &lt;strong&gt;好奇心&lt;/strong&gt;。
即便是我从小成绩一直不如意，我依然保持了对事物的好奇心：自然科学、人文历史等等，
好奇心并没有因为我日益增长的年龄和逐渐退步的成绩而减少。&lt;/p&gt;
&lt;p&gt;那个阶段，我做了很多无用功，至少是做了不少不那么 Pragmatic 的事情。
有渴望，却不知道怎么发力，从小的自律能力也没有培养起来，做事情效率低下，
周围能认同自己的人也少。那时候前进的方向就是：
&lt;strong&gt;我觉得以前生活方式有问题，我需要改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大约大三时候，我建立了自己的独立博客，从而开始认识互联网上优秀的&lt;strong&gt;博友&lt;/strong&gt;，
尤其是优秀的同龄人，我开始去了解别人的成长历程和学习经历，
去看他们的心理路程。我真切的感觉到了自己的不足，发力狂奔。&lt;/p&gt;
&lt;p&gt;毕业之后，我在南京待了两年。这两年中，我做这么几件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让自己不被工作所僵化，保持思考能力&lt;/li&gt;
&lt;li&gt;持续学习&lt;/li&gt;
&lt;li&gt;大约看了 80 本书，大部分是技术书，少部分是心理学和其他人文的&lt;/li&gt;
&lt;li&gt;参加本地各类技术聚会，只要有时间，我一定参加&lt;/li&gt;
&lt;li&gt;参加非技术聚会，保持自己社交能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所做的这些都是为了补偿这二十多年来浪费的学习时间和培养自己能力的机会。
在人生这条赛场上，我出发的比较迟，但是一旦自己确定方向，
我还是想去追那些遥遥领先的选手。&lt;/p&gt;
&lt;p&gt;曾经有人甚至用讽刺的语气问过我：「南京这么多公司，难道没有公司能配的上你？」
南京提供的互联网机会很少，比较难找到能够发挥自己价值的单位。
我不想做一枚螺丝钉，我需要寻找自己的价值。我要感谢互联网，
它的存在将信息传播的更远更深，使它将我从碌碌无为的人生中拯救了出来，
帮助我进行了更多的思考。也因为这个，我对「&lt;strong&gt;信息传播改变人类生活&lt;/strong&gt;」
这桩事情充满了兴趣，我渴望打破信息的垄断，让正能量的福泽传播到每个人身边。&lt;/p&gt;
&lt;p&gt;我的博客副标题「&lt;strong&gt;Computers can change your life for the better.&lt;/strong&gt;」是 Geek
准则第三条，也是我信奉的原则。&lt;/p&gt;
&lt;p&gt;The blue pill or the red pill？
今年上半年，我就在考虑从南京出发到上海的事情，7月份拿到驾照的第二天，
我就发出辞职信。8月8号，是台风「海葵」登录上海的这天，我洗去一身风尘，
踏上了上海这片土地。我不知道这桩决定会对我来说是好是坏，但是我知道，
如果我不来，我一定会抱憾终生。&lt;/p&gt;
&lt;p&gt;2012年08月9日于上海嘉定&lt;/p&gt;</summary><category term="上海"></category></entry><entry><title>《少有人走的路》读后感</title><link href="/2012/08/the-road-less-traveled/" rel="alternate"></link><updated>2012-08-04T08:58:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-08-04:2012/08/the-road-less-traveled/</id><summary type="html">&lt;p&gt;关注这本书是在&lt;a href="http://program-think.blogspot.com/"&gt;编程随想&lt;/a&gt;那里看到的&lt;a href="http://program-think.blogspot.com/2012/06/book-review-road-less-traveled.html"&gt;一篇书评&lt;/a&gt;，
其中引用了书中一句经典的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人可以拒绝任何东西，但绝对不可以拒绝成熟。拒绝成熟，实际上就是在规避问题、
逃避痛苦。规避问题和逃避痛苦的趋向，是人类心理疾病的根源，不及时处理，
你就会为此付出沉重的代价，承受更大的痛苦。&lt;/p&gt;
&lt;p&gt;所有逃避者，都在阻碍自己心智的成熟；
一切心智成熟者，他们的人生之旅都是从直面问题开始。&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;我最近半年的时间中，经常和一位闺密朋友讨论成熟、感情、人生历程的问题，
她的价值取向：喜欢自由无舒服的生活，压力尽量好。
我直观的感觉这是有问题的，可是说不出哪里不对，人的确有追求美好生活的权利呀。
看到《少有人走的路》中这几句话，我反应过来了。
我们依然用童年的遗留思维评判生活质量，以自己为中心，缺少安全感，心智还没有成熟。&lt;/p&gt;
&lt;p&gt;于是我翻开这本书，寻找答案。&lt;/p&gt;
&lt;p&gt;&lt;img alt="少有人走的路" src="http://img1.douban.com/lpic/s2144391.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;心智成熟的标志-自律&lt;/h2&gt;
&lt;p&gt;人生苦难重重，我们要解决它们，逃避不是办法，依赖别人也不可靠。
自律可以让我们解决各种问题，自律有四种技巧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推迟满足感：喜欢先苦后甜的人往往缺乏安全感，和成长历程有关。
推迟满足感需要控制自己欲望并相信自己的价值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;承担责任：相信自己的能力，完成自己的承诺。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尊重事实：不要陷入固有知识的诅咒，而要不停探索新的世界。
秘诀就是尊重事实，经常自省。避免固步自封，逃避挑战。
保持开放的心态，敢于面对事实，同时真诚对待他人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持平衡：自律是痛苦的，要学会在痛苦和快乐之间保持平衡。
心智成熟需要在需要、目标、责任之间保持微妙的平衡，
在放弃和新生之间达到平衡。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就我而言，第四点「保持平衡」极难掌握，而且几乎是只可意会不可言传的，
我相信这个平衡的掌握依赖于个人对价值观的认识，
这也引出了本书的第二部分「爱」。&lt;/p&gt;
&lt;p&gt;我在这里在将人生各个阶段会遇到的危机按出现顺序列出来，
帮助我们「在合适的时候做合适的事情」（这是我从小给我被灌输的人生理念）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不需要过多考虑外界要求的婴儿时期&lt;/li&gt;
&lt;li&gt;想象中无所不能的幻觉&lt;/li&gt;
&lt;li&gt;完全占有（包括性方面）父亲或母亲（或者二者）的欲望&lt;/li&gt;
&lt;li&gt;童年的依赖感&lt;/li&gt;
&lt;li&gt;父母的扭曲形象&lt;/li&gt;
&lt;li&gt;自以为拥有无穷潜力的青春期感觉&lt;/li&gt;
&lt;li&gt;无拘无束的自由&lt;/li&gt;
&lt;li&gt;青年时期的灵巧与活力&lt;/li&gt;
&lt;li&gt;青春时代性的吸引力&lt;/li&gt;
&lt;li&gt;长生不老的错觉&lt;/li&gt;
&lt;li&gt;对子女的权威&lt;/li&gt;
&lt;li&gt;各种各样暂时性的权力&lt;/li&gt;
&lt;li&gt;身体健康的独立性&lt;/li&gt;
&lt;li&gt;自我以及生命本身&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;心智成熟的原动力-爱&lt;/h2&gt;
&lt;p&gt;推上有一位朋友 &lt;a href="https://twitter.com/HeseyWang"&gt;@HeseyWang&lt;/a&gt; 每天12点都有一条 Twitter 来自 ifttt，
「所有的戰鬥力都來源於愛。」。第二章就是关于爱的，不是情爱，
书中对「爱」的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;爱，是为了促进自我和他人心智成熟，而具有的一种自我完善的意愿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书中关于爱的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恋爱能够突破「自我界限」，让人感到狂喜。这是残酷的假想，不是真正的相知和相爱。&lt;/li&gt;
&lt;li&gt;坠入情网本质：内在性的需求和外在性的刺激，增加种族繁衍机会。（这里我存疑）&lt;/li&gt;
&lt;li&gt;真正的爱：陶醉在爱的情感中，希望对方成长，想把激情和生命献给对方。&lt;/li&gt;
&lt;li&gt;爱需要关注对方的心智成熟。爱的对象也可以是事物或活动，比如园艺和金钱。&lt;/li&gt;
&lt;li&gt;坠入情网和爱往往存在关联，很有可能同时发生，很多人会将两者混淆在一起。&lt;/li&gt;
&lt;li&gt;依赖不是爱，是心智的不成熟，严重的被成为「消极性依赖人格失调」&lt;/li&gt;
&lt;li&gt;学会如何爱，学会关注，比如倾听和反馈&lt;/li&gt;
&lt;li&gt;正视死亡&lt;/li&gt;
&lt;li&gt;因为有爱，就有愿景，就会去努力，去改变。有爱就会愿意去改变命运。&lt;/li&gt;
&lt;li&gt;借助心智的成熟、爱，从而自我完善，突破自我界限，将自我延伸到新的领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;成长与信仰&lt;/h2&gt;
&lt;p&gt;原标题是「成长和宗教」，鉴于国内对对宗教的认识，
我认为「成长与信仰」更能表达作者想法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;及时更新自己的世界观，摈弃旧的自我，拥抱新的认识。&lt;/li&gt;
&lt;li&gt;用「科学的宗教」替代「父母的宗教」，保持怀疑和挑战的勇气。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者继续使用几个故事告诉我们处理好成长与宗教信仰的关系。&lt;/p&gt;
&lt;h2&gt;神奇的力量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有神秘的力量可以帮我们绝处逢生，甚至对厄运产生抵抗力。&lt;/li&gt;
&lt;li&gt;潜意识的神奇力量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者在这里插入了一些有神论的认识，因为我是无神论，我对这章无感。&lt;/p&gt;
&lt;p&gt;虽然最后一章我有些不赞同，但是就总体而言，这仍然是一本关于成熟、价值观的极好的书。
更多书评可以看&lt;a href="http://book.douban.com/subject/1775691/"&gt;少有人走的路 (豆瓣)&lt;/a&gt;。&lt;/p&gt;</summary><category term="心理学"></category><category term="读书笔记"></category></entry><entry><title>MoinMoin Wiki 转换 Text 脚本</title><link href="/2012/07/moin2txt/" rel="alternate"></link><updated>2012-07-27T09:02:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-07-27:2012/07/moin2txt/</id><summary type="html">&lt;p&gt;我使用 MoinMoin 作为我的 KMS，具体使用方式可以参考
[使用MoinMoin作为个人KMS][moin-kms]。另外，我将 MoinMoin 的 &lt;code&gt;data&lt;/code&gt;
目录链接到 Dropbox 同步目录下面，从而可以备份并查看我的知识库。&lt;/p&gt;
&lt;h2&gt;我想同步阅读 KMS 数据&lt;/h2&gt;
&lt;p&gt;想在移动设备阅读 KMS 数据时，我遇到一个麻烦，MoinMoin 使用文件来保存 wiki 数据，
比如「28个Unix.Linux的命令行神器」这篇 wiki 目录在
&lt;code&gt;data/28(e4b8aa)Unix(2e)Linux(e79a84e591bde4bba4e8a18ce7a59ee599a8)&lt;/code&gt; 中，
结构如下：&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;revisions&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="mo"&gt;00000002&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="mo"&gt;00000001&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;attachments&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_xargs_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_sl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_mtr_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_lftp_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_htop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_calcurse_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_multitail_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ack_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_tpp_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_powertop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_newsbeuter_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_socat_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_siege_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_duplicity_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ipbt_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_iftop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_curl_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_iptraf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tcpudp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_vim_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_earthquake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_tmux3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_cowsay_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_TaskWarrior2&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_vifm_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_taskwarrior_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_linuxlogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ranger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_nethack_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_rtorrent_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_dtach&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dvtm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_gnu_screen_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ledger_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_rsync_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_byobu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tmux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ttytter_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;text_html&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;pagelinks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，中文名称的 wiki 在存储时候，MoinMoin 会将中文保存为 utf-8 码，
不能直接阅读。并且我需要将目录下面有多级目录，阅读麻烦。&lt;/p&gt;
&lt;h2&gt;一个脚本&lt;/h2&gt;
&lt;p&gt;为了解决这个问题，我写了如下小脚本，帮我解决这个问题：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class="c"&gt;# coding=utf-8&lt;/span&gt;

&lt;span class="c"&gt;# convert MoinMoin wiki to text&lt;/span&gt;
&lt;span class="c"&gt;# for moinmoin 1.9.x&lt;/span&gt;
&lt;span class="c"&gt;# author: alswl&lt;/span&gt;
&lt;span class="c"&gt;# update at: 2012-07-22&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;

&lt;span class="n"&gt;IS_DECODE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;current&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;revisions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;IS_DECODE_PATH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;\(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;File &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, Name: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, Message: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
                         &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;ENCODE_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\(([\w\d]+)\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ENCODE_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
        &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unhexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENCODE_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lastpos&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Convert moin wiki to text archieves&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;the path of moinmoin/data/pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;the path os target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;使用帮助：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;moin2txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;

&lt;span class="n"&gt;Convert&lt;/span&gt; &lt;span class="n"&gt;moin&lt;/span&gt; &lt;span class="n"&gt;wiki&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;archieves&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;            &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;moinmoin&lt;/span&gt;&lt;span class="sr"&gt;/data/&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python moin2txt.py -i /your/moin/path/data/pages -o /your/dropbox/path/kms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令运行完，就能在对应目录生成一坨 txt 文件，文件名还是中文的，Mission complete.&lt;/p&gt;
&lt;p&gt;我将这个命令加入了 cron，每天执行一次，保证 Dropbox 中是最新的 wiki。&lt;/p&gt;</summary><category term="MoinMoin"></category></entry><entry><title>学车记</title><link href="/2012/07/learning-driving/" rel="alternate"></link><updated>2012-07-26T22:21:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-07-26:2012/07/learning-driving/</id><summary type="html">&lt;p&gt;经过两个月的学习，今天下午终于把驾照拿到手了。期间各种苦逼各种悲催顿感消失，
终于打赢了这场难度仅次于装修的战争。&lt;/p&gt;
&lt;p&gt;博客也因学车而荒废了1个月，今天就顺便写点针对南京的驾校考试的东西。&lt;/p&gt;
&lt;p&gt;南京驾照考试有4部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理论考试，网上好好做题，2小时就可以考95分以上了，90分合格&lt;/li&gt;
&lt;li&gt;桩考，就是考倒桩。80分合格，当场有一次补考机会。&lt;/li&gt;
&lt;li&gt;电子路，2+1（侧方位停车、坡道定点停车和起步、起伏路、直角转弯、S 弯、
百米加减档、限宽门、单边桥和连续障碍），其中「侧方位停车」和
「坡道定点停车和起步」是必考，其他再抽一项。和桩考共享一次现场补考机会，80分合格。&lt;/li&gt;
&lt;li&gt;人工路：上车在实际道路开一会。没有现场补考，80分合格。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;如果现场补考不合格，或者压根没有现场补考机会，那么不合格的话需要等22天补考。&lt;/p&gt;
&lt;p&gt;特别注意：如果桩考不是满分过的，而电子路又没通过，那就需要从桩考重新开始考，
所以桩考不满分，后面电子路压力会很大。&lt;/p&gt;
&lt;p&gt;我报的驾校是南京天保驾校，大明路分校，这是离我最近的天保驾校。
天保的优势是它属于南京车管所，所以各种流程会稍微方便一些，你懂的。
我报的是天保 VIP 课程，费用 4980,普通费用大概在2k 多。
VIP 可以享受一些排队优惠，就我感觉最明显的是理论考、桩考、电子路考试时候 VIP
是第一批，除此之外，VIP 的教练会和蔼一些，享受的学时也多一点，
在选择学习时段也会更自由。&lt;/p&gt;
&lt;p&gt;除了最开始的学费，考试期间还分别叫了 30 + 240 + 230 = 500 的各种费用，
包括考试模拟费和证件费用。&lt;/p&gt;
&lt;p&gt;我在天保经历了5个教练：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路训教练负责上路找感觉&lt;/li&gt;
&lt;li&gt;桩考教练&lt;/li&gt;
&lt;li&gt;电子路教练&lt;/li&gt;
&lt;li&gt;连续障碍「铁饼」教练&lt;/li&gt;
&lt;li&gt;人工路教练&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了路训教练脾气不太好之外，其他教练都算是好说话。我比一般人多一个铁饼教练，
因为电子路在学习时候不学铁饼，抽签抽到铁饼在考前跟教练去学。&lt;/p&gt;
&lt;p&gt;都说铁饼难，天保的铁饼教练很牛逼，我们一起大明路分校的学员，
10个人有7个抽到铁饼，现场学4遍，然后送入考场，全部通过了，通过率比起伏路还要高。&lt;/p&gt;
&lt;p&gt;我的学习时段是这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5/8 理论考试，满分&lt;/li&gt;
&lt;li&gt;5/19 开始路训，每周末去两次（每次1小时），中间请假4次，总共12小时，18课时&lt;/li&gt;
&lt;li&gt;5/26 开始练桩，每周末去两天，排队很浪费时间，中间请假2天，
教练觉得可以了就会帮报名桩考，练到桩考开始&lt;/li&gt;
&lt;li&gt;7/13 桩考，满分&lt;/li&gt;
&lt;li&gt;7/14 电子路，三个半天学习，一个半天模拟&lt;/li&gt;
&lt;li&gt;7/18 电子路考试，铁饼，满分&lt;/li&gt;
&lt;li&gt;7/24 人工路学习，两个半天，然后加一个模拟&lt;/li&gt;
&lt;li&gt;7/26 人工路考试，路况极好，考官人好，满分，考完后1小时拿驾照（仅限天保驾校）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，我是推荐去天保驾校的，时间充裕可以报普通班，
同时 VIP 的优势还是较明显的，普通班一般需要4-5个月，VIP 双休班大约40天，
日常班可以在一个月学完。&lt;/p&gt;
&lt;p&gt;我大概就提供这么多信息了，总的来说，驾校考试只要好好学，考试发挥正常，
都没有什么大问题。祝搜索到这篇文章的人考试顺利。&lt;/p&gt;</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/feeds/flashbian-cheng.atom.xml" rel="self"></link><id>/</id><updated>2010-05-23T00:00:00+08:00</updated><entry><title>SWFObject 一款JavaScript的Flash检测与插入模块</title><link href="/2010/05/swfobject/" rel="alternate"></link><updated>2010-05-23T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-05-23:2010/05/swfobject/</id><summary type="html">&lt;p&gt;今天开始AzaAjaxChat的视频聊天模块，拖FMS的福，实现起来很轻松，不过后来在JavaScript和Flash的交互上遇到了问题。&lt;/p&gt;
&lt;p&gt;Flash在各个浏览器中的实现始终是个麻烦的事情，什么Object Embed~，似乎没有什么标准的格式，一般都要做一些浏览器Hack，我对这些深痛恶绝，在
泡了一下午前端相关的论坛后，偶然发现一款JavaScript交互的神器。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.bobbyvandersluis.com/swfobject/img/swfobject_logo.gif" /&gt;&lt;/p&gt;
&lt;h2&gt;SWFObject: 基于Javascript的Flash媒体版本检测与嵌入模块&lt;/h2&gt;
&lt;p&gt;SWFObject是一个用于在HTML中方面插入Adobe Flash媒体资源（*.swf文件）的独立、敏捷的JavaScript模块。该模块中的JavaS
cript脚本能够自动检测PC、Mac机器上各种主流浏览器对Flash插件的支持情况。它使得插入Flash媒体资源尽量简捷、安全。而且它是非常符合搜索引擎优
化的原则的。此外，它能够避免您的 HTML、XHTML中出现object、embed等非标准标签，从而符合更加标准。&lt;/p&gt;
&lt;p&gt;（即：通过text/html应答页面， 而非application/xhtml+xml）&lt;/p&gt;
&lt;p&gt;官方在Google Project Host中，下载的代码包中有一个简单的Example，也包含了SWFObject的源码，感兴趣的同学可以研究一下。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;/p&gt;
&lt;p&gt;[swfobject - Project Hosting on Google Code&lt;/p&gt;
&lt;p&gt;](http://code.google.com/p/swfobject)&lt;/p&gt;
&lt;p&gt;[SWFObject中文的帮助文档&lt;/p&gt;
&lt;p&gt;](http://www.awflasher.com/flash/articles/swfobj.htm)&lt;/p&gt;
&lt;p&gt;如果你也像我这样为Flash发愁，不妨试试这个小巧的js~&lt;/p&gt;</summary><category term="AzaAjaxChat"></category><category term="JavaScript"></category><category term="SWFObject"></category></entry><entry><title>FMS的80端口占用</title><link href="/2010/05/fms-80-port-used/" rel="alternate"></link><updated>2010-05-22T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-05-22:2010/05/fms-80-port-used/</id><summary type="html">&lt;p&gt;AzaAjaxChat 的语音聊天需要使用的Flex的流媒体传输，我在评估的方案有两套：1.使用原声Socket在客户端进行连接，2.使用FMS
流媒体服务器进行数据传输。&lt;/p&gt;
&lt;p&gt;FMS （Flash Media Server）在安装时候，有一个选项是端口使用哪个，默认是1935 和
80端口，安装之后发现在使用两个Apache在80端口发生冲突（FMS使用的也是Apache服务器），需要将这个端口修改。&lt;/p&gt;
&lt;p&gt;Google后，发现修改 Flash Media Server 3conffms.ini 删除80留下1935即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# IP address and port(s) Flash Media Server should listen on&lt;/span&gt;
&lt;span class="cp"&gt;# For example:&lt;/span&gt;
&lt;span class="cp"&gt;#    ADAPTOR.HOSTPORT = :1935,80&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;ADAPTOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HOSTPORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1935&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;唔～继续搞鼓Flex的流媒体传输了，头疼蛋大啊。。。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;a href="http://www.adobe.com/cfusion/tdrc/index.cfm?pr
oduct=flashmediaserver&amp;amp;loc=zh_cn"&gt;Flash Media Server 开发版下载&lt;/a&gt;，容量有上线，支持10个用户并发操作&lt;/p&gt;</summary><category term="FMS"></category></entry><entry><title>Flex Builder3中的launch path设置</title><link href="/2009/11/flex-builder3-in-the-launch-path-is-set/" rel="alternate"></link><updated>2009-11-24T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-11-24:2009/11/flex-builder3-in-the-launch-path-is-set/</id><summary type="html">&lt;p&gt;在Flex
Builder3中，想运行或者调试一个Flex项目，有Run/Debug/Profile三种运行方式。当我点击这三种方式的按钮时，都会报出一下警告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flash Player Not Found&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Flex Builder cannot locate the required version of Flash Player. You might
need to install Flash Player 9 or reinstall Flex Builder.&lt;/p&gt;
&lt;p&gt;Do you want to try to run your application with the current version?&lt;/p&gt;
&lt;p&gt;大意就是说没有找到Flash
Player，有两个选项Yes/No。如果是Yes，则开启FireFox打开一个html页面，其中内嵌着swf文件。这个警告框还给出一个"&lt;code&gt;Adobe
Flash Player downloads&lt;/code&gt;"的下载链接。我下载安装后依然无法解决这个问题。&lt;/p&gt;
&lt;p&gt;每次点一下倒并不是很麻烦，可恶的是如果这样，就无法对项目进行调试，&lt;code&gt;trace()&lt;/code&gt;输出也不会在Console输出。&lt;/p&gt;
&lt;p&gt;经过我尝试，我发现问题其实是出在项目的执行方式上，修改一下几个地方就可以了。&lt;/p&gt;
&lt;p&gt;点击菜单栏的&lt;code&gt;Run-&amp;gt;Run Configurations&lt;/code&gt;，在打开的对话框中找到&lt;code&gt;Main&lt;/code&gt;中的&lt;code&gt;URL or Path to
launch&lt;/code&gt;，里面默认是&lt;code&gt;Use defaults&lt;/code&gt;，现在我们把Debug/Profile/Run手工改成项目文件夹下对应的swf文件即可。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://upload-
log4d.qiniudn.com/2009/11/flex_launch_path.jpg"&gt;&lt;img alt="flex_launch_path" src="http://upload-" title="log4d.qiniudn.com/2009/11/flex_launch_path.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样修改之后，无论是运行还是调试，都能在一个Flash Player中进行，比在Firefox中方便的多了。&lt;/p&gt;</summary><category term="Flex"></category><category term="Flex Builder"></category></entry><entry><title>PylexChat可行性分析</title><link href="/2009/11/pylexchat-feasibility-analysis/" rel="alternate"></link><updated>2009-11-23T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-11-23:2009/11/pylexchat-feasibility-analysis/</id><summary type="html">&lt;h2&gt;PylexChat介绍&lt;/h2&gt;
&lt;p&gt;PylexChat取名自&lt;strong&gt;Python&lt;/strong&gt;+&lt;strong&gt;Flex&lt;/strong&gt;+&lt;strong&gt;Chat&lt;/strong&gt;部
分缩写，这就意味着这个系统是基于Python+Flex的聊天系统。之所以做这个系统，源自我大学的最后一次课程设计，我不想浪费这最后一次可以供我发
挥自己想象力的机会。年后估计要参加工作了，毕业设计也不敢做这么有想法的课程设计。那就最后一次潇洒一下，做一个我完全没有接触过的东西。&lt;/p&gt;
&lt;p&gt;我几乎不会Python，是最近一个月迷上这门强悍而简单的语言，我完全不会Flex，是最近1周时间才开始接触Flex。这意味着这次课程设计的
风险挺大。我花了几天的时间做了详细的可行性分析，分析了系统框架和GAE能够提供的服务和限制以及Flex/AIR能做的内容，否决了几个方案，最后总
结了一篇简单可行性分析（本文是一周时间慢慢形成的，并没有遵循正规的开发文档风格）。&lt;/p&gt;
&lt;h2&gt;几个基本的概念&lt;/h2&gt;
&lt;p&gt;内容出自&lt;a href="http://zh.wikipedia.org/"&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;Python，是一种面向对象、直译式计算机程序设计语言，也是一种功能强大而完善的通用型语言，已经具有十多年的发展历史，成熟且稳定。&lt;/p&gt;
&lt;p&gt;这种语言具有非常简捷而清晰的语法特点，适合完成各种高层任务，几乎可以在所有的操作系统中运行。&lt;/p&gt;
&lt;p&gt;目前，基于这种语言的相关技术正在飞速的发展，用户数量急剧扩大，相关的资源非常多。&lt;/p&gt;
&lt;h3&gt;Flex&lt;/h3&gt;
&lt;p&gt;Adobe Flex是最初由Macromedia公司在2004年3月发布的，基于其专有的Macromedia Flash平台，它是涵盖了支持RIA（Rich
Internet Applications）的开发和部署的一系列技术组合。&lt;/p&gt;
&lt;p&gt;FLEX支持创建静态文件，该文件使用解释编译方式并且不需要购买服务器许可证就可以在线部署。&lt;/p&gt;
&lt;p&gt;Flex的目标是让程序员更快更简单地开发RIA应用。在多层式开发模型中，Flex应用属于表现层。&lt;/p&gt;
&lt;p&gt;Flex 采用GUI界面开发，使用基于XML的MXML语言。Flex 具有多种组件，可实现Web Services，远程对象，drag and
drop，列排序，图表等功能；FLEX内建动画效果和其它简单互动界面等。相对于基于HTML的应用（如PHP、ASP、JSP、ColdFusion
及CFMX等）在每个请求时都需要执行服务器端的模板，由于客户端只需要载入一次，FLEX应用程序的工作流被大大改善。FLEX的语言和文件结构也试图
把应用程序的逻辑从设计中分离出来。&lt;/p&gt;
&lt;p&gt;Flex 服务器也是客户端和XML Web Services及远程对象（Coldfusion CFCs，或Java类，等支持Action Message
Format的其他对象）之间通讯的通路。&lt;/p&gt;
&lt;h3&gt;AIR&lt;/h3&gt;
&lt;p&gt;dobe AIR（AIR＝Adobe Integrated Runtime），开发代号为Apollo，是一个跨操作系统runtime
environment用来建造RIA，使用Flash、Flex、HTML与AJAX，可能部署为桌面应用程式。&lt;/p&gt;
&lt;p&gt;AIR是Adobe针对网络与桌面应用的结合所开发出来的技术，可以不必经由浏览器而对网络上的云端程式做控制，也由于这是Adobe所开发的技术，因此能很顺利的与
Adobe旗下的Photoshop、Flash、Firework等应用程式来进行开发。&lt;/p&gt;
&lt;h3&gt;Google App Engine&lt;/h3&gt;
&lt;p&gt;Google App Engine是一个开发、托管网络应用程序的平台，使用Google管理的数据中心。它在2008年4月发布了第一个beta版本。&lt;/p&gt;
&lt;p&gt;Google App Engine使用了云计算技术。它跨越多个服务器和数据中心来虚拟化应用程序。 其他基于云的平台还有Amazon Web
Services和微软的Azure服务平台等。&lt;/p&gt;
&lt;p&gt;Google App Engine在用户使用一定的资源时是免费的。支付额外的费用可以获得应用程序所需的更多的存储空间、带宽或是CPU负载。&lt;/p&gt;
&lt;h2&gt;系统需要实现的功能&lt;/h2&gt;
&lt;p&gt;我简单罗列一下：登录、群聊、私聊、注册（功能实现优先级由高到低排列）。&lt;/p&gt;
&lt;p&gt;功能着实有点简单，不过这个系统的亮点在于跨平台，而不是功能的强大。我在设计时候会尽量考虑多些东西，方便以后扩展。&lt;/p&gt;
&lt;h2&gt;数据交互实现方案&lt;/h2&gt;
&lt;p&gt;系统最主要也最难实现的部分是数据交互如何进行有效的交互。我总结了一下几种方法。&lt;/p&gt;
&lt;h3&gt;1.TCP/IP通信&lt;/h3&gt;
&lt;p&gt;一般的C/S模式程序都会考虑套接字连接方式，这是性能最高的交互方式。使用TCP/IP协议，能够有效的避免Python/Flex语言带来的数据交换问题。我查阅
了Flex文档，在&lt;code&gt;flash.net.Socket&lt;/code&gt;下有套接字使用的API，这说明Flex在套接字支持上没有问题。接下来我查阅了GAE的文档，资料比较难找
，最后我查阅了[沙盒](http://code.google.com/intl/zh-CN/appengine/docs/java/runtime.html&lt;/p&gt;
&lt;h1&gt;The_Sandbox)的定义、Python/Java在GAE的限制（参考文献-[Will it play in App&lt;/h1&gt;
&lt;p&gt;Engine](http://groups.google.com/group/google-appengine-java/web/will-it-play-
in-app-engine)），确定GAE不支持套接字和多线程。引用文字如下：[&lt;/p&gt;
&lt;p&gt;](http://groups.google.com/group/google-appengine-java/web/will-it-play-in-
app-engine)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;沙盒&lt;/h4&gt;
&lt;p&gt;为了使得 App Engine
能够跨多个网络服务器分配对于应用程序的请求，并且防止应用程序彼此干扰，请在受限制的"沙盒"环境中运行应用程序。在这种环境中，该应用程序可执行代
码；可存储和查询 App Engine 数据存储区中的数据；可使用 App Engine 邮件、网址抓取和用户服务；可检查用户的网络请求以及准备响应。&lt;/p&gt;
&lt;p&gt;App Engine 应用程序无法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;向文件系统写入。应用程序必须使用 &lt;a href="http://code.google.com/appengine/doc
s/java/datastore/"&gt;App Engine 数据存储区&lt;/a&gt;存储永久数据。允许从文件系统中读取，并且可使用与该应用程序一起上传的所有应用程序文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开套接字或直接访问另一主机。应用程序可使用 &lt;a href="http://code.google.com/appengine/docs/java/urlfetch/"&gt;App Engine
网址抓取服务&lt;/a&gt;分别向端口 80 和 443
上的其他主机发出 HTTP 和 HTTPS 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生子进程或线程。必须在几秒钟内于单个进程中处理对应用程序的网络请求。响应时间很长的进程会被终止，以避免使网络服务器负载过重。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行其他类型的系统调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;线程&lt;/h5&gt;
&lt;p&gt;Java 应用程序无法新建 &lt;code&gt;java.lang.ThreadGroup&lt;/code&gt; 或 &lt;code&gt;java.lang.Thread&lt;/code&gt;。这些限制也适用于利用线程的 JRE
类。例如，应用程序无法新建 &lt;code&gt;java.util.concurrent.ThreadPoolExecutor&lt;/code&gt; 或
&lt;code&gt;java.util.Timer&lt;/code&gt;。应用程序可以对当前线程执行操作，如 &lt;code&gt;Thread.currentThread().dumpStack()&lt;/code&gt;。&lt;/p&gt;
&lt;h5&gt;文件系统&lt;/h5&gt;
&lt;p&gt;Java 应用程序无法使用任何用来写入文件系统的类，如 &lt;code&gt;java.io.FileWriter&lt;/code&gt;。应用程序可以使用诸如
&lt;code&gt;java.io.FileReader&lt;/code&gt; 的类从文件系统中读取自己的文件。应用程序也可以通过例如 &lt;code&gt;Class.getResource()&lt;/code&gt; 或
&lt;code&gt;ServletContext.getResource()&lt;/code&gt; 来访问作为"资源"的自身文件。&lt;/p&gt;
&lt;p&gt;只有视为"资源文件"的文件才可以由应用程序通过文件系统访问。默认情况下，WAR 中的所有文件都是"资源文件"。您可以使用 &lt;a href="http://code.google.com/intl/zh-
CN/appengine/docs/java/config/appconfig.html"&gt;appengine-
web.xml&lt;/a&gt; 文件将文件从该组中排除出去。&lt;/p&gt;
&lt;h5&gt;java.lang.System&lt;/h5&gt;
&lt;p&gt;禁用不适用于 App Engine 的 &lt;code&gt;java.lang.System&lt;/code&gt; 类的功能。&lt;/p&gt;
&lt;p&gt;以下 &lt;code&gt;System&lt;/code&gt; 方法在 App Engine
中不起作用：&lt;code&gt;exit()&lt;/code&gt;、&lt;code&gt;gc()&lt;/code&gt;、&lt;code&gt;runFinalization()&lt;/code&gt;、&lt;code&gt;runFinalizersOnExit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下 &lt;code&gt;System&lt;/code&gt; 方法返回 &lt;code&gt;null&lt;/code&gt;：&lt;code&gt;inheritedChannel()&lt;/code&gt;、&lt;code&gt;console()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用程序无法提供或直接调用任何本机 JNI 代码。以下 &lt;code&gt;System&lt;/code&gt; 方法引发
&lt;code&gt;java.lang.SecurityException&lt;/code&gt;：&lt;code&gt;load()&lt;/code&gt;、&lt;code&gt;loadLibrary()&lt;/code&gt;、&lt;code&gt;setSecurityManager()&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;反射&lt;/h5&gt;
&lt;p&gt;允许应用程序对自己的类进行完全、无限制的反射访问。它可以查询任何私有成员，使用
&lt;code&gt;java.lang.reflect.AccessibleObject.setAccessible()&lt;/code&gt;，以及读取/设置私有成员。&lt;/p&gt;
&lt;p&gt;应用程序还可以对 JRE 和 API 类（如 &lt;code&gt;java.lang.String&lt;/code&gt; 和 &lt;code&gt;javax.servlet.http.HttpServletR
equest&lt;/code&gt;）进行反射。但是，它只可以访问这些类的公共成员，而不可以访问受保护成员或私有成员。&lt;/p&gt;
&lt;p&gt;应用程序无法对不属于自己的任何其他类进行反射，也无法使用 &lt;code&gt;setAccessible()&lt;/code&gt; 方法来避开这些限制。&lt;/p&gt;
&lt;h5&gt;自定义类载入&lt;/h5&gt;
&lt;p&gt;App Engine 完全支持自定义类载入。但是请注意，App Engine 将覆盖所有的
ClassLoader，以将相同的权限分配给所有由应用程序载入的类。如果执行自定义类载入，在载入不信任的第三方代码时要小心。&lt;/p&gt;
&lt;h4&gt;有没有 Google App Engine 不支持的 Python 库？&lt;/h4&gt;
&lt;p&gt;只有很少一部分本机 C python 模块以及本机 C python 模块的子集不受 Google App Engine 支持。详述了本机 C
Python 模块支持的完整列表可在&lt;a href="http://code.google.com/intl/zh-
CN/appengine/kb/libraries.html"&gt;此处&lt;/a&gt;找到。被禁用的模块属于以下类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于维护磁盘上数据存储区的库未在 Google App Engine 的 Python 中启用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google App Engine 禁用套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统不允许您调用子进程，结果某些操作系统模块方法被禁用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程不可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于安全方面的原因，大多数基于 C 的模块都被禁用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他受限制的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;封送已禁用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cPickle 又名 pickle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用已禁用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请记住，使用以上任意一种功能的第三方包（如 mysql、postgresql 等）都将无法在 Google App Engine 上运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;根据Google App Engine的文档描述，在云计算提供的服务器集群中，无法提供套接字和多线程的使用，这也是可以
遇见的，毕竟这么多服务器集群如果要实现套接字和多线程的同步，几乎是不可能完成的任务。&lt;/p&gt;
&lt;h3&gt;使用Web Service/XML通信&lt;/h3&gt;
&lt;p&gt;Flex对Web Service/XML提供了原生的支持，也支持RPC协议（&lt;a href="http://zh.wikipedia.org/zh-
cn/RPC"&gt;什么是RPC&lt;/a&gt;），也可以使用一种AMF(Action Message Format)的一种二进制协议来交换数据。我查看了《Flex
3权威指南》的一些范例代码，实现这些协议需要的操作步骤略多，但是能支持复杂的对象传送。&lt;/p&gt;
&lt;p&gt;考虑到我接触Python/Flex的时间和经验，这种方式显然风险很大，我只能略过这个方案。&lt;/p&gt;
&lt;h3&gt;使用Ajax Poiling方式通信&lt;/h3&gt;
&lt;p&gt;如果写过Ajax聊天室的童鞋们应该很轻松理解这种Poiling方式，即频繁的向服务器发送post请求（通常是1s），然后读取返回数据来进行数据交换。这种方式
适合数据格式简单的通信，不适宜大文件的传送。&lt;/p&gt;
&lt;p&gt;这个方案简单易操作，加上我之前对Web前段也有一些学习，在技术上只要攻克Python/Flex难关，就有一定可行性了。&lt;/p&gt;
&lt;p&gt;采用Ajax
Poiling方式完全是基于Http协议，这个GAE能够完美支持，Flex在&lt;code&gt;flash.net.*&lt;/code&gt;下也有很多对应的方法进行操作，实现应该没有问题。&lt;/p&gt;
&lt;h2&gt;数据库的实现&lt;/h2&gt;
&lt;p&gt;在系统的后期，如果时间充裕，会考虑加入数据库的支持，实现简单的注册/登录和聊天记录存储。&lt;/p&gt;
&lt;p&gt;GAE支持的数据库是BigTable，使用一种GQL的操作语言，与普通的关系型数据库还是有一些区别。下面是wiki的介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BigTable is a compressed, high performance, and proprietary database system
built on Google File System (GFS), Chubby Lock Service, and a few other Google
programs; it is currently not distributed or used outside of Google, although
Google offers access to it as part of their Google App Engine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接加入BigTable支持我怕会导致整个项目拖延，所以如果顺利则加入数据库支持，如果不顺利则放到以后再实现。&lt;/p&gt;
&lt;h2&gt;相关链接&lt;/h2&gt;
&lt;p&gt;PylexChat in Google Project Host:
&lt;a href="http://code.google.com/p/pylexchat/"&gt;http://code.google.com/p/pylexchat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PylexChat in GAE:
&lt;a href="http://pylexchat.appspot.com/"&gt;http://pylexchat.appspot.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先给出上面的网址，还没彻底部署好。&lt;/p&gt;</summary><category term="AIR"></category><category term="Flex"></category><category term="GAE"></category><category term="PylexChat"></category></entry></feed>
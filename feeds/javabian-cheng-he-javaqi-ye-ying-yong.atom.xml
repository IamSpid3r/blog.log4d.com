<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/feeds/javabian-cheng-he-javaqi-ye-ying-yong.atom.xml" rel="self"></link><id>/</id><updated>2011-04-04T00:00:00+08:00</updated><entry><title>Maven下Jetty启动</title><link href="/2011/04/run-jetty-in-maven/" rel="alternate"></link><updated>2011-04-04T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-04-04:2011/04/run-jetty-in-maven/</id><summary type="html">&lt;p&gt;部门最近开发的产品使用的开发服务器是Jetty（挂载在GWT中），启动方法是通过Eclipse的External
Tool执行。我对此表示很好奇，特意在自己电脑下面组建了一个Jetty开发环境，发现Maven和Jetty合作起来非常愉快，现在小记之。&lt;/p&gt;
&lt;h2&gt;一、准备Maven配置文件&lt;/h2&gt;
&lt;p&gt;我使用Maven推荐的标准webapp结构，结构如下，官方文档可以参考&lt;a href="http://maven.apache.org/guides/introduction/introduction-to-
the-standard-directory-layout.html"&gt;Maven - Introduction to the Standard
Directory Layout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;src/main/java&lt;/p&gt;
&lt;p&gt;Application/Library sources&lt;/p&gt;
&lt;p&gt;src/main/resources&lt;/p&gt;
&lt;p&gt;Application/Library resources&lt;/p&gt;
&lt;p&gt;src/main/filters&lt;/p&gt;
&lt;p&gt;Resource filter files&lt;/p&gt;
&lt;p&gt;src/main/assembly&lt;/p&gt;
&lt;p&gt;Assembly descriptors&lt;/p&gt;
&lt;p&gt;src/main/config&lt;/p&gt;
&lt;p&gt;Configuration files&lt;/p&gt;
&lt;p&gt;src/main/webapp&lt;/p&gt;
&lt;p&gt;Web application sources&lt;/p&gt;
&lt;p&gt;src/test/java&lt;/p&gt;
&lt;p&gt;Test sources&lt;/p&gt;
&lt;p&gt;src/test/resources&lt;/p&gt;
&lt;p&gt;Test resources&lt;/p&gt;
&lt;p&gt;src/test/filters&lt;/p&gt;
&lt;p&gt;Test resource filter files&lt;/p&gt;
&lt;p&gt;src/site&lt;/p&gt;
&lt;p&gt;Site&lt;/p&gt;
&lt;p&gt;LICENSE.txt&lt;/p&gt;
&lt;p&gt;Project's license&lt;/p&gt;
&lt;p&gt;NOTICE.txt&lt;/p&gt;
&lt;p&gt;Notices and attributions required by libraries that the project depends on&lt;/p&gt;
&lt;p&gt;README.txt&lt;/p&gt;
&lt;p&gt;Project's readme&lt;/p&gt;
&lt;p&gt;使用的pom.xml主要添加了build-
plugins的Jetty插件，另外修改了outputDirectory，从而实现自动编译到&lt;code&gt;targert/projectName/WEB-
INF/classes&lt;/code&gt;目录，实现&lt;a href="http://wiki.eclipse.org/FAQ_What_is_hot_code_replace%3F"&gt;Eclipse Hot
Code&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/target&lt;span class="nt"&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;artifactId&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finalName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/WEB-INF/classes&lt;span class="nt"&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-eclipse-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.7&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;sourceIncludes&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;sourceInclude&amp;gt;&lt;/span&gt;*&lt;span class="nt"&gt;&amp;lt;/sourceInclude&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/sourceIncludes&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;/p&gt;
&lt;p&gt;&lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;&lt;/p&gt;
&lt;p&gt;&lt;/plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;/p&gt;
&lt;p&gt;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&lt;/p&gt;
&lt;p&gt;&lt;configuration&gt;&lt;/p&gt;
&lt;p&gt;&lt;source&gt;1.6&lt;/source&gt;&lt;/p&gt;
&lt;p&gt;&lt;target&gt;1.6&lt;/target&gt;&lt;/p&gt;
&lt;p&gt;&lt;/configuration&gt;&lt;/p&gt;
&lt;p&gt;&lt;/plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;&lt;/p&gt;
&lt;p&gt;&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;&lt;/p&gt;
&lt;p&gt;&lt;/plugin&gt;&lt;/p&gt;
&lt;p&gt;&lt;/plugins&gt;&lt;/p&gt;
&lt;p&gt;&lt;/build&gt;&lt;/p&gt;
&lt;p&gt;准备几个测试用的Servlet，外加web.xml。运行&lt;code&gt;mvn
install&lt;/code&gt;即可在target/war下面生成war包，同时在target/projectName/下会生成项目文件。&lt;/p&gt;
&lt;p&gt;如果有m2eclipse，那这个动作很容易就可以完成，如果没有，也可以参照我之前的&lt;a href="http://log4d.com/2
011/03/maven-eclipse"&gt;在Eclipse中使用Maven&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;二、撰写Eclipse External Tool&lt;/h2&gt;
&lt;p&gt;建立可以运行的Jetty实例分为两步，建立Jetty的Java Application和创建jetty.xml配置文件。&lt;/p&gt;
&lt;p&gt;1、在Run-Run Configurations中的Java Application中建立一个新的应用，起名为"jetty",使用Main
class为&lt;code&gt;org.mortbay.xml.XmlConfiguration&lt;/code&gt;，在Arguments - Program arguments中加入&lt;code&gt;${p
roject_loc}/jetty.xml&lt;/code&gt;，其中&lt;code&gt;${project_loc}&lt;/code&gt;是动态参数，指向当前项目目录，jetty.xml为我们随后要创建的jett
y配置文件。&lt;/p&gt;
&lt;p&gt;&lt;a href="http
://upload-log4d.qiniudn.com/2011/04/run_configurations%20.png"&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2011/04/run_configurations" title=".png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果想将这个应用保存成文件，可以修改Common - Sava
as到当前目录，就可以保存为jetty.launch文件了。（没错，就是launch文件，Eclipse的运行配置文件）&lt;/p&gt;
&lt;p&gt;&lt;a href="http
://upload-log4d.qiniudn.com/2011/04/eclipse_common.png"&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2011/04/eclipse_common.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、准备jetty.xml文件&lt;/p&gt;
&lt;p&gt;Jetty是一款轻量形的Web服务器，轻到甚至仅仅靠Maven插件即可运行，不过我们依然需要通过jetty.xml文件进行配置。在项目根目录下建立jetty
.xml（此路径与Java Application中的Arguments相对应，有些朋友可能更习惯放在WEB-INF下面）。&lt;/p&gt;
&lt;p&gt;官方说从$JETTY_HOME/webapps/test/WEB-INF/jetty-web.xml可以取到jetty-xml的范例，我这里就提供下载好了。&lt;/p&gt;
&lt;p&gt;点击下载&lt;a href="http://upload-log4d.qiniudn.com/2011/04/jetty.xml"&gt;jetty.xml &lt;/a&gt;，这里面写了hard
code&amp;amp;nbsp_place_holder;&lt;code&gt;&amp;lt;Set
name="resourceBase"&amp;gt;./target/study_web-1.0-SNAPSHOT&amp;lt;/Set&amp;gt;&lt;/code&gt;，请记得替换。&lt;/p&gt;
&lt;p&gt;配置好Jetty之后，就可以运行Jetty了，在Run - Run
As中找到名为jetty的运行命令，不出意外的话，Jetty会在4000端口建立一个实例。&lt;/p&gt;
&lt;p&gt;当我们在Debug模式运行时，由于我们修改java代码会动态更新到classes目录，所以我们可以在运行时修改代码，不信你可以在Debug时候修改Servl
et中代码试试，这就是所谓Hot code。&lt;/p&gt;
&lt;p&gt;Enjoy it!&lt;/p&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;[Eclipse中运行Jetty&lt;/p&gt;
&lt;p&gt;](http://www.daniel-journey.com/archives/214)&lt;/p&gt;
&lt;p&gt;&lt;a href="htt
p://www.blogjava.net/alwayscy/archive/2007/05/19/118584.html"&gt;天生一对"Maven2+Jetty" -- Maven2创建并管理WebApp，并使用Maven Jetty Plugin在Eclipse中调试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.blogjava.net/alwayscy/archive/2007
/09/13/144969.html"&gt;目前发现的最好最快的直接在ECLIPSE中JETTY调试方式&lt;/a&gt;&lt;/p&gt;</summary><category term="Eclipse"></category><category term="Jetty"></category></entry><entry><title>在Eclipse中使用Maven</title><link href="/2011/03/maven-eclipse/" rel="alternate"></link><updated>2011-03-18T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-03-18:2011/03/maven-eclipse/</id><summary type="html">&lt;p&gt;一提到Eclipse中使用Maven，都会想到&lt;a href="http://m2eclipse.codehaus.org/"&gt;m2eclipse&lt;/a&gt;这个插件。其实在Ecli
pse下使用Maven不用插件也能完成，我们只需要使用bin/mvn下面的mvn即可。&lt;/p&gt;
&lt;h2&gt;3分钟Maven&lt;/h2&gt;
&lt;p&gt;Maven官方提供了&lt;a href="http://maven.apache.org/guides
/getting-started/maven-in-five-minutes.html"&gt;Getting Started in 5 Minutes&lt;/a&gt;和&lt;a href="http://maven.apache.org/guides/getting-
started/index.html"&gt;Getting Started in 30
Minutes&lt;/a&gt;两种教程，我这里再简化一下，记录一下常用命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#建立一个空项目，包含一个HelloWorld，可以通过&lt;/span&gt;
&lt;span class="cp"&gt;#-DarchetypeGroupId=&amp;lt;archetype-groupId&amp;gt; -DarchetypeArtifactId=&amp;lt;archetype-artifactId&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#命令创建更多类型项目&lt;/span&gt;
&lt;span class="n"&gt;mvn&lt;/span&gt; &lt;span class="n"&gt;archetype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DgroupId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DartifactId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;helloworld&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;编译打包到jar或者war，根据pom中定义&lt;/h1&gt;
&lt;p&gt;maven package&lt;/p&gt;
&lt;h1&gt;jUnit跑跑&lt;/h1&gt;
&lt;p&gt;mvn test&lt;/p&gt;
&lt;h1&gt;神奇的命令，帮助创建Eclipse项目，配置path，默认使用M2_REPO这个变量作为目录&lt;/h1&gt;
&lt;p&gt;mvn eclipse:eclipse&lt;/p&gt;
&lt;p&gt;大约跑完花费3分钟~嗯，有这几个命令，Maven简单操作就OK了，更多的话，去Maven文档溜溜吧。&lt;/p&gt;
&lt;p&gt;PS：为了防止Maven编码错误，建议在bin/mvn里面加入一句话&lt;code&gt;set MAVEN_OPTS=-Dfile.encoding=UTF-8&lt;/code&gt;
这样强制Maven使用UTF-8进行编码。&lt;/p&gt;
&lt;h2&gt;配置Eclipse环境&lt;/h2&gt;
&lt;h3&gt;加入M2_REPO&lt;/h3&gt;
&lt;p&gt;进入Eclipse-&amp;gt;preferences-&amp;gt;java-&amp;gt;build path-&amp;gt;classpath
variables，添加M2_REPO这个变量，指向C:/Documents and Settings/userName/.m2/repository，这个
路径是默认的Maven仓库，如果你想搬到其他地方，需要修改mavenconfsetting.xml里面的localRepository。&lt;/p&gt;
&lt;h3&gt;配置String Substitution&lt;/h3&gt;
&lt;p&gt;通过配置String
Subsitution我们就可以使用Eclipse的lanuch来启动Maven，而不是Eclipse插件启动。首先我们要告诉Eclipse
Maven在哪里。配置Eclipse-&amp;gt;preferences-&amp;gt;Run/Debug-&amp;gt;String Subsitution，加入mvn
=&amp;amp;nbsp_place_holder;D:/dotj_dev/tools/apache-maven-2.2.1/bin/mvn.bat。&lt;/p&gt;
&lt;h3&gt;建立Launch文件&lt;/h3&gt;
&lt;p&gt;Launch其实是Eclipse的Launcher框架的配置文件，可以定义Application的启动方式。新建一个mvn-war.launch如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;launchConfiguration&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.eclipse.ui.externaltools.ProgramLaunchConfigurationType&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;stringAttribute&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bad_container_name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;helloworldmvn-war.launch&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;stringAttribute&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.eclipse.ui.externaltools.ATTR_LOCATION&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${mvn}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;stringAttribute&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clean compile war:war -U&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;stringAttribute&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${workspace_loc:/helloworld}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/launchConfiguration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Update（2011/03/21）：后来测试发现&lt;code&gt;bad_container_name&lt;/code&gt;没有也可以正常运行；&lt;code&gt;${workspace_loc:/hello
world}&lt;/code&gt;修改为&lt;code&gt;${project_loc}&lt;/code&gt;更为方便。&lt;/p&gt;
&lt;p&gt;这个.launch文件内容其实是XML格式的，里面定义了几个属性，用来告诉Eclipse执行什么命令，重要的属性是ATTR_LOCATION和ATTR_TO
OL_ARGUMENTS，我们分别赋值为${mvn}和Maven参数，就可以正确执行了。&lt;/p&gt;
&lt;p&gt;类似的，我们可以建立mvn eclipse:eclipse的Launch文件，用来生成Eclipse类型的项目。&lt;/p&gt;
&lt;p&gt;PS：使用Substitution的目的其实是为了避免不同开发环境下面Maven位置不相同，保持.launch文件统一。&lt;/p&gt;</summary><category term="Eclipse"></category><category term="Maven"></category></entry><entry><title>最近在学的技术</title><link href="/2010/04/recent-study-technologys/" rel="alternate"></link><updated>2010-04-18T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-04-18:2010/04/recent-study-technologys/</id><summary type="html">&lt;p&gt;根据这篇日志的题目，必然是一篇水文，我思量再三，还是把它放出来，这些技术的接触把我带入了另一个广阔的天堂。这是我学Java以来的第二个里程碑。&lt;/p&gt;
&lt;p&gt;使用Java1年半，1年前开始JSP编程，一直是我和周围的朋友自己摸索，学校没有开Java课，也没有参加什么培训课程，面对庞大的Java开源分支，我一直摸索
，不能登堂入室。&lt;/p&gt;
&lt;p&gt;万分感谢倪经理这1个月来的教导，他给了我一个不一样的Java。&lt;/p&gt;
&lt;h3&gt;iBatis&lt;/h3&gt;
&lt;p&gt;如果说Hibernate是一款自动化的导弹，那么iBatis则是一款轻型的半自动步枪，简介、高效、方便配置。加上iBator这个神器，iBatis可以使开发
效率几倍提升。&lt;/p&gt;
&lt;p&gt;年前开始学习iBatis，想借其思想自己完成一个简单的ORM系统，3月份时候，公司的一个新框架采用了iBatis，更是给我提供了一个绝佳的Playgroun
d。Hibernate和iBatis有各自的适合使用的领域，不能单纯的说谁好谁不好，不过iBatis绝对值得尝试。&lt;/p&gt;
&lt;p&gt;动软的.net生成器使用的DAL接入层也是使用的iBats.net做数据接入。&lt;/p&gt;
&lt;h3&gt;Jaas&lt;/h3&gt;
&lt;p&gt;我对权限控制的理解，从最早的单表用户字段管理，到贴吧的基于角色权限控制，直到后来公司使用的基于权限+菜单控制，最好到现在的Jaas提供的资源-角色-权限-
菜单 控制体系。细化到原子级的权限控制带来了莫大的好处，这个很大程度归功于Jaas。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java Authentication Authorization Service（JAAS，Java验证和授权API）提供了灵活和可伸缩的机制来保证客
户端或服务器端的Java程序。Java早期的安全框架强调的是通过验证代码的来源和作者，保护用户避免受到下载下来的代码的攻击。JAAS强调的是通过验证谁在运行
代码以及他／她的权限来保护系统面受用户的攻击。它让你能够将一些标准的安全机制，例如Solaris NIS（网络信息服务）、Windows
NT、LDAP（轻量目录存取协议），Kerberos等通过一种通用的，可配置的方式集成到系统中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我对这套权限系统的学习还不透彻，还有很多地方需要琢磨和研究，学无止境啊。&lt;/p&gt;
&lt;h3&gt;ESB&lt;/h3&gt;
&lt;p&gt;很惭愧，知道现在才知道这个名词，ESB的思想其实在很多地方得到了灌输，我一直自认经常会跟进主流技术，现在才发现果然还是自己道行不够。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ESB全称为Enterprise Service
Bus，即企业服务总线。它是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素&lt;/p&gt;
&lt;p&gt;ESB的出现改变了传统的软件架构，可以提供比传统中间件产品更为廉价的解决方案，同时它还可以消除不同应用之间的技术差异，让不同的应用服务器协调运作，实现了
不同服务之间的通信与整合。从功能上看，ESB提供了事件驱动和文档导向的处理模式，以及分布式的运行管理机制，它支持基于内容的路由和过滤，具备了复杂数据的传输能
力，并可以提供一系列的标准接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Mule&lt;/h3&gt;
&lt;p&gt;Mule是一个企业服务总线(ESB)消息框架，也就是上面所说的ESB的一个开源框架实现。Mule的优势体现在：&lt;/p&gt;
&lt;p&gt;1.基于J2EE1.4的企业消息总线(ESB)和消息代理(broker).&lt;/p&gt;
&lt;p&gt;2.可插入的连接性:比如 Jms,jdbc,tcp,udp,multicast,http,servlet,smtp,pop3, file,xmpp等.&lt;/p&gt;
&lt;p&gt;3.支持任何传输之上的异步，同步和请求响应事件处理机制.&lt;/p&gt;
&lt;p&gt;4.支持Axis或者Glue的Web Service.&lt;/p&gt;
&lt;p&gt;5.灵活的部署结构 [Topologies]包括Client/Server, P2P, ESB 和Enterprise Service Network.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与Spring 框架集成:可用作ESB 容器，也可以很容易的嵌入到Spring应用中.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.使用基于SEDA处理模型的高度可伸缩的企业服务器.&lt;/p&gt;
&lt;p&gt;8.强大的基于EIP模式的事件路由机制等.&lt;/p&gt;
&lt;p&gt;Mule发布最新版本1.1，这个发布包括集成了JBI，对 BPEL的支持,还增加一些新的传输器(transport)Quartz,FTP,RMI与EJB等。&lt;/p&gt;
&lt;h3&gt;Tiles&lt;/h3&gt;
&lt;p&gt;我之前认识是&lt;include&gt;已经是一种比较好的页面实现方式，Tiles的出现粉碎了我的认识。Tiles框架提供了一种模板机制，模板定义了网页的布局，同一模
板可以被多个Web页面共用。通过配置文件进行协调，把页面文件的分层应用到极致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Tiles 是一个创建简单的网络应用用户界面的模板框架，Tiles让用户可以在运行中使用定义好的小模块装配成完整的页面。&lt;/p&gt;
&lt;p&gt;采用基本的JSP语句创建复合式网页 -&amp;gt; 采用JSP的include指令创建复合式网页 -&amp;gt; 采用Tiles:Insert标签创建复合式网页 -&amp;gt;
采用Tiles模板创建复合式网页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Web压力测试&lt;/h3&gt;
&lt;p&gt;这是我在翻阅大学里软件工程课孙老师给05届毕业生的PPT时候发现的内容。PPT体面推荐了3种Web压力测试工具。&lt;/p&gt;
&lt;p&gt;Web Application Stress Tool, Microsoft&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jakarta.apache.org/jmeter/"&gt;JMeter, Java Apache Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.broadgun.com"&gt;LoadItUp, BroadGun Software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述三种，我只试用了JMeter，还在继续研究中。&lt;/p&gt;
&lt;h3&gt;Web测试自动化&lt;/h3&gt;
&lt;p&gt;这也是从那堆PPT中学习的东西，我把他们列到我的GTD计划中，还没来得及实现。&lt;/p&gt;
&lt;h4&gt;[Watir&lt;/h4&gt;
&lt;p&gt;](http://wtr.rubyforge.org/)&lt;/p&gt;
&lt;p&gt;一个使用 Ruby 实现的开源Web 自动化测试框架。&lt;/p&gt;
&lt;h4&gt;[Selenium&lt;/h4&gt;
&lt;p&gt;](http://selenium.openqa.org/)&lt;/p&gt;
&lt;p&gt;ThoughtWorks 专门为 Web 应用而开发的自动化测试工具，适合进行功能测试、验收测试 。&lt;/p&gt;
&lt;h4&gt;[jWebUnit&lt;/h4&gt;
&lt;p&gt;](http://jwebunit.sourceforge.net/)&lt;/p&gt;
&lt;p&gt;为 Web 应用程序创建测试用例的一个开源框架，它可以容易地插入到大多数 Java IDE 中。&lt;/p&gt;
&lt;h3&gt;Last&lt;/h3&gt;
&lt;p&gt;啥也不说了，埋头学习吧～&lt;/p&gt;
&lt;p&gt;路漫漫其修远兮，吾将上下而求索。&lt;/p&gt;</summary><category term="ESB"></category><category term="iBatis"></category><category term="Jaas"></category><category term="JavaSE"></category><category term="Mule"></category><category term="Testing"></category><category term="Tiles"></category></entry><entry><title>管理WebLogic服务</title><link href="/2010/03/manage-weblogic-service/" rel="alternate"></link><updated>2010-03-06T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-03-06:2010/03/manage-weblogic-service/</id><summary type="html">&lt;h2&gt;注册WebLogic成 windows服务&lt;/h2&gt;
&lt;p&gt;1、执行Domain目录下的 &lt;code&gt;installService.cmd [USER_NAME]
[PASSWORD]&lt;/code&gt;命令，就会在windows服务中生成一个&lt;code&gt;beasvc
domainname_adminservername&lt;/code&gt;的服务启动类型为"自动"，手动将它设置为启动就可以每次开机自动启动了。&lt;/p&gt;
&lt;p&gt;2、在创建新的域的时候有这个选项的，服务名字为beasvc domainname-servername。&lt;/p&gt;
&lt;h2&gt;删除WebLogic服务&lt;/h2&gt;
&lt;p&gt;1.执行Domain目录下的 &lt;code&gt;stopWebLogic.cmd&lt;/code&gt;命令就可以删除服务&lt;/p&gt;
&lt;p&gt;2.删除服务之后，可以直接删除Domain下的所有文件～&lt;/p&gt;</summary><category term="Weblogic"></category></entry><entry><title>DWR2.0在JDK1.4下的配置</title><link href="/2010/03/dwr2-0-jdk1-4-configuration/" rel="alternate"></link><updated>2010-03-01T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-03-01:2010/03/dwr2-0-jdk1-4-configuration/</id><summary type="html">&lt;p&gt;服务器的WebLogic版本是8.1，使用自带的JDK1.4&lt;/p&gt;
&lt;p&gt;MyEclipse版本是6.6，项目文件的&lt;strong&gt;Compiler compliance level&lt;/strong&gt;设置为1.4&lt;/p&gt;
&lt;p&gt;MyEclipse自带Tomcat使用MyEclipse6.6自带的JDK5&lt;/p&gt;
&lt;p&gt;开发时候系统运行无误。&lt;/p&gt;
&lt;p&gt;部署到应用服务器之后，使用WebLogic自带的JDK1.4，登录之后的一些页面一旦访问，会导致服务器报错停止。我检查了一下错误信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"ListenThread.Default" listening on port 7001, ip address &lt;em&gt;.&lt;/em&gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DWR Version 2.0.5 starting.  &lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Servlet Engine: WebLogic XMLX Module 8.1 SP1 Fri Jun 20 23:06:40 PDT 2003 27&lt;br /&gt;
1009 with&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Java Version:&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; 1.4.1_03  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Java Vendor:&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; Sun Microsystems Inc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line=19 The content of element type "dwr" must match "(init?,allow?,signatures&lt;br /&gt;
?)".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unexpected Signal : EXCEPTION_ACCESS_VIOLATION occurred at PC=0x6D3F8887&lt;/p&gt;
&lt;p&gt;Function=JVM_RegisterPerfMethods+0x11C42&lt;/p&gt;
&lt;p&gt;Library=C:beaJDK141~1jrebinclientjvm.dll&lt;/p&gt;
&lt;p&gt;Current Java thread:&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
java.lang.Class.getName(Native Method)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactory&lt;/p&gt;
&lt;p&gt;Impl.java:246)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.apache.commons.logging.LogFactory.getLog(LogFactory.java:395)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.directwebremoting.util.CommonsLoggingOutput.&lt;init&gt;(CommonsLogging&lt;/p&gt;
&lt;p&gt;Output.java:35)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.directwebremoting.util.Logger.&lt;init&gt;(Logger.java:62)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.directwebremoting.util.Logger.getLogger(Logger.java:33)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
org.directwebremoting.annotations.AnnotationsConfigurator.&lt;clinit&gt;(An&lt;/p&gt;
&lt;p&gt;notationsConfigurator.java:335)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;n
bsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder; at
sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&lt;/p&gt;
&lt;p&gt;可以发现，错误是运行到DWR这里发生了报错，好，那么我们从这里下手。&lt;/p&gt;
&lt;p&gt;狗狗之后，得知DWR 2.0需要的JDK是1.5+，如果使用JDK1.4则要换成DWR1.x。不过，随后我看到两篇文章提供了两种解决方案。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/mcjyellow/blog/item/7b
654d544dd0025ed109068f.html"&gt;在JDK1.4中正确使用 DWR AJAX框架_永无止境_百度空间&lt;/a&gt;中配置web.xml来添加一个init-param，我测试之后发现对我无效，原因会在下面贴出。&lt;/p&gt;
&lt;p&gt;随后我在&lt;a href="http://71322560.blog.163.com/blog/static/567209
75200919102327784/"&gt;DWR的BUG - 一点凉月的日志 - 网易博客&lt;/a&gt;看到标题为&lt;strong&gt;在JDK1.4中运行和部署DWR2和hibernate3出现的问题&lt;/strong&gt;的文字，提供了删除annotati
ons的方法，经过我测试，的确有效，方法如下。（友情提醒，操作之前请记得备份哦）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在DWR2.0中提供了一些JDK5中才能使用的annotations的功能。然而，这个
功能在JDK1.4的环境中进行启动或者部署会发生错误。抱歉的是这个错误信息我没有及时记录，日后补上。这个错误在网上可以轻易地搜索到解决方案，即在
dwr.jar中删除掉org.directwebremoting.annotations.AnnotationsConfigurator这个类再
重新部署就可以了。&lt;/p&gt;
&lt;p&gt;同样的问题出现在hibernate3中，hibernate3对annotations的 支持在JDK1.4中也可能出现异常
，解决的办法就是在部署文件中删除掉hibernate-annotations.jar就可以了。&lt;/p&gt;
&lt;p&gt;另外值得说明的是，以上2个问题并不是每次都会出现的。它们就如同幽灵一样有时出现有时不出
现，因此我们并不需要总是删除这个类和jar包，只是在发生错误时才删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;按照上述所说操作，在加载DWR时候，服务器会提示&lt;strong&gt;AnnotationsConfigurator is
missing. Are you running from within an IDE?&lt;/strong&gt;但是已经可以正常运行了。&lt;/p&gt;
&lt;p&gt;为什么第一个无效，因为这个错误引起的原因是JDK5中才能使用的annotations的功能，就算在web.xml配置了java.lang.Object的cl
ass，依然没有办法找到annotations，错误依然会存在。&lt;/p&gt;
&lt;p&gt;有朋友问怎么删除一个.jar的类，呵呵，其实直接用7-Zip或者WinRAR此类的工具打开jar文件，进去删除即可，jar文件本质上其实就是一个带Meta-
INF的zip压缩包。&lt;/p&gt;</summary><category term="DWR"></category><category term="Weblogic"></category></entry><entry><title>Java笔记 使用反射来改进BaseDao</title><link href="/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/" rel="alternate"></link><updated>2009-11-17T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-11-17:2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</id><summary type="html">&lt;h2&gt;关于反射&lt;/h2&gt;
&lt;p&gt;反射的定义（via &lt;a href="http://zh.wikipedia.org/zh-cn/%E5%8F%8D%E5%B0%84_%28%E8%AE%A1
%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%29"&gt;Wiki&lt;/a&gt;）：在计算机科学中，反射是&lt;strong&gt;指一种特定类型的计算机程序能够在运行时以一种依
赖于它的代码的抽象特性和它的运行时行为的方式被更改&lt;/strong&gt;的特性。用比喻来说，那种程式能够"&lt;strong&gt;观察&lt;/strong&gt;"并且修改自己的行为。&lt;/p&gt;
&lt;p&gt;Java中的反射示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exercise1116&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;public class Foo {&lt;/p&gt;
&lt;p&gt;public void fun(String str) {&lt;/p&gt;
&lt;p&gt;System.out.println(str);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exercise1116&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;import java.lang.reflect.InvocationTargetException;&lt;/p&gt;
&lt;p&gt;import java.lang.reflect.Method;&lt;/p&gt;
&lt;p&gt;public class ReflectionDemo {&lt;/p&gt;
&lt;p&gt;public static void main(String[] args) throws SecurityException,&lt;/p&gt;
&lt;p&gt;NoSuchMethodException, ClassNotFoundException, InstantiationException,&lt;/p&gt;
&lt;p&gt;IllegalAccessException, IllegalArgumentException,&lt;/p&gt;
&lt;p&gt;InvocationTargetException {&lt;/p&gt;
&lt;p&gt;// 不使用反射&lt;/p&gt;
&lt;p&gt;Foo foo = new Foo();&lt;/p&gt;
&lt;p&gt;foo.fun("no reflection");&lt;/p&gt;
&lt;p&gt;// 使用反射&lt;/p&gt;
&lt;p&gt;String className = "dddspace.job.exercise1116.Foo";&lt;/p&gt;
&lt;p&gt;String funName = "fun";&lt;/p&gt;
&lt;p&gt;// 获取类名&lt;/p&gt;
&lt;p&gt;Class cls = Class.forName(className);&lt;/p&gt;
&lt;p&gt;// 创建Object实例&lt;/p&gt;
&lt;p&gt;Object foo2 = cls.newInstance();&lt;/p&gt;
&lt;p&gt;// 创建Method hello&lt;/p&gt;
&lt;p&gt;Method method = cls.getMethod("fun", String.class);&lt;/p&gt;
&lt;p&gt;// 使用反射来调用Method的invode方法，参数是目标对象+参数&lt;/p&gt;
&lt;p&gt;method.invoke(foo, "use reflection");&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2&gt;&amp;amp;nbsp_place_holder;原始BaseDao设计&lt;/h2&gt;
&lt;p&gt;我先阐述一下BaseDao的设计想法：BaseDao是一个&lt;strong&gt;抽象类&lt;/strong&gt;，提供一系列Dao方法"&lt;strong&gt;get()/getAll()/add()/update(
)/delete()/getCount()&lt;/strong&gt;"，通过&lt;strong&gt;泛型匹配&lt;/strong&gt;的获取类，我取出一个方法来做示例。&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;Tstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getSimpleName&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getSimpleName&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;hql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;select count(*) from &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Tstr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HibernateSessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hql&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniqueResult&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HibernateException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HibernateSessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closeSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;               
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;amp;nbsp_place_holder;其中有一段&lt;strong&gt;dirty work&lt;/strong&gt;，就是TStr的获取，这段TStr是想从实现Dao类获取实体类的类型名称，也就是
从"TopicDao"获取"Topic"这个类型名称。整个BaseDao的泛型设计不错，但是在这一段上面存在一段dirty work，始终让我不爽。&lt;/p&gt;
&lt;h2&gt;重构BaseDao和TopicDao&lt;/h2&gt;
&lt;p&gt;我今天复习完抽象类/接口/反射这些内容，又在纸上画了一个模型，觉得用这种新方法解决会更好一点。&lt;/p&gt;
&lt;p&gt;给抽象类BasoDao加入新的变量Class c，然后在TopicDao初始化时候对Class
c进行设置为Topic.class，这样就比原来的拼字符串好的多。耦合也显得漂亮了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;abstract&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BaseDAO&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nf"&gt;Class&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Logger.getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this.getClass&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 根据某个Bean的beanId取出Bean&lt;/span&gt;
&lt;span class="cm"&gt;     * @param tId&lt;/span&gt;
&lt;span class="cm"&gt;     * @return Bean&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;T&lt;/span&gt; &lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;tId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// 原始设计&lt;/span&gt;
&lt;span class="c1"&gt;//      String Tstr = getClass().getSimpleName().substring (0,&lt;/span&gt;
&lt;span class="c1"&gt;//              getClass().getSimpleName().length() - 3);&lt;/span&gt;
        &lt;span class="c1"&gt;// 获取c的名称&lt;/span&gt;
        &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;Tstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c.getSimpleName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;TstrId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Tstr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;hql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Tstr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; where &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nx"&gt;TstrId.substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;TstrId.substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HibernateSessionFactory.currentSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session.beginTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session.createQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hql&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;query.setInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;tId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;query.uniqueResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;tx.commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HibernateException&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;tx.rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nb"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;HibernateSessionFactory.closeSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;       
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TopicDAO&lt;/span&gt; &lt;span class="nx"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseDAO&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Topic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Logger.getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this.getClass&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 根据froumId取出某一吧内的所有没被屏蔽的帖子&lt;/span&gt;
&lt;span class="cm"&gt;     * @param froumId&lt;/span&gt;
&lt;span class="cm"&gt;     * @return ArrayList&amp;lt;Topic&amp;gt; &lt;/span&gt;
&lt;span class="cm"&gt;     * @throws HibernateException&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="c1"&gt;// 在构造函数中进行c的设置&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TopicDAO&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Topic.class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//doSomething&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;amp;nbsp_place_holder;这样完成之后，就完成了一次简单的重构，实现了&lt;strong&gt;变化点分离&lt;/strong&gt;，而且不那么dirty。&lt;/p&gt;
&lt;p&gt;本文的代码来源自PostBar项目。这里有&lt;a href="http://code.google.com/p/postbar/"&gt;Google
Code链接&lt;/a&gt;，v1.0.1的代码并没有上文的实现，本文中的修改还在trunk中。&lt;/p&gt;</summary><category term="DAO"></category><category term="JavaSE"></category><category term="贴吧"></category><category term="重构"></category></entry><entry><title>Java入门好书《Java JDK6学习笔记》</title><link href="/2009/11/getting-started-with-java-books-java-jdk6-study-notes/" rel="alternate"></link><updated>2009-11-16T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-11-16:2009/11/getting-started-with-java-books-java-jdk6-study-notes/</id><summary type="html">&lt;p&gt;&lt;a href="http://t.douban.com/
lpic/s2518833.jpg"&gt;&lt;img alt="Java JDK6学习笔记" src="http://t.douban.com/lpic/s2518833.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Java JDK6学习笔记》(via &lt;a href="http://www.douban.com/subject/2057790/"&gt;豆瓣&lt;/a&gt;，via
&lt;a href="http://www.china-pub.com/34512&amp;amp;ref=ps"&gt;ChinaPub&lt;/a&gt;)是我最近在看的一本书。虽然名为Java学习笔记，其实&lt;strong&gt;
深入浅出&lt;/strong&gt;的讲解了Java这门语言。书中的语言颇有&lt;strong&gt;白文风格&lt;/strong&gt;，适合没有语言基础的同学学习，也适合对一些概念不清楚的开发人员。&lt;/p&gt;
&lt;p&gt;我很快的翻阅了半本书，作者的范例代码简单精要(&lt;a href="http://log4d.com/2009/11/java-notes-_split-variable-
length-parameter-generic-type-
wildcard"&gt;"Java笔记
split/不定长度参数/泛型类型通配符"&lt;/a&gt;中示例代码就是改编自本书)。我现在正在阅读线程、反射和Annotation这三块内容，看得我酣畅淋漓啊。&lt;/p&gt;
&lt;p&gt;我算是概念模糊的开发者，现在准备笔试/面试所以恶补一下平时接触比较少的概念。我虽然也有《&lt;strong&gt;Think in
Java&lt;/strong&gt;》这本至尊级的书，但是显然这本书研究过深，不适合快速复习。《Java JDK6学习笔记》就成了我首选了。（感谢CUMT图书馆！）&lt;/p&gt;
&lt;p&gt;豆瓣简介：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书是作者良葛格本人近几年来学习Java的心得笔记，结构按照作者的学习脉络依次展开，从什么是Java、如何配置Java开发环境、基本的Java语法到程序
流程控制、管理类文件、异常处理、枚举类型、泛型、J2SE中标准的API等均进行了详细介绍。本书还安排了一个"文字编辑器"的专题制作。此外，Java
SE6的新功能，对Java lang等套件的功能加强，以及JDBC4.0、Apache Derby纯Java数据库等新增功能，本书也都予以介绍。&lt;/p&gt;
&lt;p&gt;本书门槛很低，只要您了解Windows基本操作，无须有其他程序语言的基础，甚至没有接触过Java，都可以通过本书扎扎实实地学习Java。而对于一些曾经学
习过Java，但概念和基础仍不扎实的读者，本书也准备了一些面向对象的观点与进阶的议题可供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者在书中其中有几句话我颇为欣赏：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学习一个新的事物时，如果遇到一些概念无法很快理解，这可能是因为要理解概念会需要其他概念先建立起来，所以先暂时放下这个疑问也是一个学习方法，称之为"存疑"
，在以后的学习过程中待必要的概念学会后，目前的疑问自然也会解开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是豆瓣&lt;a href="http://www.douban.com/people/snable/"&gt;snable&lt;/a&gt;的评论，深得我心。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每当有学习java的人让我推荐书籍的时候，我都会毫不犹豫地向他推荐《Java学习笔记》。这本书的上一版是前几年读的了，当时还是按jdk1.5写的。本书最
大特点是：&lt;/p&gt;
&lt;p&gt;1、内容翔实。说翔实不是说它厚，java书里有很多厚而无物的滥书，本书基本覆盖了javaSE的内容，总体说达到中偏高的层次，有些高级内容没有涉及。每一部
分都有其他书籍里没有介绍或者介绍不全面的东西，可以说言之有物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、叙述清楚。对于一些易错或难易理解的概念，作者总是能用通俗的语言讲明白，而不像某些书那样"遮遮掩掩"。这对于初学者无疑是最有帮助的。我读这本书上一版时已经
学过java，当时的目的是为了了解jsk1.5的新变化，但在读的过程中才发现自己对很多点的理解是模糊的。所以个人认为这本书不止适合初学者。&lt;/p&gt;
&lt;p&gt;3、例题有力。例题是最容易帮助我们理解问题的工具，本书的例题都非常有针对性。所选例题有一定实用性，难度适中，不是Toy Program。&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的理解方向不一样，不可能有一本书适合所有学习者，但我坚信好书最终总会被大多数人承认的，这也是我推荐此书的目的。书的价格略高，但物有所值，有条件可以
去图书馆借或者读电子版。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外再多写几句吧，其他推荐的java书籍还有两本：&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1、《Java2核心技术》，此书分上下两卷（基础、高级），优点在于层次比上边那本书要高，话说回来，书也厚了一倍，适合当手册用。此书版本变化频繁，现在已经
到了中文第八版，但个人感觉没有超越第六版翻译的高度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、《Java编程思想》，大名鼎鼎，作者对java的理解程度让人五体投地，优点是就是内容相当深入。个人认为本书试图一次性全面解释清楚某些问题，不适合初学者读
。这种书必须长期反复地阅读，常读常新。&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;再多说一句吧，有一本《JAVA实例技术手册》是我买过最失败的一本书，缺点在于：1、内容不深入；2实例没有想象中的实用，或者有的根本就没有实用价值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;如果你还没有学过Java却想学，我强烈推荐此书。￥59.9绝对物有所值，呃，电子书嘛，给个&lt;a href="h
ttp://www.google.cn/search?hl=zh-CN&amp;amp;newwindow=1&amp;amp;q=Java+JDK6%E5%AD%A6%E4%B9%A0%
E7%AC%94%E8%AE%B0+%E7%94%B5%E5%AD%90%E4%B9%A6&amp;amp;btnG=Google+%E6%90%9C%E7%B4%A2&amp;amp;a
q=f&amp;amp;oq="&gt;Google搜索链接&lt;/a&gt;吧。&lt;/p&gt;</summary><category term="Book"></category><category term="JavaSE"></category></entry><entry><title>Java笔记 split/不定长度参数/泛型类型通配符</title><link href="/2009/11/java-notes-_split-variable-length-parameter-generic-type-wildcard/" rel="alternate"></link><updated>2009-11-15T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-11-15:2009/11/java-notes-_split-variable-length-parameter-generic-type-wildcard/</id><summary type="html">&lt;p&gt;今天看了一下午《&lt;a href="http://www.douban.com/subject/2057790/"&gt;Java学习笔记&lt;/a&gt;》，作者林信良，花名良葛格。从书中所获颇
多，正所谓温故而知新，我就把今天的"新"总结一下，加深记忆。良葛格也提倡"在网上写文章是我记录所学的一种方式"。&lt;/p&gt;
&lt;h2&gt;split的正则式和其中的正则式&lt;/h2&gt;
&lt;p&gt;C语言其中有函数strtok，就是按某些char对字符串进行切割。下面给出一个C下面的范例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;now # is the time for all # good men to come to the # aid of their country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;delims&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;result = strtok( str, delims );&lt;/p&gt;
&lt;p&gt;while( result != NULL ) {&lt;/p&gt;
&lt;p&gt;printf( "result is "%s"n", result );&lt;/p&gt;
&lt;p&gt;result = strtok( NULL, delims );&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;在Java中也有类似的StringTokenizer，但是在JDK5中，已经被标记为Legacy
Class(遗产类)，推荐使用String.split(String regex)，可以接受正则表达式。范例如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Scanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;System.out.println("input n and data");&lt;/p&gt;
&lt;p&gt;n = scanner.nextInt();&lt;/p&gt;
&lt;p&gt;data = new int[n];&lt;/p&gt;
&lt;p&gt;String input = scanner.next().trim();&lt;/p&gt;
&lt;p&gt;//String[] strData = splitByTokenizer(input);&lt;/p&gt;
&lt;p&gt;String[] strData = input.split("[,\s]");&lt;/p&gt;
&lt;p&gt;int i = 0;&lt;/p&gt;
&lt;p&gt;for (String t : strData) {&lt;/p&gt;
&lt;p&gt;data[i] = Integer.parseInt(t);&lt;/p&gt;
&lt;p&gt;i++;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//已过时，Legacy Class(遗产类)&lt;/p&gt;
&lt;p&gt;private String[] splitByTokenizer (String input, String regex) {&lt;/p&gt;
&lt;p&gt;String [] result = null;&lt;/p&gt;
&lt;p&gt;if (input != null &amp;amp;&amp;amp; !input.equals("")) {&lt;/p&gt;
&lt;p&gt;StringTokenizer commaToker = new StringTokenizer(input, ",");&lt;/p&gt;
&lt;p&gt;result = new String[commaToker.countTokens()];&lt;/p&gt;
&lt;p&gt;int i = 0;&lt;/p&gt;
&lt;p&gt;while (commaToker.hasMoreTokens())&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;result[i] = commaToker.nextToken();&lt;/p&gt;
&lt;p&gt;i++;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;return result;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2&gt;不定长度参数&lt;/h2&gt;
&lt;p&gt;听名字这东西就相当有用，也是JDK5开始支持的。（话说现在都JDK6.0了，我们很多童鞋对Java的概念还停留在最开始，其中也包括我，咱们要与时俱进嘛）直接
上代码，就知道怎么用了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exercise1115&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用不定长度参数  &lt;/li&gt;
&lt;li&gt;参考《Java学习笔记》P153相关内容  &lt;/li&gt;
&lt;li&gt;*/&lt;br /&gt;
public class VarArgs {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void main(String[] args) {&lt;/p&gt;
&lt;p&gt;int sum = 0;&lt;/p&gt;
&lt;p&gt;sum = VarArgs.sum(1, 2);&lt;/p&gt;
&lt;p&gt;System.out.println(sum);&lt;/p&gt;
&lt;p&gt;sum = VarArgs.sum(1, 3, 5, 7);&lt;/p&gt;
&lt;p&gt;System.out.println(sum);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//关键在 "int..."&lt;/p&gt;
&lt;p&gt;private static int sum(int... nums) {&lt;/p&gt;
&lt;p&gt;int sum = 0;&lt;/p&gt;
&lt;p&gt;for (int num : nums) {&lt;/p&gt;
&lt;p&gt;sum += num;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;return sum;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2&gt;泛型类型通配符&lt;/h2&gt;
&lt;p&gt;如果你还不知道泛型是什么，那么最好补一下基础(via &lt;a href="http://baike.baidu.com/view/965887.h
tml?wtp=tt"&gt;Baidu Zhidao&lt;/a&gt;)，这个在C++中运用广泛，在JDK5.0加入Java大家族。我这里要解释的是泛型类型的通配符，呃，有点绕口。其实就是让泛型T这个T通
过支持一个接口来支持其实现类。&lt;/p&gt;
&lt;p&gt;咱们还是让代码来反应思想吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exercise1115&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;import java.util.ArrayList;&lt;/p&gt;
&lt;p&gt;import java.util.LinkedList;&lt;/p&gt;
&lt;p&gt;import java.util.List;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型类型通配符  &lt;/li&gt;
&lt;li&gt;参考《Java学习笔记》P249相关内容  &lt;/li&gt;
&lt;li&gt;*/&lt;br /&gt;
public class WildcardTest&lt;T&gt; {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void main(String[] args) {&lt;/p&gt;
&lt;p&gt;/*想定义泛型为List接口，错误&lt;/p&gt;
&lt;p&gt;WildcardTest&lt;List&gt; wildcardTestW= null;&lt;/p&gt;
&lt;p&gt;wildcardTestW = new WildcardTest&lt;ArrayList&gt;();&lt;/p&gt;
&lt;p&gt;wildcardTestW = new WildcardTest&lt;LinkedList&gt;();&lt;/p&gt;
&lt;p&gt;*/  &lt;/p&gt;
&lt;p&gt;//关键词 "&amp;lt;? extends Class&amp;gt;"匹配正确&lt;/p&gt;
&lt;p&gt;WildcardTest&amp;lt;? extends List&amp;gt; wildcardTest= null;&lt;/p&gt;
&lt;p&gt;wildcardTest = new WildcardTest&lt;ArrayList&gt;();&lt;/p&gt;
&lt;p&gt;wildcardTest = new WildcardTest&lt;LinkedList&gt;();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2&gt;补遗：关于String/StringBuilder/StringBuffer&lt;/h2&gt;
&lt;p&gt;简单来说，String是不可变的，每次都是指向不同的内存空间。StringBuilder是可变的，线程不安全。StringBuffer是可变的并且线程安全。
StringBuilder是JDK5.0加入的。（今天5.0开心了，都是推它的）&lt;/p&gt;
&lt;p&gt;A.shun有一篇关于String/StringBuilder/StringBuffer的文，可以移步到&lt;a href="http://www.a18zhizao.
cn/y2009/1060_string-stringbuffer-and-stringbuilders-the-
difference.html"&gt;这里&lt;/a&gt;看详细介绍。&lt;/p&gt;</summary><category term="JavaSE"></category></entry><entry><title>DAO的设计-使用泛型来避免重复DAO</title><link href="/2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/" rel="alternate"></link><updated>2009-07-10T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-07-10:2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/</id><summary type="html">&lt;p&gt;DAO的全称是Data Access Object数据访问接口。数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。&lt;/p&gt;
&lt;p&gt;我大二时候写的一个小型管理系统，那时候老师开始强调分层和MVC的思想，当时我将DAO层分了开来，把所有与数据库的交互操作封装成对应的DAO类，这样最大的好处
是实现了封装和隔离，方便系统的迁移和重构。&lt;/p&gt;
&lt;p&gt;分层、封装、接口化是一种基本的解决思路，无论是TCP/IP协议族，还是软件工程，都是很值得使用的方案。&lt;/p&gt;
&lt;p&gt;那么接下来的问题就是DAO类的设计，我当时遇到的问题就是DAO类之间存在大量的冗余代码，用敏捷的角度来思考，这绝对是不允许存在的。&lt;/p&gt;
&lt;p&gt;讲相同的方法抽象出来，这也是最常见的解决方案，最简单的例子就是函数的产生，其实也是对程序的一种抽象和提炼，避免冗余，达到复用效果。&lt;/p&gt;
&lt;p&gt;在Java1.5出来之前，用Object来操作对象，实现方法复用，就可以达到上面的目的，但是，存在类型安全的问题。Java1.5提出了泛型的概念，类似与C+
+中的Template，Java运行环境帮助会检查类型的安全。&lt;/p&gt;
&lt;p&gt;这里有一篇IBM资料库的文章，详细阐述了泛型在DAO设计的使用「不要重复DAO」&amp;lt;&lt;a href="http://www.ibm.com/developer
works/cn/java/j-genericdao.html"&gt;猛击这里打开&lt;/a&gt;&amp;gt;，作者&lt;a href="http://www.ibm.com/developerworks/cn/java/j-genericdao.html#author"&gt;Per
Mellqvist&lt;/a&gt;
(&lt;a href="mailto:per@mellqvist.name?subject=%E4%B8%8D%E8%A6%81%E9%
87%8D%E5%A4%8D%20DAO%EF%BC%81"&gt;per@mellqvist.name&lt;/a&gt;), 系统架构师, 自由作家&lt;/p&gt;
&lt;p&gt;我的贴吧里面DAO最后的UML类图设计如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http
://upload-log4d.qiniudn.com/2009/07/DAO_UML.JPG"&gt;&lt;img alt="DAO_UML" src="http://upload-log4d.qiniudn.com/2009/07/DAO_UML-254x300.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="DAO"></category><category term="Database"></category></entry><entry><title>贴吧小结报告</title><link href="/2009/07/summary-report-of-post-bar/" rel="alternate"></link><updated>2009-07-02T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-07-02:2009/07/summary-report-of-post-bar/</id><summary type="html">&lt;p&gt;终于完成了这个贴吧系统，虽然还有很多地方不完善，但是却包含了我很多心血和精力，也实践了我的很多想法。&lt;/p&gt;
&lt;p&gt;具体的不说了，稍微说一下开发使用的技术：Java、Struts2、Hibernate、OGNL、Eclipse、Tomcat、MySQL、AJAX、jQue
ry、SVN、UP开发模式、UML。&lt;/p&gt;
&lt;p&gt;之中学习了很多内容，我恨兴奋，说起来这是我第一个完整写的一个网站系统，之前的asp啊，asp.NET多多少少借鉴了别人的代码。&lt;/p&gt;
&lt;p&gt;终于知道其实资历代表着经验，很多东西只有自己试过才知道怎么做，这一块我太欠缺了，对于JaveEE开发，也终于开始有了接触，寒假回家3个星期，应该在Java的
本质技术上合Hibernate高级内容、设计模式上花时间了。&lt;/p&gt;
&lt;p&gt;09_11_16 Update:&lt;/p&gt;
&lt;p&gt;今天又check out了一下，然后加入About和Links，当初贴吧在课程设计之后就没有完善，现在加上这两个模块，也就能release了。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/postbar/"&gt;项目在Google Code托管 &lt;/a&gt;（你可以check
out，不知道游客有没有权限，需要可以Mail我）&lt;/p&gt;
&lt;p&gt;&lt;a href="http://log4d.com/tag/postbar"&gt;相关开发博客链接 &lt;/a&gt;&lt;/p&gt;</summary><category term="贴吧"></category></entry><entry><title>再谈s:if的使用</title><link href="/2009/06/return-s-if-the-use-of/" rel="alternate"></link><updated>2009-06-28T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-28:2009/06/return-s-if-the-use-of/</id><summary type="html">&lt;p&gt;上次遇到过&lt;s:if&gt;的问题，费了好久才弄好，这次又遇到，有了一点新的体验。&lt;/p&gt;
&lt;p&gt;&lt;s:if test=""&gt;中的判断，如果是数字判断一般都没有问题，问题会在字符串时候凸显出来。&lt;/p&gt;
&lt;p&gt;尤其是中文字符串，几乎没有能够通过的，上一次是曲线救国，用了true和false着两个英文，如果非得用中文怎么办？&lt;/p&gt;
&lt;p&gt;其实使用&lt;s:if test='str=="中文"'&gt;，就可以了，请注意，是单引号-双引号-中文-双引号-
单引号的顺序，这样才能够正确的解析中文字符串是否相等。&lt;/p&gt;
&lt;p&gt;唔。。。终于可以做下一个部分了&lt;/p&gt;</summary><category term="Struts"></category></entry><entry><title>贴吧中期进度汇报</title><link href="/2009/06/affixed-to-it-the-progress-report-on-the-medium-term/" rel="alternate"></link><updated>2009-06-27T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-27:2009/06/affixed-to-it-the-progress-report-on-the-medium-term/</id><summary type="html">&lt;p&gt;查看sql更新版本，我才发现这个项目已经做了将近2个月了。&lt;/p&gt;
&lt;p&gt;之前一个多月都是我有空就做做，一边要写OpenSSL的模型，还要应付平时学习和考试，最近的1个星期，才开始全身心投入的，使这个项目变成了一个课程设计，但决不
止于课程设计。&lt;/p&gt;
&lt;p&gt;由于鸡鸡的加入，而且对原先设计的一些不满意，我用UP的方式重新对系统进行了设计，从用例到实际类图，都重新设计并加以重构。&lt;/p&gt;
&lt;p&gt;这是一个很有意义的过程，我花了很多时间在UML的使用上，用的是StarUML（开始使用Rose，发现太难入门了），继烨负责用例，我是在设计完第一个迭代过程之
后进行编写代码的。&lt;/p&gt;
&lt;p&gt;原计划是尽量设计之后再编码，但是由于时间关系被迫提前编码，这样，整个过程相对的倾向于敏捷，这其实也是我最开始想要的效果。&lt;/p&gt;
&lt;p&gt;写着写着，越发的理解设计的重要性，往往一个小错误会影响很多改变，很多东西没有一定经验真的很难做优秀。&lt;/p&gt;
&lt;p&gt;今天的代码提交到Google
Code之后，基本接近我之前自己完成的程度，但我觉得这次的重构，使我学到了很多平时没接触到的东西。两个人的协作也使我完全体会到SVN的好处。&lt;/p&gt;
&lt;p&gt;以上是贴吧中期报告。&lt;/p&gt;
&lt;h4&gt;相关链接：&lt;/h4&gt;
&lt;p&gt;PostBar in Google Project Host&amp;lt;&lt;a href="http://code.google.com/p/postbar/"&gt;猛击这里打开&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;PostBar svn-readonly&amp;lt;&lt;a href="http://postbar.googlecode.com/svn/trunk/
postbar-read-only"&gt;猛击这里打开&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary><category term="贴吧"></category></entry><entry><title>校内踩踩小工具v0.1</title><link href="/2009/06/xiaoneicaicai-gadget-v0-1/" rel="alternate"></link><updated>2009-06-14T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-14:2009/06/xiaoneicaicai-gadget-v0-1/</id><summary type="html">&lt;p&gt;明天要考数据库应用了，今天仍然忍不住把校内踩踩小工具写完。&lt;/p&gt;
&lt;p&gt;上次被打击了，人家刷人气的工具是建立一个平台进行互踩，但是安全性存在问题。我自己写的这个小东西能在校内限制范围内刷50个相同区域的页面(校内限制次数是100
，可以执行两次，以后再执行就必须到网页输入验证码)，然后通过他人回踩来提高人气。&lt;/p&gt;
&lt;p&gt;纯粹是自己写着玩，几乎没有什么应用价值，不过既然写了这么久，也就放上来，大家把玩一下。&lt;/p&gt;
&lt;p&gt;压缩包内两个文件，一个xml保存帐号密码，用文本编辑器就可以编辑，另外一个是jar文件，在cmd下面用"java -jar
XiaoneiCaiCai.jar"运行。&lt;/p&gt;
&lt;p&gt;纯属娱乐，水平很菜，大家不要喷我。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://upload-
log4d.qiniudn.com/2009/06/xiaoneicaicai.rar"&gt;猛击这里下载xiaoneicaicai&lt;/a&gt;&lt;/p&gt;</summary><category term="人人"></category><category term="网络编程"></category></entry><entry><title>校内小工具告一段落</title><link href="/2009/06/xiaonei-gadgets-come-to-an-end/" rel="alternate"></link><updated>2009-06-12T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-12:2009/06/xiaonei-gadgets-come-to-an-end/</id><summary type="html">&lt;p&gt;这段时间在写校内小工具，开心农场小外挂，刷刷人气的小外挂。&lt;/p&gt;
&lt;p&gt;结果开心农场的FramKey改了算法，由时间参数改为flash中(5,
3)这点RGB颜色，而且返回的JSON也重新加密了。我对AS3不懂，而且破解算法也不是我强项，就暂停开心农场外挂的开发。&lt;/p&gt;
&lt;p&gt;想把这个工具转为校内刷人气的，原理就是访问大量用户，可能会有一定几率其他用户回访。这个不难写，我只要用爬虫去爬就可以获得大量相关用户，但是爬着爬着，发现校内
只允许在一段时间内查看100用户页面，否则会有验证码，而且爬时候还不能并发。这样一来，就需要手工输入验证码，刷的效率会大打折扣。&lt;/p&gt;
&lt;p&gt;我同学下了一个刷人气的，输入帐号后几乎人气是1秒一个，把玩了一会，感觉是在服务器上存储了所有使用这个软件的人的账号，然后在服务器上进行互刷，这个想法相当于D
ispatch刷人气了，那完全不是我这个单机小工具能够媲美的了。&lt;/p&gt;
&lt;p&gt;这种速度狠狠的打击了我，再继续开发就不得不加入图形界面来输入验证码，本来想写着玩的一个小工具，会成为一个复杂的开发。我只能暂时停止继续写这个工具，投身到课程
设计的洪流中去了。&lt;/p&gt;
&lt;p&gt;当然，这小东西花了我三天时间，也不是一点收获没有，我学会了用XOM持久化对象来保存信息，学会了用正则来获取Html中的信息，学会了用java.net.*操作
Get/Post，学会了操作cookie，学习正确使用I/O系统，学习操作文件，理解Try/Catch更深一点，学会使用注解生成javadoc。&lt;/p&gt;
&lt;p&gt;我所在的学校并没有开设Java课程，自己学习时候是直接写jsp的，通过这一次学习，掌握了很多原来不会的知识。&lt;/p&gt;
&lt;p&gt;好了，再写就成报告了，就这样了，美好的一天又开始了，海绵宝宝，我们去抓水母吧。&lt;/p&gt;</summary><category term="人人"></category></entry><entry><title>使用XOM类库对Java对象进行序列化</title><link href="/2009/06/xom-class-library-to-use-java-objects-serialization/" rel="alternate"></link><updated>2009-06-10T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-10:2009/06/xom-class-library-to-use-java-objects-serialization/</id><summary type="html">&lt;p&gt;校内工具需要保存用户名和帐号，我就想把帐号信息作为一个XiaoneiUser类，然后对其进行对象持久化。
Google下的方法有好几种方法进行持久化，JDOM， DOM4J,
SAX等。我看了之后，感觉都比较麻烦，我个人比较喜欢使用jdk自带的工具，但是查阅jdk api之后，感觉使用javax.xml.*下工具开发更加困难。
我仅仅是需要对一个简单的对象进行持久化来保存数据，并不需要太多太复杂的功能。最后我决定使用《Thinking in Java》推荐的开源类库：XOM
&lt;a href="http://www.xom.nu"&gt;猛击这里打开www.xom.nu&lt;/a&gt; 友情提示一下，网站可以打开，但是下载的连接貌似被墙了，至少我教育网连不上去。推荐
一个在线代理服务器古狗在线代理（&lt;a href="http://www.ggproxy.com/"&gt;猛击这里打开&lt;/a&gt;），通过它就可以下载类库了。
使用类库非常简单，我这里提供个小例子。XiaoneiUser类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xiaonei&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;import java.io.OutputStream;&lt;/p&gt;
&lt;p&gt;import nu.xom.*;&lt;/p&gt;
&lt;p&gt;public class XiaoneiUser {&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户Email&lt;br /&gt;
*/&lt;br /&gt;
private String userEmail;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户Password&lt;br /&gt;
*/&lt;br /&gt;
private String userPassword;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public String getUserEmail() {&lt;/p&gt;
&lt;p&gt;return userEmail;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public void setUserEmail(String userEmail) {&lt;/p&gt;
&lt;p&gt;this.userEmail = userEmail;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public String getUserPassword() {&lt;/p&gt;
&lt;p&gt;return userPassword;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public void setUserPassword(String userPassword) {&lt;/p&gt;
&lt;p&gt;this.userPassword = userPassword;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将类转换为XML  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;@return&lt;br /&gt;
*/&lt;br /&gt;
public Element getXML() {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Element userE = new Element("xiaoneiUser");&lt;/p&gt;
&lt;p&gt;Element userEmailE = new Element("userEmail");&lt;/p&gt;
&lt;p&gt;userEmailE.appendChild(userEmail);&lt;/p&gt;
&lt;p&gt;Element userPasswordE = new Element("userPassword");&lt;/p&gt;
&lt;p&gt;userPasswordE.appendChild(userPassword);&lt;/p&gt;
&lt;p&gt;userE.appendChild(userEmailE);&lt;/p&gt;
&lt;p&gt;userE.appendChild(userPasswordE);&lt;/p&gt;
&lt;p&gt;return userE;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制构造函数  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;@param xiaoneiUser&lt;br /&gt;
*/&lt;br /&gt;
public XiaoneiUser(Element xiaoneiUser) {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;userEmail = xiaoneiUser.getFirstChildElement("userEmail").getValue();&lt;/p&gt;
&lt;p&gt;userPassword = xiaoneiUser.getFirstChildElement("userPassword")&lt;/p&gt;
&lt;p&gt;.getValue();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;@param userEmail  &lt;/li&gt;
&lt;li&gt;@param userPassword&lt;br /&gt;
*/&lt;br /&gt;
public XiaoneiUser(String userEmail, String userPassword) {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;this.userEmail = userEmail;&lt;/p&gt;
&lt;p&gt;this.userPassword = userPassword;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Format输出函数  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;@param os  &lt;/li&gt;
&lt;li&gt;@param doc  &lt;/li&gt;
&lt;li&gt;@throws Exception&lt;br /&gt;
*/&lt;br /&gt;
public void format(OutputStream os, Document doc) throws Exception {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serializer serializer = new Serializer(os, "UTF-8");&lt;/p&gt;
&lt;p&gt;serializer.setIndent(4);&lt;/p&gt;
&lt;p&gt;serializer.setMaxLength(60);&lt;/p&gt;
&lt;p&gt;serializer.write(doc);&lt;/p&gt;
&lt;p&gt;serializer.flush();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Test类入口函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @title Test.java&lt;/span&gt;
&lt;span class="cm"&gt; * @author ddd&lt;/span&gt;
&lt;span class="cm"&gt; * @time 2009-6-10 16:35:36&lt;/span&gt;
&lt;span class="cm"&gt; * @site http://log4d.com&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dddspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xiaonei&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;import java.io.BufferedOutputStream;&lt;/p&gt;
&lt;p&gt;import java.io.File;&lt;/p&gt;
&lt;p&gt;import java.io.FileNotFoundException;&lt;/p&gt;
&lt;p&gt;import java.io.FileOutputStream;&lt;/p&gt;
&lt;p&gt;import cn.dddspace.xiaonei.bean.XiaoneiUser;&lt;/p&gt;
&lt;p&gt;import nu.xom.*;&lt;/p&gt;
&lt;p&gt;public class Test {&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@param args  &lt;/li&gt;
&lt;li&gt;@throws Exception   &lt;/li&gt;
&lt;li&gt;@throws FileNotFoundException &lt;br /&gt;
*/&lt;br /&gt;
public static void main(String[] args) throws FileNotFoundException, Exception
{&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XiaoneiUser user = new XiaoneiUser("a@a.com", "123");&lt;/p&gt;
&lt;p&gt;//序列化user为xml文档&lt;/p&gt;
&lt;p&gt;Document doc = new Document(user.getXML());&lt;/p&gt;
&lt;p&gt;//输出到屏幕&lt;/p&gt;
&lt;p&gt;user.format(System.out, doc);&lt;/p&gt;
&lt;p&gt;//输出到XML文件user.xml&lt;/p&gt;
&lt;p&gt;user.format(new BufferedOutputStream(new FileOutputStream(&lt;/p&gt;
&lt;p&gt;"user.xml")), doc);&lt;/p&gt;
&lt;p&gt;//反序列化XML文件为XiaoneiUser对象&lt;/p&gt;
&lt;p&gt;Document doc2 = new Builder().build("user.xml");&lt;/p&gt;
&lt;p&gt;Element element = doc2.getRootElement();&lt;/p&gt;
&lt;p&gt;XiaoneiUser user2 = new XiaoneiUser(element);&lt;/p&gt;
&lt;p&gt;//输出对象信息，验证对象&lt;/p&gt;
&lt;p&gt;System.out.println(user2.getUserEmail());&lt;/p&gt;
&lt;p&gt;System.out.println(user2.getUserPassword());&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;代码非常简单，如果要进行简单的对象序列化，我觉得这个400kb的类库非常实用&lt;/p&gt;</summary><category term="JavaSE"></category><category term="Lib"></category></entry><entry><title>java.net.*操作session/GET/POST方法</title><link href="/2009/06/java-net-operation-session-get-post-method/" rel="alternate"></link><updated>2009-06-09T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-09:2009/06/java-net-operation-session-get-post-method/</id><summary type="html">&lt;p&gt;终于又考完一门试，开始做课程设计了，结果课程设计给工作室一个尾气3个月的项目，而这次的先用我写的贴吧放上去，我变得暂时空闲了，开始着手写校内开心农场小工具-
全能拖拉机。 首先要解决的就是校内登录的问题，那就是Get/Post方法了，还有用户状态保存，就是session的操作。Java不同于C#，那位可以集成系统
的浏览器或者之间创建一个Browser。&lt;/p&gt;
&lt;p&gt;开始写了自己的第一个版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MalformedURLException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProtocolException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;public class FarmerHelper {&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@param args  &lt;/li&gt;
&lt;li&gt;@throws ProtocolException&lt;br /&gt;
*/&lt;br /&gt;
public static void main(String[] args) throws ProtocolException {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String loginUrlStr = "http://login.xiaonei.com/Login.do";&lt;/p&gt;
&lt;p&gt;String homeUrlStr = "http://home.xiaonei.com/Home.do";&lt;/p&gt;
&lt;p&gt;URL loginUrl = null;&lt;/p&gt;
&lt;p&gt;URL homeUrl = null;&lt;/p&gt;
&lt;p&gt;HttpURLConnection loginConn = null;&lt;/p&gt;
&lt;p&gt;HttpURLConnection homeConn = null;&lt;/p&gt;
&lt;p&gt;try {&lt;/p&gt;
&lt;p&gt;loginUrl = new URL(loginUrlStr);&lt;/p&gt;
&lt;p&gt;homeUrl = new URL(homeUrlStr);&lt;/p&gt;
&lt;p&gt;try {&lt;/p&gt;
&lt;p&gt;loginConn = (HttpURLConnection) loginUrl.openConnection();&lt;/p&gt;
&lt;p&gt;homeConn = (HttpURLConnection) homeUrl.openConnection();&lt;/p&gt;
&lt;p&gt;} catch (IOException e) {&lt;/p&gt;
&lt;p&gt;print("Conn't open the url connection!");&lt;/p&gt;
&lt;p&gt;e.printStackTrace();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;} catch (MalformedURLException e) {&lt;/p&gt;
&lt;p&gt;print("Illegal URL!");&lt;/p&gt;
&lt;p&gt;e.printStackTrace();&lt;/p&gt;
&lt;p&gt;return;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;loginConn.setRequestMethod("POST");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("User-Agent",&lt;/p&gt;
&lt;p&gt;"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.0.10)"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;" Gecko/2009042316 Firefox/3.0.10");&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;loginConn.setRequestProperty("Keep-Alive", "300");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("Connection", "keep-alive");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("email", "alswlwangzi@163.com");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("password", "xh77Gffb_i");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("submit", "登录");&lt;/p&gt;
&lt;p&gt;loginConn.setRequestProperty("Keep-Alive", "300");&lt;/p&gt;
&lt;p&gt;try {&lt;/p&gt;
&lt;p&gt;loginConn.connect();&lt;/p&gt;
&lt;p&gt;String headerName = null;&lt;/p&gt;
&lt;p&gt;String cookie = "";&lt;/p&gt;
&lt;p&gt;/*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for (int i=0; (headerName =  &lt;/li&gt;
&lt;li&gt;loginConn.getHeaderFieldKey(i))!=null; i++) { if  &lt;/li&gt;
&lt;li&gt;(headerName.equals("Set-Cookie")) { cookie =  &lt;/li&gt;
&lt;li&gt;loginConn.getHeaderField(i); print(cookie); } }&lt;br /&gt;
*/&lt;br /&gt;
cookie = loginConn.getHeaderField("Set-Cookie");&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;print(cookie);&lt;/p&gt;
&lt;p&gt;homeConn.setRequestProperty("Cookie", cookie);&lt;/p&gt;
&lt;p&gt;homeConn.setRequestMethod("GET");&lt;/p&gt;
&lt;p&gt;homeConn.connect();&lt;/p&gt;
&lt;p&gt;BufferedReader in = new BufferedReader(new InputStreamReader(&lt;/p&gt;
&lt;p&gt;homeConn.getInputStream()));&lt;/p&gt;
&lt;p&gt;String lineStr = null;&lt;/p&gt;
&lt;p&gt;while ((lineStr = in.readLine()) != null) {&lt;/p&gt;
&lt;p&gt;// print(lineStr);&lt;/p&gt;
&lt;p&gt;print(new String(lineStr.getBytes("GBK"), "UTF-8"));&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;} catch (IOException e) {&lt;/p&gt;
&lt;p&gt;print("conn't connect to the server!");&lt;/p&gt;
&lt;p&gt;e.printStackTrace();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static void print(Object o) {&lt;/p&gt;
&lt;p&gt;System.out.println(o);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;想法总是好的，现实总是残酷的，调试很久，用WireShark抓包，都是有Length
Required错误，这个比较头疼，我感觉是我session传递的问题（其实不是，后来发现是Post的格式问题），于是网上找来一个Session操作类。
&lt;a href="http://upload-
log4d.qiniudn.com/2009/06/cookiemanager.java"&gt;猛击这里下载cookiemanager&lt;/a&gt; 同时你可以参考这个类作者的文章&lt;a href="http://www.hccp.org/java-net-
cookie-how-to.html"&gt;猛击这里打开HOW-TO:
Handling cookies using the java.net.* API&lt;/a&gt;，谢谢这位外国朋友的帮助。 可惜尽管有这个外国朋友帮助，我写了第二个版本，仍然遇到了相同问题，Length
Required... 崩溃了，开始查找网络编程书，同时参考WireShark的抓包，我惊讶的发现，我把数据域写到了Headers里面去了。
这个致命性的错误导致服务器不能找到正确的数据，并且没有提供数据域的大小Content-Length，所以导致服务器报错。
最后再借花献佛，送上一个完整操作Http GET/POST的类&lt;a href="http://upload-log4d.qi
niudn.com/2009/06/httprequestproxy.java"&gt;猛击这里下载httprequestproxy&lt;/a&gt;依然感谢原作者，&lt;a href="http://benlsoft.j
avaeye.com/blog/97059"&gt;猛击这里打开原文链接&lt;/a&gt;友情提示一下，这个类是07年写的，里面有一些注释说明在1.4和1.5下几个参数不一样，我没有亲测，建议使用1.5
的设置 嗯，有这两个类，明天工作应该会轻松一些，继续fighting!&lt;/p&gt;</summary><category term="JavaSE"></category><category term="Lib"></category><category term="网络编程"></category></entry><entry><title>Mp3Lrc的可执行文件</title><link href="/2009/05/the-executable-file-mp3lrc/" rel="alternate"></link><updated>2009-05-26T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-05-26:2009/05/the-executable-file-mp3lrc/</id><summary type="html">&lt;p&gt;早上把代码输出成了Runnable Jar，生成一个jar格式的文件，只要是有JavaSE的电脑都可以运行了。&lt;/p&gt;
&lt;p&gt;当然，不是双击运行，进入CMD，然后进入jar文件所在文件夹，运行＂java -jar Mp3Lrc.jar＂&lt;/p&gt;
&lt;p&gt;就会出来提示输入Mp3根目录和歌词根目录，把两个目录输入就可以运行了。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://upload-log4d.qiniudn.com/2009/05/mp3lrc.rar"&gt;猛击这里下载Mp3Lrc.rar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个程序是自己用的，可能存在Bug，由于会操作文件，请在使用前备份重要资料（虽然根本没有删除命令，只有复制命令）&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Java写的Mp3歌词复制器</title><link href="/2009/05/lyrics-written-in-java-replicator-mp3/" rel="alternate"></link><updated>2009-05-25T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-05-25:2009/05/lyrics-written-in-java-replicator-mp3/</id><summary type="html">&lt;p&gt;大家可能会遇到这样的情况，Mp3里有很多歌，电脑上也有很多相同的歌，但是有歌词。把歌词同步到Mp3播放器非常麻烦，我以前用千千静听导入目录，然后逐个播放，或
者用一个软件从网上搜索到Mp3播放器。 千千静听或者其他播放器都会有一个选项是设置歌词存储位置的，一般来说，我们听过的歌都是会自动下载歌词到这个文件夹，其实
我们完全可以不必大费周折去找lrc，只要把这个歌词文件夹和Mp3播放器同步就可以了。
以前就想写一个东西完成这个麻烦的工程，现在贴吧1.0完成了，可以休息几天，晚上花了一点时间用Java写了一个这样的小东西。
如果大家碰到和我一样的麻烦，可以试试。呃，时间仓促，没有图形界面，而且必须是Java程序员才能用，因为我这儿只提供了源码....&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;import java.io.BufferedReader;&lt;/p&gt;
&lt;p&gt;import java.io.File;&lt;/p&gt;
&lt;p&gt;import java.io.IOException;&lt;/p&gt;
&lt;p&gt;import java.io.InputStreamReader;&lt;/p&gt;
&lt;p&gt;public class App {&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@author alswl  &lt;/li&gt;
&lt;li&gt;@site dddspace.cn  &lt;/li&gt;
&lt;li&gt;@param args  &lt;/li&gt;
&lt;li&gt;@throws IOException&lt;br /&gt;
*/&lt;br /&gt;
public static void main(String[] args) throws IOException {&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String pathMp3;&lt;/p&gt;
&lt;p&gt;String pathLrc;&lt;/p&gt;
&lt;p&gt;BufferedReader in = new BufferedReader(new InputStreamReader(System.in));&lt;/p&gt;
&lt;p&gt;print("请输入Mp3根目录");&lt;/p&gt;
&lt;p&gt;pathMp3 = in.readLine();&lt;/p&gt;
&lt;p&gt;print("请输入Lrc目录");&lt;/p&gt;
&lt;p&gt;pathLrc = in.readLine();&lt;/p&gt;
&lt;p&gt;copyLrc(pathMp3, pathLrc);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static void copyLrc(String mp3sPath, String lrcsPath) {&lt;/p&gt;
&lt;p&gt;String pathMp3 = mp3sPath;&lt;/p&gt;
&lt;p&gt;String pathLrc = lrcsPath;&lt;/p&gt;
&lt;p&gt;File folderMp3 = new File(pathMp3);&lt;/p&gt;
&lt;p&gt;File folderLrc = new File(pathLrc);&lt;/p&gt;
&lt;p&gt;if (!folderMp3.isDirectory() || !folderLrc.isDirectory()) {&lt;/p&gt;
&lt;p&gt;print("文件夹错误");&lt;/p&gt;
&lt;p&gt;return;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;File[] mp3s = folderMp3.listFiles();&lt;/p&gt;
&lt;p&gt;File[] lrcs = folderLrc.listFiles();&lt;/p&gt;
&lt;p&gt;for (File mp3 : mp3s) {&lt;/p&gt;
&lt;p&gt;if (mp3.isDirectory()) {&lt;/p&gt;
&lt;p&gt;copyLrc(mp3.toString(), lrcsPath);&lt;/p&gt;
&lt;p&gt;} else {&lt;/p&gt;
&lt;p&gt;for (File lrc : lrcs) {&lt;/p&gt;
&lt;p&gt;String mp3Name = mp3.getName().substring(0,&lt;/p&gt;
&lt;p&gt;mp3.getName().length() - 4);&lt;/p&gt;
&lt;p&gt;String lrcName = lrc.getName().substring(0,&lt;/p&gt;
&lt;p&gt;lrc.getName().length() - 4);&lt;/p&gt;
&lt;p&gt;if (mp3Name.equals(lrcName)) {&lt;/p&gt;
&lt;p&gt;print("!" + lrc.toString() + "to "&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;folderMp3.toString());&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;runCmd(""" + lrc.toString() + """, """&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;folderMp3.toString() + """);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static void print(Object s) {&lt;/p&gt;
&lt;p&gt;System.out.println(s);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static void runCmd(String s1, String s2) {&lt;/p&gt;
&lt;p&gt;Runtime rt = Runtime.getRuntime();&lt;/p&gt;
&lt;p&gt;try {&lt;/p&gt;
&lt;p&gt;rt.exec("cmd /c copy " + s1 + " " + s2);&lt;/p&gt;
&lt;p&gt;} catch (Exception e) {&lt;/p&gt;
&lt;p&gt;e.printStackTrace();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;09_05_26新增 jar格式的可执行文件链接，&lt;a href="http://log4d.com/2009/05/26/the-executable-
file-mp3lrc"&gt;猛击这里打开&lt;/a&gt;&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Struts2中Ajax的使用</title><link href="/2009/05/struts2-in-the-use-of-ajax/" rel="alternate"></link><updated>2009-05-23T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-05-23:2009/05/struts2-in-the-use-of-ajax/</id><summary type="html">&lt;p&gt;贴吧1.0差不多可以完成了，进入界面美化，我服务器验证写完之后，开始用jQuery写js。&lt;/p&gt;
&lt;p&gt;使用了jQuery的UI，后来想加入Ajax验证，但是遇到了问题：&lt;/p&gt;
&lt;p&gt;09-05-23 07:53 WARN [org.apache.struts2.dispatcher.Dispatcher] - Could not
find action or result&lt;/p&gt;
&lt;p&gt;There is no Action mapped for namespace / and action name AjaxLogin. -
[unknown location]&lt;/p&gt;
&lt;p&gt;我整整找了一个多小时，曾以为是action name的问题或者是package name, package namespace
的问题，为此我特意重新学习了一下他们的使用方法，但是仍然没有效果。&lt;/p&gt;
&lt;p&gt;最后，终于在Google找到了一些资料：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://huqilong.blog.51cto.com/53638/136802"&gt;struts2 json jquery 集成详解&lt;/a&gt;来自
户起龙的博客&lt;/p&gt;
&lt;p&gt;我本来以为Struts/lib下面的json-lib-2.1.jar就可以了，而且启动Tomcat没有任何报错，居然要另外一个jar，叫做json-
plugin&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href="http://code.google.com/p/jsonplugin/downloads/list"&gt;猛击这里下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用这个插件之后，本以为轻松搞定，但是仍然还是这个错误！！！&lt;/p&gt;
&lt;p&gt;怎么可能？！我怒了，翻开Struts2的文档，文档用的是DWR，已经使用taglib封装了，再查看json-plugin的文档，仍然未果！！&lt;/p&gt;
&lt;p&gt;最后逼急了，使用这篇文章 《在Struts 2中使用JSON Ajax支持》&lt;a href="http://webservices.ctocio.com.c
n/tips/424/7670924.shtml"&gt;猛击这里打开&lt;/a&gt;，重新写了一个Action和一个简单的jsp页面，使用最淳朴的&lt;submit&gt;提交。终于可以成功了，数据交
换能够明显的在FireBug下看到。&lt;/p&gt;
&lt;p&gt;这种情况的话，据我猜测，应该是我原来使用的&lt;s:form&gt;标签的问题，如果使用简单的&lt;form&gt;就应该可以避免了。&lt;/p&gt;
&lt;p&gt;09_05_24修正&lt;/p&gt;
&lt;p&gt;之前说是&lt;s:form&gt;的问题，而用&lt;form&gt;可以解决，结果我发现&lt;form&gt;也不行，直接返回当前页面，这就比较郁闷了，最后，我把&lt;form&gt;去除，只留下
&lt;input type="submit"&gt;就可以了，不好意思，让Strut2蒙冤了。&lt;/p&gt;</summary><category term="AJAX"></category><category term="Struts"></category><category term="贴吧"></category></entry><entry><title>乱码之战</title><link href="/2009/05/battle-of-garbled/" rel="alternate"></link><updated>2009-05-22T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-05-22:2009/05/battle-of-garbled/</id><summary type="html">&lt;p&gt;今天重新设计了贴吧的数据库，参考了WordPress的无外键，设置default的值，我取消了两个外键，仅保留一个对应CategoryId的外键。&lt;/p&gt;
&lt;p&gt;修改数据库时候发现MySQL的charset还是'latin'，就顺手修改成'utf-8'来保证统一，结果就出事了。&lt;/p&gt;
&lt;p&gt;因为我修改了DAO，单元测试之后重新走一遍网页测试流程，结果发帖时候遇到乱码。&lt;/p&gt;
&lt;p&gt;一回生两回熟，咱也不怕。&lt;/p&gt;
&lt;p&gt;在Action里面设置logger，输出相应的数据，发现那里就是乱码，说明在Severlet或者Interceptor那里就出了问题。&lt;/p&gt;
&lt;p&gt;仿照上次设置Tomcat字符集，详情见&lt;a href="../2009/05/12238.html"&gt;Eclipse中开发的Jave EE项目在Tomcat的部署
&lt;/a&gt;，但是测试发现没有效果。&lt;/p&gt;
&lt;p&gt;接着查看web.xml，发现里面还有Spring的filter，贴吧现阶段还没有加入Spring，删除，有一个编码过滤器org.apache.struts2
.dispatcher.FilterDispatcher，采用org.apache.struts2.dispatcher.FilterDispatcher可
以不适用，删除。&lt;/p&gt;
&lt;p&gt;这么一删，就发现乱码问题解决了。&lt;/p&gt;
&lt;p&gt;呵呵，只要人类还有很多语言，乱码仍然会存在，遇到了不要怕，慢慢调试就出来了&lt;/p&gt;</summary><category term="Struts"></category><category term="编码"></category><category term="贴吧"></category></entry></feed>
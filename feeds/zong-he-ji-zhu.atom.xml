<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/feeds/zong-he-ji-zhu.atom.xml" rel="self"></link><id>/</id><updated>2013-10-29T22:32:00+08:00</updated><entry><title>15 分钟学会 R 语言[译文]</title><link href="/2013/10/r-tutorial/" rel="alternate"></link><updated>2013-10-29T22:32:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-10-29:2013/10/r-tutorial/</id><summary type="html">&lt;p&gt;仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 &lt;a href="http://learnxinyminutes.com/"&gt;Learn X in Y minuts&lt;/a&gt; 就是我经常光顾的站点。&lt;/p&gt;
&lt;p&gt;前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。&lt;/p&gt;
&lt;p&gt;Learn X in Y minuts 的源码托管在 &lt;a href="https://github.com/adambard/learnxinyminutes-docs"&gt;Github&lt;/a&gt;。
小柒被我逼着把这篇 &lt;a href="http://learnxinyminutes.com/docs/r/"&gt;R 语言教程&lt;/a&gt;
翻译到 &lt;a href="http://learnxinyminutes.com/docs/zh-cn/r-cn/"&gt;R 语言教程中文版&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 &lt;code&gt;R&lt;/code&gt; 命令。&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 评论以 # 开始&lt;/span&gt;

&lt;span class="c"&gt;# R 语言原生不支持 多行注释&lt;/span&gt;
&lt;span class="c"&gt;# 但是你可以像这样来多行注释&lt;/span&gt;

&lt;span class="c"&gt;# 在窗口里按回车键可以执行一条命令&lt;/span&gt;


&lt;span class="c"&gt;###################################################################&lt;/span&gt;
&lt;span class="c"&gt;# 不用懂编程就可以开始动手了&lt;/span&gt;
&lt;span class="c"&gt;###################################################################&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# 浏览内建的数据集&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 北美主要河流的长度（数据集）&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c"&gt;# 在工作空间中查看「河流」是否出现&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 撇一眼数据集&lt;/span&gt;
&lt;span class="c"&gt;# 735 320 325 392 524 450&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 我们测量了多少条河流？&lt;/span&gt;
&lt;span class="c"&gt;# 141&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#  135.0   310.0   425.0   591.2   680.0  3710.0&lt;/span&gt;
&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 茎叶图（一种类似于直方图的展现形式）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is 2 digit(s) to the right of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 4&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 011223334555566667778888899900001111223333344455555666688888999&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 111222333445566779001233344567&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000112233578012234468&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 045790018&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 04507&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 1471&lt;/span&gt;
&lt;span class="c"&gt;#  14 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  16 | 7&lt;/span&gt;
&lt;span class="c"&gt;#  18 | 9&lt;/span&gt;
&lt;span class="c"&gt;#  20 |&lt;/span&gt;
&lt;span class="c"&gt;#  22 | 25&lt;/span&gt;
&lt;span class="c"&gt;#  24 | 3&lt;/span&gt;
&lt;span class="c"&gt;#  26 |&lt;/span&gt;
&lt;span class="c"&gt;#  28 |&lt;/span&gt;
&lt;span class="c"&gt;#  30 |&lt;/span&gt;
&lt;span class="c"&gt;#  32 |&lt;/span&gt;
&lt;span class="c"&gt;#  34 |&lt;/span&gt;
&lt;span class="c"&gt;#  36 | 1&lt;/span&gt;


&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# 查看数据集的方式既不是标准形式，也不是取log后的结果! 看起来，是钟形曲线形式的基本数据集&lt;/span&gt;

&lt;span class="c"&gt;#  The decimal point is 1 digit(s) to the left of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  48 | 1&lt;/span&gt;
&lt;span class="c"&gt;#  50 |&lt;/span&gt;
&lt;span class="c"&gt;#  52 | 15578&lt;/span&gt;
&lt;span class="c"&gt;#  54 | 44571222466689&lt;/span&gt;
&lt;span class="c"&gt;#  56 | 023334677000124455789&lt;/span&gt;
&lt;span class="c"&gt;#  58 | 00122366666999933445777&lt;/span&gt;
&lt;span class="c"&gt;#  60 | 122445567800133459&lt;/span&gt;
&lt;span class="c"&gt;#  62 | 112666799035&lt;/span&gt;
&lt;span class="c"&gt;#  64 | 00011334581257889&lt;/span&gt;
&lt;span class="c"&gt;#  66 | 003683579&lt;/span&gt;
&lt;span class="c"&gt;#  68 | 0019156&lt;/span&gt;
&lt;span class="c"&gt;#  70 | 079357&lt;/span&gt;
&lt;span class="c"&gt;#  72 | 89&lt;/span&gt;
&lt;span class="c"&gt;#  74 | 84&lt;/span&gt;
&lt;span class="c"&gt;#  76 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  78 | 4&lt;/span&gt;
&lt;span class="c"&gt;#  80 |&lt;/span&gt;
&lt;span class="c"&gt;#  82 | 2&lt;/span&gt;


&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 试试用这些参数画画 （译者注：给 river 做统计频数直方图，包含了这些参数：数据源，颜色，边框，空格）&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#你还可以做更多式样的绘图&lt;/span&gt;

&lt;span class="c"&gt;# 还有其他一些简单的数据集可以被用来加载。R 语言包括了大量这种 data()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：参数为（数据源，颜色，线条宽度，X 轴名称，标题）&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# 除了按照默认的年份排序，我们还可以排序来发现特征&lt;/span&gt;
&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2&lt;/span&gt;
&lt;span class="c"&gt;# [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3&lt;/span&gt;
&lt;span class="c"&gt;# [51]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4&lt;/span&gt;
&lt;span class="c"&gt;# [76]  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  8  9 10 12&lt;/span&gt;

&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：茎叶图（数据，放大系数）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is at the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 000000000&lt;/span&gt;
&lt;span class="c"&gt;#   1 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 00000000000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   3 | 00000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   5 | 0000000&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000000&lt;/span&gt;
&lt;span class="c"&gt;#   7 | 0000&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 0&lt;/span&gt;
&lt;span class="c"&gt;#   9 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  11 |&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 0&lt;/span&gt;

&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 12&lt;/span&gt;

&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#    0.0     2.0     3.0     3.1     4.0    12.0&lt;/span&gt;




&lt;span class="c"&gt;#基本的统计学操作也不需要任何编程知识&lt;/span&gt;

&lt;span class="c"&gt;#随机生成数据&lt;/span&gt;
&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;6.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：runif 产生随机数，round 四舍五入&lt;/span&gt;
&lt;span class="c"&gt;# 1 4 6 1 4 6 4&lt;/span&gt;

&lt;span class="c"&gt;# 你输出的结果会和我们给出的不同，除非我们设置了相同的随机种子 random.seed(31337)&lt;/span&gt;


&lt;span class="c"&gt;#从标准高斯函数中随机生成 9 次&lt;/span&gt;
&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# [1]  0.07528471  1.03499859  1.34809556 -0.82356087  0.61638975 -1.88757271&lt;/span&gt;
&lt;span class="c"&gt;# [7] -0.59975593  0.57629164  1.08455362&lt;/span&gt;









&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 基础编程&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 数值&lt;/span&gt;

&lt;span class="c"&gt;#“数值”指的是双精度的浮点数&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;5e4&lt;/span&gt; &lt;span class="c"&gt;# 50000             # 用科学技术法方便的处理极大值、极小值或者可变的量级&lt;/span&gt;
&lt;span class="mf"&gt;6.02e23&lt;/span&gt; &lt;span class="c"&gt;# 阿伏伽德罗常数#&lt;/span&gt;
&lt;span class="mf"&gt;1.6e-35&lt;/span&gt; &lt;span class="c"&gt;# 布朗克长度&lt;/span&gt;

&lt;span class="c"&gt;# 长整数并用 L 结尾&lt;/span&gt;
&lt;span class="il"&gt;5L&lt;/span&gt;  &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="c"&gt;#输出5L&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;5L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;integer&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 可以自己试一试？用 class() 函数获取更多信息&lt;/span&gt;
&lt;span class="c"&gt;# 事实上，你可以找一些文件查阅 `xyz` 以及xyz的差别&lt;/span&gt;
&lt;span class="c"&gt;# `xyz` 用来查看源码实现，?xyz 用来看帮助&lt;/span&gt;

&lt;span class="c"&gt;# 算法&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="c"&gt;# 76&lt;/span&gt;
&lt;span class="mf"&gt;53.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="c"&gt;# 49.2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;
&lt;span class="il"&gt;3L&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="c"&gt;# 0.75&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c"&gt;# 1&lt;/span&gt;

&lt;span class="c"&gt;# 特殊数值类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;     # 在以下场景中会用到 integrate( dnorm(x), 3, Inf ) -- 消除 Z 轴数据&lt;/span&gt;

&lt;span class="c"&gt;# 但要注意，NaN 并不是唯一的特殊数值类型……&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 看上面&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# NULL&lt;/span&gt;


&lt;span class="c"&gt;# 简单列表&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 6 8 7 5 3 0 9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gimmel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dalet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;he&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Zoro&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# FALSE FALSE FALSE FALSE&lt;/span&gt;

&lt;span class="c"&gt;# 一些优雅的内置功能&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="c"&gt;# 5  6  7  8  9 10 11 12 13 14 15&lt;/span&gt;

&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]     0  1337  2674  4011  5348  6685  8022  9359 10696 12033 13370 14707&lt;/span&gt;
&lt;span class="c"&gt;# [13] 16044 17381 18718 20055 21392 22729 24066 25403 26740 28077 29414 30751&lt;/span&gt;

&lt;span class="n"&gt;letters&lt;/span&gt;
&lt;span class="c"&gt;#  [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; &amp;quot;e&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;i&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;m&amp;quot; &amp;quot;n&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;q&amp;quot; &amp;quot;r&amp;quot; &amp;quot;s&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [20] &amp;quot;t&amp;quot; &amp;quot;u&amp;quot; &amp;quot;v&amp;quot; &amp;quot;w&amp;quot; &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abb&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Jan&amp;quot; &amp;quot;Feb&amp;quot; &amp;quot;Mar&amp;quot; &amp;quot;Apr&amp;quot; &amp;quot;May&amp;quot; &amp;quot;Jun&amp;quot; &amp;quot;Jul&amp;quot; &amp;quot;Aug&amp;quot; &amp;quot;Sep&amp;quot; &amp;quot;Oct&amp;quot; &amp;quot;Nov&amp;quot; &amp;quot;Dec&amp;quot;&lt;/span&gt;


&lt;span class="c"&gt;# Access the n&amp;#39;th element of a list with list.name[n] or sometimes list.name[[n]]&lt;/span&gt;
&lt;span class="c"&gt;# 使用 list.name[n] 来访问第 n 个列表元素，有时候需要使用 list.name[[n]]&lt;/span&gt;
&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;r&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LETTERS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;M&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;September&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# 7&lt;/span&gt;



&lt;span class="c"&gt;# 字符串&lt;/span&gt;

&lt;span class="c"&gt;# 字符串和字符在 R 语言中没有区别&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Horatio&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;character&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;multis &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ø&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;Fortøna møltis dat nimis, nølli satis.&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 逻辑值&lt;/span&gt;

&lt;span class="c"&gt;# 布尔值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 和我们预想的一样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;    &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;   &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;  &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;   &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="c"&gt;# 缺失数据（NA）也是逻辑值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#定义NA为逻辑型&lt;/span&gt;



&lt;span class="c"&gt;# 因子&lt;/span&gt;
&lt;span class="c"&gt;# 因子是为数据分类排序设计的（像是排序小朋友们的年级或性别）&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;female&amp;quot; &amp;quot;male&amp;quot;   &amp;quot;NA&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;#  female female male   NA     female&lt;/span&gt;
&lt;span class="c"&gt;# Levels: female male NA&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 自然以及引产导致的不育症&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;education&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;0-5yrs&amp;quot;  &amp;quot;6-11yrs&amp;quot; &amp;quot;12+ yrs&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 变量&lt;/span&gt;

&lt;span class="c"&gt;# 有许多种方式用来赋值&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;# 这样可以&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# 更推荐这样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="c"&gt;# 这样可行，但是很怪&lt;/span&gt;

&lt;span class="c"&gt;#我们还可以使用强制转型&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 1&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;5&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 循环&lt;/span&gt;

&lt;span class="c"&gt;# for 循环语句&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# while 循环&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 记住，在 R 语言中 for / while 循环都很慢&lt;/span&gt;
&lt;span class="c"&gt;# 建议使用 apply()（我们一会介绍）来错做一串数据（比如一列或者一行数据）&lt;/span&gt;

&lt;span class="c"&gt;# IF/ELSE&lt;/span&gt;

&lt;span class="c"&gt;# 再来看这些优雅的标准&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Noooo! This is blatantly illogical!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# [1] &amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 函数&lt;/span&gt;

&lt;span class="c"&gt;# 定义如下&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#add in a bit of (controlled) noise&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 和其他 R 语言函数一样调用&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 5±ε. 使用 set.seed(2716057) 后， jiggle(5)==5.005043&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 数据容器：vectors, matrices, data frames, and arrays&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 单维度&lt;/span&gt;
&lt;span class="c"&gt;# 你可以将目前我们学习到的任何类型矢量化，只要它们拥有相同的类型&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="c"&gt;#  8  9 10 11&lt;/span&gt;
&lt;span class="c"&gt;# 矢量的类型是这一组数据元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# If you vectorize items of different classes, weird coercions happen&lt;/span&gt;
&lt;span class="c"&gt;#如果你强制的将不同类型数值矢量化，会出现特殊值&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;dog&amp;quot;  &amp;quot;TRUE&amp;quot; &amp;quot;4&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#我们这样来取内部数据，（R 的下标索引顺序 1 开始）&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="c"&gt;# 我们可以根据条件查找特定数据&lt;/span&gt;
&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 3&lt;/span&gt;
&lt;span class="c"&gt;# 抓取矢量中第一个和最后一个字符&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="c"&gt;#如果下标溢出或不存会得到 NA&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# NA&lt;/span&gt;
&lt;span class="c"&gt;# 你可以使用 length() 获取矢量的长度&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;

&lt;span class="c"&gt;# 你可以直接操作矢量或者矢量的子集&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c"&gt;# 16 20 24 28&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="c"&gt;# 25 30&lt;/span&gt;
&lt;span class="c"&gt;# 这里有许多内置的函数，来表现向量&lt;/span&gt;
&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 9.5&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1.666667&lt;/span&gt;
&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 1.290994&lt;/span&gt;
&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 38&lt;/span&gt;

&lt;span class="c"&gt;# 二维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;#你可以为同样类型的变量建立矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# 和 vector 不一样的是，一个矩阵的类型真的是 「matrix」，而不是内部元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# =&amp;gt; &amp;quot;matrix&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 访问第一行的字符&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="c"&gt;# 操作第一行数据&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 3 6 9&lt;/span&gt;
&lt;span class="c"&gt;# 访问一个特定数据&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c"&gt;# 6&lt;/span&gt;
&lt;span class="c"&gt;# 转置整个矩阵（译者注：变成 2 行 3 列）&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    4    5    6&lt;/span&gt;

&lt;span class="c"&gt;# 使用 cbind() 函数把两个矩阵按列合并，形成新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,] &amp;quot;1&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [2,] &amp;quot;2&amp;quot;  &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [3,] &amp;quot;3&amp;quot;  &amp;quot;bird&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [4,] &amp;quot;4&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# matrix&lt;/span&gt;
&lt;span class="c"&gt;# Again, note what happened!&lt;/span&gt;
&lt;span class="c"&gt;# 注意&lt;/span&gt;
&lt;span class="c"&gt;# 因为矩阵内部元素必须包含同样的类型&lt;/span&gt;
&lt;span class="c"&gt;# 所以现在每一个元素都转化成字符串&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="c"&gt;# 按行合并两个向量，建立新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    4    5&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    6    7    0    4&lt;/span&gt;
&lt;span class="c"&gt;# 哈哈，数据类型都一样的，没有发生强制转换，生活真美好&lt;/span&gt;

&lt;span class="c"&gt;# 二维(不同的元素类型)&lt;/span&gt;

&lt;span class="c"&gt;# 利用 data frame 可以将不同类型数据放在一起&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;species&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 给数据列命名&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;data.frame&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#   number species&lt;/span&gt;
&lt;span class="c"&gt;# 1      5     dog&lt;/span&gt;
&lt;span class="c"&gt;# 2      2     cat&lt;/span&gt;
&lt;span class="c"&gt;# 3      1    bird&lt;/span&gt;
&lt;span class="c"&gt;# 4      4     dog&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;factor&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# data.frame() 会将字符向量转换为 factor 向量&lt;/span&gt;

&lt;span class="c"&gt;# 有很多精妙的方法来获取 data frame 的子数据集&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;

&lt;span class="c"&gt;# 多维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;# 使用 arry 创造一个 n 维的表格&lt;/span&gt;
&lt;span class="c"&gt;# You can make a two-dimensional table (sort of like a matrix)&lt;/span&gt;
&lt;span class="c"&gt;# 你可以建立一个 2 维表格（有点像矩阵）&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4    8    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5    9    6&lt;/span&gt;
&lt;span class="c"&gt;#你也可以利用数组建立一个三维的矩阵&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;847&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# , , 1&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    2    8&lt;/span&gt;
&lt;span class="c"&gt;# [2,]  300    9&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    4    0&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# , , 2&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    5   66&lt;/span&gt;
&lt;span class="c"&gt;# [2,]   60    7&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    0  847&lt;/span&gt;

&lt;span class="c"&gt;#列表（多维的，不同类型的）&lt;/span&gt;

&lt;span class="c"&gt;# R语言有列表的形式&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# 随机&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;

&lt;span class="c"&gt;# You can get items in the list like so&lt;/span&gt;
&lt;span class="c"&gt;# 你可以这样获得列表的元素&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="c"&gt;# You can subset list items like vectors&lt;/span&gt;
&lt;span class="c"&gt;# 你也可以和矢量一样获取他们的子集&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# apply()函数家族&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 还记得 mat 么？&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# Use apply(X, MARGIN, FUN) to apply function FUN to a matrix X&lt;/span&gt;
&lt;span class="c"&gt;# 使用(X, MARGIN, FUN)将函数 FUN 应用到矩阵 X 的行 (MAR = 1) 或者 列 (MAR = 2)&lt;/span&gt;
&lt;span class="c"&gt;# That is, R does FUN to each row (or column) of X, much faster than a&lt;/span&gt;
&lt;span class="c"&gt;# R 在 X 的每一行/列使用 FUN，比循环要快很多&lt;/span&gt;
&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    3   15&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    7   19&lt;/span&gt;
&lt;span class="c"&gt;# [3,]   11   23&lt;/span&gt;
&lt;span class="c"&gt;# 还有其他家族函数 ?lapply, ?sapply&lt;/span&gt;

&lt;span class="c"&gt;# 不要被吓到，虽然许多人在此都被搞混&lt;/span&gt;
&lt;span class="c"&gt;# plyr 程序包的作用是用来改进 apply() 函数家族&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;plyr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 载入数据&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# &amp;quot;pets.csv&amp;quot; 是网上的一个文本&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://learnxinyminutes.com/docs/pets.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 前两行&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 最后一行&lt;/span&gt;

&lt;span class="c"&gt;# 以 .csv 格式来保存数据集或者矩阵&lt;/span&gt;
&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pets2.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 保存到新的文件 pets2.csv&lt;/span&gt;
&lt;span class="c"&gt;# set working directory with setwd(), look it up with getwd()&lt;/span&gt;
&lt;span class="c"&gt;# 使用 setwd() 改变工作目录，使用 getwd() 查看当前工作目录&lt;/span&gt;

&lt;span class="c"&gt;# 尝试使用 ?read.csv 和 ?write.csv 来查看更多信息&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 画图&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 散点图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fake data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：横轴 list1$time，纵轴 wlist1$price，标题 fake data&lt;/span&gt;
&lt;span class="c"&gt;# 回归图&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：线性模型，数据集为list1，以价格对时间做相关分析模型&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="c"&gt;# 拟合结果&lt;/span&gt;
&lt;span class="c"&gt;# 将拟合结果展示在图上，颜色设为红色&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 也可以获取各种各样漂亮的分析图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 直方图&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpois&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;thistle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：统计频数直方图&lt;/span&gt;

&lt;span class="c"&gt;# 柱状图&lt;/span&gt;
&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# 可以尝试着使用 ggplot2 程序包来美化图片&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ggplot2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;获得 R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;a href="http://www.r-project.org/"&gt;http://www.r-project.org/&lt;/a&gt; 获得安装包和图形化界面&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rstudio.com/ide/"&gt;RStudio&lt;/a&gt; 是另一个图形化界面&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="译文"></category></entry><entry><title>读《大规模Web服务开发技术》</title><link href="/2013/06/web-technology/" rel="alternate"></link><updated>2013-06-29T00:17:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-06-29:2013/06/web-technology/</id><summary type="html">&lt;p&gt;年前看了这本书《大规模Web服务开发技术》，当时给的评价是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法，
在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。&lt;/p&gt;
&lt;p&gt;&lt;img alt="大规模Web服务开发技术" src="http://img3.douban.com/lpic/s6818566.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《大规模Web服务开发技术》@豆瓣： &lt;a href="http://book.douban.com/subject/6758780/"&gt;http://book.douban.com/subject/6758780/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;规模&lt;/h2&gt;
&lt;p&gt;小规模 / 大规模 /
超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便&lt;/p&gt;
&lt;h2&gt;内存、磁盘、负载&lt;/h2&gt;
&lt;p&gt;内存快，磁盘慢，ＩＯ 速度的差异&lt;/p&gt;
&lt;h2&gt;数据分布式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用局部分布式，热数据独立出来。&lt;/li&gt;
&lt;li&gt;Partition 分布式，按模块分割数据。&lt;/li&gt;
&lt;li&gt;按 ID 分割，比如 a-g, h-z&lt;/li&gt;
&lt;li&gt;按访问类型，一般请求 / feed / 图像（#毒药计划的原理）&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;索引&lt;/h2&gt;
&lt;p&gt;索引，B 树（是一颗平衡树，log n 速度查找，顺序读取，插入，删除） / Ｂ+
树（节点只保存子节点指针，叶子保存数据）&lt;/p&gt;
&lt;p&gt;使用 MySQL 索引的语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where&lt;/li&gt;
&lt;li&gt;order by&lt;/li&gt;
&lt;li&gt;group by&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个查询时候要使用复合索引，每次查询只会走单一一个索引。&lt;/p&gt;
&lt;h2&gt;算法&lt;/h2&gt;
&lt;p&gt;感受算法 log n, 线性的差距。&lt;/p&gt;
&lt;h3&gt;字符匹配&lt;/h3&gt;
&lt;p&gt;正则到 Trie&lt;/p&gt;
&lt;h3&gt;贝叶斯匹配&lt;/h3&gt;
&lt;h3&gt;全文搜索&lt;/h3&gt;
&lt;p&gt;逆向索引&lt;/p&gt;
&lt;h2&gt;基础设施&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云 / 自己构建&lt;/li&gt;
&lt;li&gt;评估服务器性能极限&lt;/li&gt;
&lt;li&gt;负载跟踪：平均负载 / 内存 / CPU 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;冗余&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web 服务器冗余&lt;/li&gt;
&lt;li&gt;DB 冗余&lt;/li&gt;
&lt;li&gt;存储系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;维稳&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能增加 / 内存泄漏&lt;/li&gt;
&lt;li&gt;特定 URL 的地雷，资源循环&lt;/li&gt;
&lt;li&gt;访问暴增&lt;/li&gt;
&lt;li&gt;数据量增加&lt;/li&gt;
&lt;li&gt;外部 API 稳定（新浪等）&lt;/li&gt;
&lt;li&gt;硬件故障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;对策&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保持余量， 在 70% 极限内运行&lt;/li&gt;
&lt;li&gt;异常时候的自动重启 / 自动中止耗时查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;虚拟化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解除物理限制&lt;/li&gt;
&lt;li&gt;软件层面主机控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 寻找瓶颈&lt;/h2&gt;
&lt;p&gt;调优的意义：「找出负载原因并去除」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看平均负载&lt;/li&gt;
&lt;li&gt;top / uptime&lt;/li&gt;
&lt;li&gt;确认 CPU、 I/O 瓶颈&lt;/li&gt;
&lt;li&gt;sar / vmstat 检查交换区状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 负载&lt;/h2&gt;
&lt;p&gt;负载的含义：等待 CPU / IO 资源的进程数。 知道了负载还要知道如何看 CPU
还是 IO 负载。&lt;/p&gt;
&lt;h2&gt;番外：sar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sar-P ALL&lt;/li&gt;
&lt;li&gt;sar -u&lt;/li&gt;
&lt;li&gt;sar -q&lt;/li&gt;
&lt;li&gt;sar -r&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外：Henata 的选择&lt;/h2&gt;
&lt;p&gt;队列系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/TheSchwartz"&gt;TheSchwartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gearman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DB 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key Value： memcached / &lt;a href="/TokyoTyrant"&gt;TokyoTyrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MyISAM / InnoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MogileFS&lt;/li&gt;
&lt;li&gt;NFS&lt;/li&gt;
&lt;li&gt;WebDAV&lt;/li&gt;
&lt;li&gt;DRBD&lt;/li&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓存系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squid&lt;/li&gt;
&lt;li&gt;Vanish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;/ul&gt;</summary><category term="读书笔记"></category></entry><entry><title>服务器 Push 技术</title><link href="/2012/05/comet/" rel="alternate"></link><updated>2012-05-30T10:40:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-05-30:2012/05/comet/</id><summary type="html">&lt;p&gt;服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。&lt;/p&gt;
&lt;h2&gt;实现方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Comet&lt;/li&gt;
&lt;li&gt;Ajax 轮询&lt;/li&gt;
&lt;li&gt;iframe / htmlfile&lt;/li&gt;
&lt;li&gt;script tag （不中断的连续请求）&lt;/li&gt;
&lt;li&gt;Flash 通讯&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。
在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。&lt;/p&gt;
&lt;p&gt;ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/"&gt;Comet：基于 HTTP 长连接的「服务器推」技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://socket.io/#browser-support"&gt;Socket.IO Supported transports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;浏览器支持情况&lt;/h3&gt;
&lt;p&gt;WebSocket 属于 HTML5 规范，需要「先进」浏览器支持，
Flash 通讯需要浏览器安装 Flash 插件，其他方式都可以适应常见浏览器。&lt;/p&gt;
&lt;p&gt;参考连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/HTTP持久链接"&gt;HTTP持久链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Comet (programming)](http://en.wikipedia.org/wiki/Comet_(programming))&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/tianzhiliang/archive/2011/06/13/2079564.html"&gt;一个误解: 单个服务器程序可承受最大连接数「理论」上是「65535」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zeitoun.net/articles/comet_and_php/start"&gt;How to implement COMET with PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;各大网站连接情况&lt;/h2&gt;
&lt;p&gt;可以通过 url 请求来揣测一些东西，比如说，它们没有用 WebSocket，
否则 FireBug 是无法监测的，WebSocket 可以双向通讯。&lt;/p&gt;
&lt;h3&gt;新浪微博&lt;/h3&gt;
&lt;p&gt;未读信息链接： &lt;code&gt;http://rm.api.weibo.com/remind/unread_count.json?target=api&amp;amp;_pid=10001&amp;amp;count=2&amp;amp;source=3818214747&amp;amp;callback=STK_133834300664875&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;未读信息大约每20秒触发一次，像是 Ajax 轮询。&lt;/p&gt;
&lt;p&gt;IM 长连接：
&lt;code&gt;http://4.46.web1.im.weibo.com/im?jsonp=parent.org.cometd.script._callback5&amp;amp;message=%5B%7B%22channel%22%3A%22%2Fmeta%2Fconnect%22%2C%22connectionType%22%3A%22callback-polling%22%2C%22id%22%3A6%2C%22clientId%22%3A%22b02qp9qw9cgiuxxyn3%22%7D%5D&amp;amp;1338343019008&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看出新浪在使用 JSONP 跨域做 IM 长连接，FireBug 中也始终有链接请求，
看上去像 Script Tag 请求方式。&lt;/p&gt;
&lt;h3&gt;知乎&lt;/h3&gt;
&lt;p&gt;请求链接：
&lt;code&gt;http://comet.zhihu.com/update?loc=http%3A%2F%2Fwww.zhihu.com%2F&amp;amp;channel=13781e6817833300f0a70f19&amp;amp;callback=zhp13781e6a6f22349b9865b47c8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;依然能在 FireBug 中看到请求地址，说明客户端请求数据还是走 HTTP 方式，
并且会出现 update 动作链接一直出于请求状态，猜测知乎仍然使用 Script Tag 请求。&lt;/p&gt;
&lt;h2&gt;框架支持&lt;/h2&gt;
&lt;h3&gt;orbited2&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://labs.gameclosure.com/orbited2/"&gt;http://labs.gameclosure.com/orbited2/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨浏览器&lt;/li&gt;
&lt;li&gt;容易集成：IRC / XMPP / ActiveMQ / RabbitMQ&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;StreamHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.stream-hub.com/"&gt;http://www.stream-hub.com/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;免费版仅支持 10 个在线&lt;/li&gt;
&lt;li&gt;支持 Java / .net / iPhone&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;socket.io&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://socket.io/"&gt;http://socket.io/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;推送方式：&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;li&gt;Adobe® Flash® Socket&lt;/li&gt;
&lt;li&gt;AJAX long polling&lt;/li&gt;
&lt;li&gt;AJAX multipart streaming&lt;/li&gt;
&lt;li&gt;Forever Iframe&lt;/li&gt;
&lt;li&gt;JSONP Polling&lt;/li&gt;
&lt;li&gt;支持浏览器：&lt;/li&gt;
&lt;li&gt;Internet Explorer 5.5+&lt;/li&gt;
&lt;li&gt;Safari 3+&lt;/li&gt;
&lt;li&gt;Google Chrome 4+&lt;/li&gt;
&lt;li&gt;Firefox 3+&lt;/li&gt;
&lt;li&gt;Opera 10.61+&lt;/li&gt;
&lt;li&gt;iPhone Safari&lt;/li&gt;
&lt;li&gt;iPad Safari&lt;/li&gt;
&lt;li&gt;Android WebKit&lt;/li&gt;
&lt;li&gt;WebOs WebKit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sockjs-client&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sockjs/sockjs-client"&gt;https://github.com/sockjs/sockjs-client&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Node.js / Erlang / Lua / Python-Tornado&lt;/li&gt;
&lt;li&gt;跨浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实战 Socket.io&lt;/h2&gt;
&lt;p&gt;考虑到上述候选框架的使用场景，这里选择 Socket.IO 作为 Comet 框架。&lt;/p&gt;
&lt;h3&gt;尴尬的 Pylons&lt;/h3&gt;
&lt;p&gt;Pylons 和 Comet 配合有问题，问题处在标准 WSGI 是非异步的。
（看邮件列表里面，似乎新的标准准备支持）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/3090118"&gt;http://stackoverflow.com/a/3090118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mail.python.org/pipermail/web-sig/2008-July/003545.html"&gt;http://mail.python.org/pipermail/web-sig/2008-July/003545.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypi.python.org/pypi/Spawning/"&gt;Spawning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的话，我就直接选择使用 Node.JS 做 Comet 服务器，Nginx 负责转发。&lt;/p&gt;
&lt;h3&gt;简单Demo&lt;/h3&gt;
&lt;p&gt;node.js 代码&lt;/p&gt;
&lt;p&gt;```js app.js
/&lt;em&gt; global __dirname, console &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;var app = require('http').createServer(handler),
    io = require('socket.io').listen(app),
    fs = require('fs');&lt;/p&gt;
&lt;p&gt;app.listen(8080);&lt;/p&gt;
&lt;p&gt;function handler(req, res) {
    fs.readFile(__dirname + '/index.html',
        function (err, data) {
            if (err) {
                res.writeHead(500);
                return res.end('Error loading index.html');
            }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;io.sockets.on('connection', function (socket) {
    'use strict';
    socket.emit('news', {hello: 'world, for everyone!'});
    socket.on('my other event', function (data) {
        console.log(data);
    });
    socket.on('private message', function (from, msg) {
        console.log('I received a private message by ', from, ' saying ', msg);
    });
});&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;页面代码&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;index.html&lt;/span&gt; 
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="na"&gt;-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Socket.io&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/socket.io/socket.io.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io.connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;socket.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;socket.emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my other event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接成功之后，在浏览器控制台里面，可以使用 &lt;code&gt;socket.emit('my other event', {biu: 'biu'});&lt;/code&gt;
向服务器发送消息。&lt;/p&gt;
&lt;p&gt;服务器也可以通过 &lt;code&gt;socket.emit()&lt;/code&gt; 来向客户端推送消息。&lt;/p&gt;
&lt;p&gt;私有信息发送，使用 &lt;code&gt;socket.emit('private message', 'James', {some: 'message'});&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;跨平台&lt;/h3&gt;
&lt;p&gt;实测看来，在 IE8 下面， Socket.io 会降级使用 &lt;code&gt;htmlfile&lt;/code&gt; 来实现 Comet。&lt;/p&gt;
&lt;p&gt;而 Firefox 中会有 &lt;code&gt;websocket / htmlfile / xhr-polling / jsonp-polling&lt;/code&gt; 依次备选，
首选 websocket。&lt;/p&gt;
&lt;h3&gt;安全性&lt;/h3&gt;
&lt;p&gt;问题：提交数据的身份认证过程，以前在后台由 Web 框架自动完成，而现在流程是
Socket.IO -&amp;gt; RabbitMQ -&amp;gt; Web App，身份验证的复杂度增加了。&lt;/p&gt;
&lt;p&gt;思路：Socket.IO 使用 Nginx 代理转发，从而保留同一域名下面的 cookie 信息，
这样能够提交到 Socket.IO 服务器，每次 RabbitMQ Message 都记录 cookie 信息，
后台从 RabbitMQ 读取信息时候，再进行认证。&lt;/p&gt;
&lt;p&gt;实际操作：由于 Comet 中的数据流仅负责推送，客户端继续使用原始 POST
方式发送数据到服务器，所以暂时不会产生身份认证问题。&lt;/p&gt;
&lt;h2&gt;Node AMPQ 驱动&lt;/h2&gt;
&lt;p&gt;Socket.IO 提供了一个通用的 Comet 解决方案，下面就需要点润滑剂，将整个数据流跑通。
消息队列 RabbitMQ 正好适合用来做这个。&lt;/p&gt;
&lt;p&gt;Rabbit 官网提到了一个套件 &lt;a href="https://github.com/squaremo/rabbit.js"&gt;rabbit.js&lt;/a&gt; 。
遗憾的是这个库是混合了 RabbitMQ 和 Node.JS，提供了一个封装好的 Node.JS 库，
而我想要的仅仅是一个 AMPQ 协议驱动。&lt;a href="https://github.com/postwait/node-amqp/blob/master/amqp.js"&gt;node-amqp&lt;/a&gt; 则是我们需要的驱动。&lt;/p&gt;
&lt;h3&gt;Demo&lt;/h3&gt;
&lt;p&gt;服务器接收者脚本：&lt;/p&gt;
&lt;p&gt;``` js app-amqp.js
/&lt;em&gt; global __dirname, console &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;var conn = require('amqp').createConnection({ url: 'amqp://localhost'});&lt;/p&gt;
&lt;p&gt;console.log('socket works');
conn.on('ready', function() {
    console.log('conn ready');
    conn.queue('socket.io', {passive: true}, function(queue){
        queue.subscribe(function (json, headers, deliveryInfo) {
            console.log('#json:')
            view(json);
            console.log('#headers:')
            view(headers);
            console.log('#deliveryInfo:')
            view(deliveryInfo);
        });
    });
});&lt;/p&gt;
&lt;p&gt;conn.on('error', function() {
    console.error('error');
});&lt;/p&gt;
&lt;p&gt;function view(obj) {
    for (var i in obj) {
        if(obj.hasOwnProperty(i)) {
            console.log(i + ': ' + obj[i]);
        }
    }
}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;用&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;写的发送者脚本：&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;producter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="cp"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="cp"&gt;#! /usr/bin/env python2&lt;/span&gt;

&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;比如&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;中文信息&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;publish_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;publish_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;RabbitMQ&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;publish_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                              &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;content_encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;delivery_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;publish_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                              &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;content_encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;delivery_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;node ./app-amqp.js&lt;/code&gt; 运行 Node.JS 服务器，然后运行 &lt;code&gt;producter.py&lt;/code&gt; 产生
RabbitMQ Message，我使用的数据格式是序列化的 JSON 字串，
还有 &lt;code&gt;JSON, Thrift, Protocol Buffers, MessagePack&lt;/code&gt; 这些格式可供选择。运行结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#json:
data: &amp;quot;text 1&amp;quot;
UnicodeEncodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t encode characters in position 0-3: ordinal not icontentType: text/plain
#headers:
#deliveryInfo:
contentType: text/plain
contentEncoding: utf-8
deliveryMode: 1
queue: socket.io
deliveryTag: 19
redelivered: false
exchange:
routingKey: socket.io
consumerTag: node-amqp-10880-0.06487216474488378
#json:
比如: 中文信息
some: Message
no: 1
#headers:
#deliveryInfo:
contentType: application/json
contentEncoding: utf-8
deliveryMode: 1
queue: socket.io
deliveryTag: 20
redelivered: false
exchange:
routingKey: socket.io
consumerTag: node-amqp-10880-0.06487216474488378
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;里面有两个 Message，发送数据格式为 &lt;code&gt;text/plain&lt;/code&gt; 和 &lt;code&gt;application/json&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pika.github.com/"&gt;Pika Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Socket.IO + RabbitMQ&lt;/h2&gt;
&lt;p&gt;最后提供 Socket.IO + RabbitMQ 的完整 Demo，客户端会实时接受到来自消息发送者的消息。&lt;/p&gt;
&lt;p&gt;``` js app-amqp.socket.js
/&lt;em&gt; global __dirname, console &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;var app = require('http').createServer(handler),
    io = require('socket.io').listen(app),
    fs = require('fs');&lt;/p&gt;
&lt;p&gt;app.listen(8080);&lt;/p&gt;
&lt;p&gt;function handler(req, res) {
    fs.readFile(__dirname + '/index.html',
        function (err, data) {
            if (err) {
                res.writeHead(500);
                return res.end('Error loading index.html');
            }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;io.sockets.on('connection', function (socket) {
    console.log('io ready');&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amqp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createConnection&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;amqp://localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conn ready&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deliveryInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deliveryInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deliveryInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deliveryInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;});&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;在运行&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;producter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="err"&gt;后，&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;脚本持续产生&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="err"&gt;到&lt;/span&gt; &lt;span class="n"&gt;RabbitMQ&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="err"&gt;订阅读取&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="err"&gt;并推送到浏览器端。&lt;/span&gt;
&lt;span class="err"&gt;浏览器可以在&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt; &lt;span class="err"&gt;里面看到日志：&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;比如&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;中文信息&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，我们可以完成 WebApp -&amp;gt; RabbitMQ -&amp;gt; Socket.IO -&amp;gt; Browser 的实时推送。&lt;/p&gt;</summary><category term="Comet"></category><category term="RabbitMQ"></category><category term="Socket.IO"></category><category term="Node.JS"></category><category term="AMPQ"></category></entry><entry><title>再读《重构》</title><link href="/2012/02/refactory/" rel="alternate"></link><updated>2012-02-05T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-02-05:2012/02/refactory/</id><summary type="html">&lt;p&gt;Martin Fowler 的《&lt;a href="http://book.douban.com/subject/1229923/"&gt;重构-
改善既有代码的设计&lt;/a&gt;》这本书，是我大学老师推荐给我的。
当时我在撰写代码过程中，发现当代码量到某个数量级时候（1000+行）， 就会逐渐失去对代码的控制能力。昆哥推荐了两本书《&lt;a href="http://
book.douban.com/subject/1792387/"&gt;UML和模式应用&lt;/a&gt;》和《重构》这本书。&lt;/p&gt;
&lt;p&gt;&lt;img alt="refactory" src="http://img1.douban.com/mpic/s1669771.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这本书是2年前购买的，可惜以我当时的代码感知和撰写能力，看起来颇为吃力。 半途就看得云里雾里而中断了。最近我又重新拾起这本书，
将书中所写的境况与我这两年多来遇到的问题相互印证，才感受到这本经典的力量。&lt;/p&gt;
&lt;p&gt;Martin 其人：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ThoughtWorks&lt;/span&gt;&lt;span class="err"&gt;的首席科学家，当今世界软件开发领域最具影响力的五位大师之一。&lt;/span&gt;
&lt;span class="err"&gt;他在&lt;/span&gt;&lt;span class="n"&gt;UML&lt;/span&gt;&lt;span class="err"&gt;推广普及、领域建模、企业应用开发和敏捷方法等方面建树卓著，被称为软件开发的教父。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大学时候有段时间我对 Martin 的敏捷非常痴迷。现在对技术的选择没以前那么冲动了， 但是毫不妨碍我对 Martin 的敬仰之情。&lt;/p&gt;
&lt;h2&gt;1. 重构原则&lt;/h2&gt;
&lt;h3&gt;1.1. 重构的定义&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;对软件内部结构的一种调整，目的是在不改变&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;软件之可察行为&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;前提下，提高其可理解性，降低其修改成本。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重构就是在代码写好之后改进它的设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构和添加新功能并不冲突，但是当开发者身份在两者之间切换时候，不能混淆在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.2. 重构的意义&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优秀设计的根本是：消除重复部分！（DRY = Don't repeat yourself）&lt;/li&gt;
&lt;li&gt;重构让代码更清晰，更容易理解&lt;/li&gt;
&lt;li&gt;清晰的代码可以更方便的找到bug，重构可以写出更强健的代码&lt;/li&gt;
&lt;li&gt;良好的设计可以在长远时间上提高开发速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.3. 重构的时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随时进行重构（在我看来，重构更是一种开发的习惯）&lt;/li&gt;
&lt;li&gt;事不过三，代码重复不要超过三次（否则就要"抽"出来）&lt;/li&gt;
&lt;li&gt;添加功能时候并一一重构（个人理解是，添加新功能之前，分析并重构，从而更方便添加新功能）&lt;/li&gt;
&lt;li&gt;修补错误时&lt;/li&gt;
&lt;li&gt;code review时&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.4. 重构和开发进度&lt;/h3&gt;
&lt;p&gt;重构的意义之一也是提高开发进度。杀手锏是"不要告诉经理"。&lt;/p&gt;
&lt;h3&gt;1.5. 重构的难题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据层（数据模型）的变更压力&lt;/li&gt;
&lt;li&gt;修改接口&lt;/li&gt;
&lt;li&gt;那些难以通过重构改变的设计改动&lt;/li&gt;
&lt;li&gt;代码不能运行&lt;/li&gt;
&lt;li&gt;项目期限压力 dead line&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.6. 重构与设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编程不是机械的开发，（软件开发是艺术行为！）&lt;/li&gt;
&lt;li&gt;设计和重构的平衡（预先设计的难度和重构灵活性的平衡）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.7. 重构与性能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重构确实会在短期内降低代码执行效率，但优化阶段是可以调整的，而且调整会更容易。&lt;/li&gt;
&lt;li&gt;提前优化是万恶之源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.8. 那些Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重复的代码（这才是真正万恶之源，鄙视一切Ctrl+C/P）&lt;/li&gt;
&lt;li&gt;过长函数，会导致责任不明确/难以切割/难以理解等一系列问题&lt;/li&gt;
&lt;li&gt;过大类，职责不明确，垃圾滋生地&lt;/li&gt;
&lt;li&gt;过长参数列（面向对象不是说说而已）&lt;/li&gt;
&lt;li&gt;发散式变化，一个类会响应多种需求而被修改&lt;/li&gt;
&lt;li&gt;散弹式修改（其实就是没有封装变化处，由于一个需求，多处需要被修改）&lt;/li&gt;
&lt;li&gt;依赖情节（一个类对其他类过多的依赖）&lt;/li&gt;
&lt;li&gt;数据泥团（如果数据有意义，就将结构数据变成对象）&lt;/li&gt;
&lt;li&gt;type code，使用Class替代&lt;/li&gt;
&lt;li&gt;switch，少用，考虑多态&lt;/li&gt;
&lt;li&gt;过多平行的类，使用类继承并联起来&lt;/li&gt;
&lt;li&gt;冗余类，去除它&lt;/li&gt;
&lt;li&gt;夸夸其谈的未来性（Matin的文字，侯俊杰的翻译真是…出彩…）&lt;/li&gt;
&lt;li&gt;临时值域，封装它&lt;/li&gt;
&lt;li&gt;过度耦合的消息链，使用真正需要的函数和对象，而不要依赖于消息链&lt;/li&gt;
&lt;li&gt;过度的deleate&lt;/li&gt;
&lt;li&gt;过度使用其他类private值域&lt;/li&gt;
&lt;li&gt;重复作用的类&lt;/li&gt;
&lt;li&gt;不完美的类库，（类库老了，使用者也没办法阿）&lt;/li&gt;
&lt;li&gt;纯数据类（类需要行为）&lt;/li&gt;
&lt;li&gt;不纯粹的继承（拒绝父类的接口的类）&lt;/li&gt;
&lt;li&gt;过多注释，注释多了，就说明代码不清楚了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.9. 从测试开始&lt;/h3&gt;
&lt;p&gt;无测试，无重构，只依赖手工测试，重构时候人会崩溃的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构的保真就是自动化测试（如果真的要无聊的手工测试，我也不反对）&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;功能测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.10. Kent Back说&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如果我纯粹为今天工作，明天我将完全无法工作。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;间接层的价值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许逻辑共享  &lt;/li&gt;
&lt;li&gt;分开解释"意图"和"实现"  &lt;/li&gt;
&lt;li&gt;将变化加以隔离  &lt;/li&gt;
&lt;li&gt;将条件逻辑加以编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机科学是这样一门学科：它相信所有问题都可以通过一个间接层来解决。 --Dennis DeBruler&lt;/p&gt;
&lt;p&gt;我相信，撰写代码时候不仅仅考虑当下功能，要考虑到有可能出现的情况， 在可能的平衡下面，为将来的扩展做好准备。（也许不仅仅是自己的明天，
还要考虑团队成员的今天工作内容）&lt;/p&gt;
&lt;h2&gt;2. 重构名录&lt;/h2&gt;
&lt;h3&gt;2.1. 重新组织函数&lt;/h3&gt;
&lt;p&gt;Extract Method（提炼函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将一段独立的，不依赖上下文的代码组织并独立出来。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inline Method（将函数内联化）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当函数内部代码简短而容易理解时候，去除这个非必要的间接层。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inline Temp（将临时变量内联化）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;去除只被赋值一次的临时变量。（当有意义时候，应该保留）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Temp with Query（以查询取代临时变量）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将临时变量提取到一个独立函数，并将原来变量引用替换为函数调用。&lt;/span&gt; &lt;span class="err"&gt;（我还是担心性能的问题，另外将临时变量限定在一个段落&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;中，可以避免额外的引用）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Explainning Variable（引入解释性变量）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将复杂表达式的结果放入临时变量，并用变量名来解释表达式用途。&lt;/span&gt; &lt;span class="err"&gt;（自注释代码的表现）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Split Temporary Variable（剖析临时变量）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;除了循环变量和临时集合变量，临时变量赋值不能超过一次。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove Assignments to Parameters（移除对参数的赋值动作）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;不对函数参数进行赋值动作，如果要赋值，创建一个新的临时变量。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Method with Method Object（以函数对象取代函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;把函数变成对象，再把临时变量变成对象值域。该方法在分解函数时候常用。&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt; &lt;span class="err"&gt;对小型函数特别迷恋，我认为这个方法更应该用在有逻辑意义的方法上面）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Substitute Algorithm（替换算法）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;用更清晰的算法。&lt;/span&gt; &lt;span class="err"&gt;（码农都知道）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.2. 在对象之间搬移特性&lt;/h3&gt;
&lt;p&gt;（面向对象编程原则之一就是职责归属，搬移其实也就意味着职责重新规划）&lt;/p&gt;
&lt;p&gt;Move Method（搬移函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将函数移动到被最多次调用的类里面去。&lt;/span&gt; &lt;span class="err"&gt;（往往在逻辑意义上，这个函数就应该归属于这个类）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Move Field（搬移值域）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将值域移动到被最多次调用的类里面去。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extract Class（提炼类）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将开发过程中逐渐变得臃肿的类拆分成数个类，形成清楚的抽象，明确的职责。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inline Class（将类内联化）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将不再担任足够职责的类搬到另外一个类中，并移除这个原始类。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hide Delegate（隐藏委托关系）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将直接调用变成间接，在中间添加一层，从而从容面对变更，隔离变化。&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;哪里变化，封装哪里&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;这是设计模式的一个经典原则）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove Middle Man（移除中间人）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;Hide&lt;/span&gt; &lt;span class="n"&gt;Delegate&lt;/span&gt;&lt;span class="err"&gt;相反，移除做了过多简单委托的类。&lt;/span&gt; &lt;span class="err"&gt;（应该&lt;/span&gt;&lt;span class="n"&gt;Hide&lt;/span&gt; &lt;span class="n"&gt;Delegate&lt;/span&gt;&lt;span class="err"&gt;需要加入成本，多维护一层，这需要控制一种平衡）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Foreign Method（引入外加函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当类无法进行修改时候，使用静态函数接受这种类型的类实例，&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Local Extenstion（引入本地扩展）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用子类继承&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="err"&gt;类来实现额外的函数。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.3. 重新组织数据&lt;/h3&gt;
&lt;p&gt;Self Encapsulate Field（自封装值域）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用&lt;/span&gt;&lt;span class="n"&gt;getter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt; &lt;span class="err"&gt;（个人觉得这样很繁琐，&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="err"&gt;中的属性方式处理的不错）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Date Value with Object （以对象取代数据值）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当数据项有额外的数据和行为时候，将它变成一个类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change Value to Reference（将实值对象改为引用对象）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;有一些类型，比如日期、星期，不需要保存太多副本。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change Reference to Value（将引用对象改为实值对象）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;和楼上相反的情况，引用会带来复杂的内存分配，在分布式系统中，实值对象特别有用。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Array with Object（以对象取代数组）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;不应该将不同的元素存放到数组中，应该使用值域。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Duplicate Observed Data（复制被监视数据）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;通过观察者模式，将业务数据和&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="err"&gt;数据进行同步控制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change Unidirectional Association to Bidirectional（将单向关联改为双向）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用双向连接，从而能让两个类能互相使用对方特性。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change Bidirectional Assicuation to Unidirectional（将双向关联改为单向）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当一个类不再需要另外一个类特性时候作修改。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Magic Number with Symbolic Constant（以符号常量/字面常量取代魔法数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用有意义的名称，比如&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gravity&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Encapsulate Field（封装值域）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用&lt;/span&gt;&lt;span class="n"&gt;getter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Encapsulate Collection（封装集群）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;避免直接修改容器对象，而是封装出类方法来修改。将变化控制在既有方法内。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Record with Data Class（以数据类取代记录）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将传统编程中的结构体转换为数据类。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Type Code with Class（以类别取代型别码）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用类型集合类来替换型别码。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Type Code with Subclass（以子类取代型别码）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用多态来替换型别码，发挥面向对象编程的优势。&lt;/span&gt; &lt;span class="err"&gt;（小心处理&lt;/span&gt;&lt;span class="n"&gt;ORM&lt;/span&gt;&lt;span class="err"&gt;映射）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Type Code with State/Strategy（以State/Strategy取代型别码）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Strategy&lt;/span&gt;&lt;span class="err"&gt;模式来因对&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="err"&gt;会发生变化的情况。&lt;/span&gt; &lt;span class="err"&gt;将状态类作为父类，再进行继承。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Subclass with Fields（以值域取代子类）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当子类的差异仅仅体现在返回常量数据的函数上时候，进行这样的替换。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.4. 简化条件表达式&lt;/h3&gt;
&lt;p&gt;简化的核心思想，是将过程式的if/else替换为面向对象的多态。&lt;/p&gt;
&lt;p&gt;Decompose Conditional（分解条件式）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将复杂的条件式提炼为独立函数。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consolidate Conditional Expression（合并条件式）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将多个条件式判断提炼成一个独立函数。这和上面的分解条件式都需要一个前提：&lt;/span&gt; &lt;span class="err"&gt;这几个条件式是要有逻辑关联的。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consolidate Duplicate Conditional Fragments（合并重复的条件判断）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将所有分支里面都拥有的代码提炼到分支判断之后运行。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove Control Flag（移除控制标志）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;取代控制标记。单一出口，多出口。控制标记让程序接口看上去混乱。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件式）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;保留正常情况下面下的顺序执行，提前对非正常情况进行单独检查并返回。&lt;/span&gt; &lt;span class="err"&gt;（我更倾向于使用&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Conditional with Polymorphism（以多态取代条件式）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将条件式的每个分支放入一个&lt;/span&gt;&lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="err"&gt;内覆写函数中，然后将原始函数生命为抽象函数。&lt;/span&gt; &lt;span class="err"&gt;（这个方法之前的&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;种重构手段是代码小手段，引入多态才能充分发挥&lt;/span&gt;&lt;span class="n"&gt;OOP&lt;/span&gt;&lt;span class="err"&gt;优势）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Null Object（引入Null对象）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将无效值替换为&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="err"&gt;，从而可以让程序正常运行。&lt;/span&gt; &lt;span class="err"&gt;（这好象是一种&lt;/span&gt;&lt;span class="n"&gt;hack&lt;/span&gt;&lt;span class="err"&gt;方法，我倾向使用&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="err"&gt;，作者的用以可能是通过&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="err"&gt;来减少判断代码）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Assertion（引入断言）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;通过断言来发现程序错误，实际使用中，可以配合&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="err"&gt;使用。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.5. 简化函数调用&lt;/h3&gt;
&lt;p&gt;Rename Method（重命名函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add Parameter（添加参数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;你没看错，就是添加参数。&lt;/span&gt; &lt;span class="err"&gt;（啊？&lt;/span&gt;&lt;span class="n"&gt;Matin&lt;/span&gt;&lt;span class="err"&gt;老师，不带这么水的阿）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove Parameter（移除参数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;不要就丢掉。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Separate Query from Modifier（将查询参数和修改参数分离）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将一个即查询状态又修改状态的函数分离开来，职责分离清楚。&lt;/span&gt; &lt;span class="err"&gt;（我以前很喜欢写多面手函数～）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parameterize Method（令函数携带参数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;同一逻辑功能函数，通过重载接受不同参数。而不要建立多个同样的函数。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Parameter with Explicit Methods（以明确函数取代参数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将单一函数分解为多个函数从而去掉参数，前提是这几个函数的逻辑功能区别较大。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Preserve Whole Object（保持对象完整）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;传递完整的对象，取代几个参数的传递。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Parameter with Methods（以函数取代参数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如果目标函数需要的是几个参数操作的结果，就直接传递这个结果，而不是数个参数。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Introduce Parameter Object(引入参数对象)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当几个参数经常同时出现，就封装他们。&lt;/span&gt; &lt;span class="err"&gt;（他们之间往往就有逻辑关系）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove Setting Method（移除设值函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如果类的某个值域初始化后不再改变，就去掉它的&lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="err"&gt;方法。&lt;/span&gt; &lt;span class="err"&gt;（我理解为原则：&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;减少疑惑，保持唯一&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hide Method（隐藏某个函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;使用&lt;/span&gt; &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="err"&gt;标记未被其他类调用的方法。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Constructor with Factory Method（以工厂函数取代构造函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;引入工厂模式。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Encapsulate Downcast（封装向下转型动作）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当知道什么类型时候，将其封装在产生函数里面，减少引用者的困扰。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Error Code with Exception（以异常取代错误码）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如其名。&lt;/span&gt; &lt;span class="err"&gt;（关于异常使用的时机，抛出的方式，捕捉的粒度，我困惑了很久。&lt;/span&gt; &lt;span class="err"&gt;最后的总结的经验是：在什么层级处理并且仅处理该层级的异常。等有时间详细成文送出）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Exception with Test（以测试取代异常）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;异常不是条件判断。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.6. 处理概括关系&lt;/h3&gt;
&lt;p&gt;关于 OOP 继承的那些事儿。&lt;/p&gt;
&lt;p&gt;Pull Up Field（值域上移）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;子类重复的值域放到父类去。&lt;/span&gt; &lt;span class="err"&gt;（其实还是基于责任归属的问题）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pull Up Method（函数上移）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;子类中重复函数移到父类。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pull Up Construction Body（构造函数本体上移）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;共用的构造函数片段上移。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Push Down Method（函数下移）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将父类中近被某个子类调用的函数下移。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Push Down Field（值域下移）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;同上。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extract Subclass（提炼子类）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;当某个类只有部分特性被用到，就需要提取出子类。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extract Superclass（提炼超类）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;和上面相反。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extract Interface（提炼接口）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将相同的子集提取接口。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Collapse hierarchy（折叠继承体系）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;父类和子类并无太大区别时候，合体吧亲。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From Template Mehod（塑造模板函数）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将子类的同功能不同实现函数上移到父类，并在子类提供同名不同实现被调用的子函数。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Inheritance with Delegation（以委托取代继承）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;将父类变成一个值域，在调用这个值域的方法。&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;（继承太多就会出问题）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace Delegation with Inheritance（以继承取代委托）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;和上面相反的应用，当子类和父类出现明显的继承关系时候使用。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.7. 大型重构&lt;/h3&gt;
&lt;p&gt;这一章讲的内容有点高屋建瓴，这里就不概括了，建议读原文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tease Apart Inheritance（梳理并分解继承体系）&lt;/li&gt;
&lt;li&gt;Convert Procedural Design to Objects（将过程化设计转化为对象设计）&lt;/li&gt;
&lt;li&gt;Separate Domain from Presentation（将领域和表述/显示分离）&lt;/li&gt;
&lt;li&gt;Extract hierarchy（提炼继承体系）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;少年，coding时候重构你的代码吧！&lt;/p&gt;</summary><category term="读书笔记"></category></entry><entry><title>《卓有成效的程序员》读后感</title><link href="/2011/11/the-productive-programmer/" rel="alternate"></link><updated>2011-11-27T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-11-27:2011/11/the-productive-programmer/</id><summary type="html">&lt;p&gt;&lt;img alt="卓有成效的程序员" src="http://img3.douban.com/mpic/s3668809.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《卓有成效的程序员》，上次在京东半价买了这本书，一直没来得及看， 前几周在地铁上把这本书看完了。&lt;/p&gt;
&lt;p&gt;说实话，书里面的观点我很赞同，但是没有觉得惊艳， 因为我本身已经在尝试实践这些观点。&lt;/p&gt;
&lt;p&gt;书中的这些观点有如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加速法则：减少输入次数，用快捷键/方法启用常用操作&lt;/li&gt;
&lt;li&gt;专注法则：集中注意力处理工作，避免额外的信息干扰&lt;/li&gt;
&lt;li&gt;自动化法则：贯彻"懒"的原则，减少重复劳动&lt;/li&gt;
&lt;li&gt;规范性法则：DRY&lt;/li&gt;
&lt;li&gt;书中第二部分是撰写代码时候的一些意识，这些我就不复述了， 是比较常见的软件工程思想。这些思想由ThoughWorks的咨询师娓娓道来也是值得一看的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我觉得这本书在学完第一门语言/数据结构/操作系统之后就可以开始阅读。 也就是学生在大三-大四阶段阅读，会对代码撰写规范和风格形成大有帮助。&lt;/p&gt;</summary><category term="Book"></category></entry><entry><title>char nchar varchar nvarchar 区别</title><link href="/2010/07/difference-between-char-nchar-varchar-nvarchar/" rel="alternate"></link><updated>2010-07-16T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-07-16:2010/07/difference-between-char-nchar-varchar-nvarchar/</id><summary type="html">&lt;p&gt;在开发时候，发现数据库的一个字段用的是nchar(16)，让我感觉很奇怪，我知道nvarchar可以变长，nchar会用空格填充，这在存取时候需要Trim(
)操作，所以我一直不用nchar。而现在在产品中发现nchar的使用，不由觉得很奇怪。&lt;/p&gt;
&lt;p&gt;私底下认为是效率的问题，一番Google之后发现一段文章详述了几种数据库文字类型存储的差异。&lt;/p&gt;
&lt;p&gt;原文出处：&lt;a href="http://www.cnblogs.com/yoyozhou/archive/2008/11/21/1338452.html"&gt;char nchar varchar nvarchar 区别 - Rainbow -
博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;联机帮助上的：&lt;/p&gt;
&lt;p&gt;char(n)&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;定长&lt;/p&gt;
&lt;p&gt;索引效率高 程序里面使用trim去除多余的空白&lt;/p&gt;
&lt;p&gt;n 必须是一个介于 1 和 8,000 之间的数值,存储大小为 n 个字节&lt;/p&gt;
&lt;p&gt;varchar(n)&lt;/p&gt;
&lt;p&gt;变长&lt;/p&gt;
&lt;p&gt;效率没char高 灵活&lt;/p&gt;
&lt;p&gt;n 必须是一个介于 1 和 8,000 之间的数值。存储大小为输入数据的字节的实际长度，而不是 n 个字节&lt;/p&gt;
&lt;p&gt;text(n)&lt;/p&gt;
&lt;p&gt;变长&lt;/p&gt;
&lt;p&gt;非Unicode数据&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;nchar(n)&lt;/p&gt;
&lt;p&gt;定长&lt;/p&gt;
&lt;p&gt;处理unicode数据类型(所有的字符使用两个字节表示)&lt;/p&gt;
&lt;p&gt;n 的值必须介于 1 与 4,000 之间。存储大小为 n 字节的两倍&lt;/p&gt;
&lt;p&gt;nvarchar(n)&lt;/p&gt;
&lt;p&gt;变长&lt;/p&gt;
&lt;p&gt;处理unicode数据类型(所有的字符使用两个字节表示)&lt;/p&gt;
&lt;p&gt;n 的值必须介于 1 与 4,000 之间。字节的存储大小是所输入字符个数的两倍。所输入的数据字符长度可以为零&lt;/p&gt;
&lt;p&gt;ntext(n)&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;变长&lt;/p&gt;
&lt;p&gt;处理unicode数据类型(所有的字符使用两个字节表示)&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;h2&gt;1、CHAR。&lt;/h2&gt;
&lt;p&gt;CHAR存储定长数据很方便，CHAR字段上的索引效率级高，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间,不足
的自动用空格填充，所以在读取的时候可能要多次用到trim（）。&lt;/p&gt;
&lt;h2&gt;2、VARCHAR。&lt;/h2&gt;
&lt;p&gt;存储变长数据，但存储效率没有CHAR高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。
VARCHAR类型的实际长度是它的值的实际长度+1。为什么"+1"呢？这一个字节用于保存实际使用了多大的长度。从空间上考虑，用varchar合适；从效率上考
虑，用char合适，关键是根据实际情况找到权衡点。&lt;/p&gt;
&lt;h2&gt;3、TEXT。&lt;/h2&gt;
&lt;p&gt;text存储可变长度的非Unicode数据，最大长度为2^31-1(2,147,483,647)个字符。&lt;/p&gt;
&lt;h2&gt;4、NCHAR、NVARCHAR、NTEXT。&lt;/h2&gt;
&lt;p&gt;这三种从名字上看比前面三种多了个"N"。它表示存储的是Unicode数据类型的字符。我们知道字符中，英文字符只需要一个字节存储就足够了，但汉字众多，需要两个
字节存储，英文与汉字同时存在时容易造成混乱，Unicode字符集就是为了解决字符集这种不兼容的问题而产生的，它所有的字符都用两个字节表示，即英文字符也是用两
个字节表示。nchar、nvarchar的长度是在1到4000之间。和char、varchar比较起来，nchar、nvarchar则最多存储4000个字符
，不论是英文还是汉字；而char、varchar最多能存储8000个英文，4000个汉字。可以看出使用nchar、nvarchar数据类型时不用担心输入的字
符是英文还是汉字，较为方便，但在存储英文时数量上有些损失。&lt;/p&gt;
&lt;p&gt;所以一般来说，如果含有中文字符，用nchar/nvarchar，如果纯英文和数字，用char/varchar&lt;/p&gt;
&lt;p&gt;我把他们的区别概括成：&lt;/p&gt;
&lt;p&gt;CHAR，NCHAR 定长，速度快，占空间大，需处理&lt;/p&gt;
&lt;p&gt;VARCHAR，NVARCHAR，TEXT 不定长，空间小，速度慢，无需处理&lt;/p&gt;
&lt;p&gt;NCHAR、NVARCHAR、NTEXT处理Unicode码&lt;/p&gt;</summary><category term=""></category></entry><entry><title>正则表达式中的零宽断言</title><link href="/2010/01/regular-expressions-in-the-zero-width-assertion/" rel="alternate"></link><updated>2010-01-26T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-01-26:2010/01/regular-expressions-in-the-zero-width-assertion/</id><summary type="html">&lt;p&gt;这文是上个月开始写的，本来想深入的分析一下零宽断言，可惜工作一直忙，现在又要去转战&lt;strong&gt;DWR&lt;/strong&gt;...OMG~~&lt;/p&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;将要上线的系统中有一个字符规则："13位的字符串，其中有8位连续数字"，需要用这则表达式对这个字符串进行判断。而我之前对正则的认识仅仅停留在匹配固定的字符上
，对这个问题一筹莫展。&lt;/p&gt;
&lt;p&gt;这时候热心的小邪出现了，我在他的博客 &lt;a href="http://www.evlos.org"&gt;邪罗刹的菠萝阁&lt;/a&gt;
留下这个&lt;a href="http://www.evlos.org/2010/01/05/use-regex-to-clear-the-mix-of-tag-
img/#comment-5968"&gt;问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2010/01/alswl_ask.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;小邪很热心的撰写了一篇文章给出回答：&lt;a href="http://www.evlos.org/2010/01/07/a-cuptool-and-a-washtool"&gt; 一个杯具和一个洗具与最近学习手记 :
邪罗刹的菠萝阁&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;解答&lt;/h2&gt;
&lt;p&gt;核心字符串如下： '/^(?!(.&lt;em&gt;?d){9,})(?!(.&lt;/em&gt;?D){6,}).{13}$/';&lt;/p&gt;
&lt;p&gt;小邪的文章给了很详细的解答，比我自己解释要好得多～我就索性copy过来，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;小邪是这个样子解答的，首先两边的斜杠是 Perl 正则式的要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后两边的 ^ 和 $ 用来表示对应的是字符串的开始和结束。&lt;/p&gt;
&lt;p&gt;接着&lt;code&gt;.{13}&lt;/code&gt;，. 表示除了换行以外的所有字符，&lt;code&gt;13&lt;/code&gt; 规定了匹配长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们这里前面用了两次零宽断言，第一次，&lt;code&gt;(?!exp)&lt;/code&gt;这里的 exp 是 &lt;code&gt;(.*?d){9,}&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表示数字的个数大于等于 9，零宽断言把它反过来就是数字的个数小于 9。&lt;/p&gt;
&lt;p&gt;第二次 exp 是&lt;code&gt;(.*?D){6,}&lt;/code&gt; 表示非数字大于等于 6 个以上。&lt;/p&gt;
&lt;p&gt;即表示非数字的个数大于等于 6，把它反过来就是非数字的个数小于 6。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而这里&lt;code&gt;.*&lt;/code&gt;表示&lt;code&gt;?d&lt;/code&gt; 和 &lt;code&gt;?D&lt;/code&gt;的前面可能有零次或更多次的其他字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而这里的 &lt;code&gt;?&lt;/code&gt;表示这段连续的字符会重复零次或一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Python下的实现和测试代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;def fun(p, datas):&lt;/p&gt;
&lt;p&gt;for data in datas:&lt;/p&gt;
&lt;p&gt;print p.match(data)&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;p&gt;p = re.compile(r'^(?!(.&lt;em&gt;?d){9,})(?!(.&lt;/em&gt;?D){6,}).{13}$');&lt;/p&gt;
&lt;p&gt;datas = ['asss13336644ss', 'aas15151515ss', 'aa15151515sss',&lt;/p&gt;
&lt;p&gt;'aa15151515ss1', 'aa15151515ss11', 'aa151515151ss',&lt;/p&gt;
&lt;p&gt;'aa15151511ssss']&lt;/p&gt;
&lt;p&gt;fun(p, datas)&lt;/p&gt;
&lt;p&gt;恩，问题解决了，不过，如果想把零宽断言彻底搞清楚，还需要深入学习一下～&lt;/p&gt;
&lt;h2&gt;深入零宽断言&lt;/h2&gt;
&lt;p&gt;[正则表达式的零宽断言的一个小应用 - 楼兰之风... - 博客园&lt;/p&gt;
&lt;p&gt;](http://www.cnblogs.com/xiehuiqi220/archive/2009/02/06/1385481.html)&lt;/p&gt;
&lt;p&gt;[正则表达式--零宽断言 - panhf2003的专栏 - CSDN博客&lt;/p&gt;
&lt;p&gt;](http://blog.csdn.net/panhf2003/archive/2008/11/19/3337163.aspx)&lt;/p&gt;
&lt;p&gt;[正则表达式30分钟入门教程&lt;/p&gt;
&lt;p&gt;](http://deerchao.net/tutorials/regex/regex.htm)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.ubuntu.org.cn/Python%E6%AD%A3%E5%88%9
9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97#.E5.8F.8D.E6.
96.9C.E6.9D.A0.E7.9A.84.E9.BA.BB.E7.83.A6"&gt;Python正则表达式操作指南 - Ubuntu中文&lt;/a&gt;&lt;/p&gt;</summary><category term="正则表达式"></category></entry><entry><title>Oracle PL/SQL编程规范</title><link href="/2010/01/oracle-pl-sql-coding-standards/" rel="alternate"></link><updated>2010-01-14T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-01-14:2010/01/oracle-pl-sql-coding-standards/</id><summary type="html">&lt;p&gt;学习PL/SQL不可避免遇到规范的问题，这里转载一篇比较精的文章。&lt;/p&gt;
&lt;p&gt;当然，各个公司和个人有自己的风格和规范，甚至Oracle官方的教程代码也没有完全遵守这些规则，这里只是一个推荐和介绍。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href="http://database.51cto.com/art/200907/138973.htm"&gt;Oracle PL/SQL编程规范指南 -
51CTO.COM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多参考：&lt;a href="http://blog.chinaunix.net/u1/57759/showart_458439.html"&gt;SQL,PL/SQL编程规范 - PL/SQL -
IT民工杂谈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;**分割线，Google真汉子&lt;/em&gt;&lt;/strong&gt;**&lt;/p&gt;
&lt;h2&gt;一、PL/SQL编程规范之大小写&lt;/h2&gt;
&lt;p&gt;就像在SQL中一样，PL / SQL中是不区分大小写的。其一般准则如下：&lt;/p&gt;
&lt;p&gt;关键字(&lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;EXCEPTION&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;IF THEN ELSE&lt;/code&gt;,&lt;code&gt;LOOP&lt;/code&gt;, &lt;code&gt;END
LOOP&lt;/code&gt;)、数据类型(&lt;code&gt;VARCHAR2&lt;/code&gt;, &lt;code&gt;NUMBER&lt;/code&gt;)、内部函数(&lt;code&gt;LEAST&lt;/code&gt;,
&lt;code&gt;SUBSTR&lt;/code&gt;)和用户定义的子程序(&lt;code&gt;procedures&lt;/code&gt;, &lt;code&gt;functions&lt;/code&gt;,&lt;code&gt;packages&lt;/code&gt;)，使用大写。&lt;/p&gt;
&lt;p&gt;变量名以及SQL中的列名和表名，使用小写。&lt;/p&gt;
&lt;h2&gt;二、PL/SQL编程规范之空白&lt;/h2&gt;
&lt;p&gt;空白（空行和空格）在PL/SQL中如同在SQL中一样重要，因为它是提高代码可读性的一个重要因素。换句话说，可以通过在代码中使用缩进来体现程序的逻辑结构。以下
是一些建议：&lt;/p&gt;
&lt;p&gt;在等号或比较操作符的左右各留一个空格；&lt;/p&gt;
&lt;p&gt;结构词（&lt;code&gt;DECLARE&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;EXCEPTION&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;,&lt;code&gt;IF and END IF&lt;/code&gt;,&lt;code&gt;LOOP and END
LOOP&lt;/code&gt;）居左排列。另外，结构中的嵌套结构要缩进三个空格（使用空格键，而不是Tab键）；&lt;/p&gt;
&lt;p&gt;主要代码段之间用空行隔开；&lt;/p&gt;
&lt;p&gt;把同一结构的不同逻辑部分分开写在独立的行，即使这个结构很短。例如，&lt;code&gt;IF&lt;/code&gt;和&lt;code&gt;THEN&lt;/code&gt;被放在同一行，而&lt;code&gt;ELSE&lt;/code&gt;和&lt;code&gt;END IF&lt;/code&gt;则放在独立的行。&lt;/p&gt;
&lt;h2&gt;三、PL/SQL编程规范之命名约定&lt;/h2&gt;
&lt;p&gt;使用以下前缀对于避免与关键字和表名列名相冲突是很有帮助的：&lt;/p&gt;
&lt;p&gt;v_变量名&lt;/p&gt;
&lt;p&gt;con_常量名&lt;/p&gt;
&lt;p&gt;i_输入参数名，o_输出参数名，io_输入输出参数名&lt;/p&gt;
&lt;p&gt;c_游标名 或者 游标名_cur&lt;/p&gt;
&lt;p&gt;rc_ Ref Cursor名&lt;/p&gt;
&lt;p&gt;r_Record名 或者 Record名_rec&lt;/p&gt;
&lt;p&gt;FOR r_stud IN c_stud LOOP…&lt;/p&gt;
&lt;p&gt;FOR stud_rec IN stud_cur LOOP&lt;/p&gt;
&lt;p&gt;type_名称，名称_type (用户定义的类型)&lt;/p&gt;
&lt;p&gt;t_表名，表名_tab （PL/SQL 表）&lt;/p&gt;
&lt;p&gt;rec_Record名，Record名_rec （Record变量）&lt;/p&gt;
&lt;p&gt;e_异常名 （用户定义的异常）&lt;/p&gt;
&lt;p&gt;包的名称应该描述包内的存储过程和函数主要所完成的功能&lt;/p&gt;
&lt;p&gt;存储过程的名称应该描述该存储过程所执行的动作&lt;/p&gt;
&lt;p&gt;函数的名称应该描述所返回的变量&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PACKAGE&lt;/span&gt; &lt;span class="n"&gt;student_admin&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="err"&gt;后缀可能是用于表示管理功能&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;remove_student&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_student_id&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;studid&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;student_enroll_count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_student_id&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;studid&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;RETURN&lt;/span&gt; &lt;span class="n"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;四、PL/SQL编程规范之注释&lt;/h2&gt;
&lt;p&gt;PL/SQL中的注释如同SQL中的注释一样重要。他们应该解释程序的主要部分和所有关键的逻辑步骤。&lt;/p&gt;
&lt;p&gt;使用单行注释(-)而不是多行注释(/*)。即使PL/SQL对这些注释做同样处理，这样在代码完成后进行调试也会容易些，因为你不能在多行注释中嵌入多行注释。换句
话说，单行注释代码中可以部分取消注释，而在多行注释代码中则不行。&lt;/p&gt;
&lt;h2&gt;五、其他的建议&lt;/h2&gt;
&lt;p&gt;对于PL/SQL中嵌入的SQL声明，使用相同的格式化指南来决定这些声明应该如何在代码块中出现&lt;/p&gt;
&lt;p&gt;提供一个头部注释，用于说明代码块的用途并列出创建日期和作者名字。并且每个修订版都要有一行注释，包含作者名、日期和修订版描述。&lt;/p&gt;
&lt;p&gt;例如：下面的这个示例体现了上述建议。请注意该示例还使用了等宽字体（Courier
New），因为每个字体占据同等宽度可以使格式化更加简便。等比例空格字体会隐藏空格使得行间对齐比较困难。多数文本和程序编辑器默认使用等宽字体。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/********************************************************&lt;/span&gt;
&lt;span class="cm"&gt;* 文件名：coursediscount01.sql  &lt;/span&gt;
&lt;span class="cm"&gt;* 版本：1  &lt;/span&gt;
&lt;span class="cm"&gt;* 用途：对于至少有一部分超过十个学生登记的课程给予折扣  &lt;/span&gt;
&lt;span class="cm"&gt;* 参数：无  &lt;/span&gt;
&lt;span class="cm"&gt;*  &lt;/span&gt;
&lt;span class="cm"&gt;* 作者：s.tashi  时间：2000.1.1  &lt;/span&gt;
&lt;span class="cm"&gt;* 修改者：y.sonam 时间：2000.2.1  &lt;/span&gt;
&lt;span class="cm"&gt;* 描述：修正游标，添加缩进和注释。  &lt;/span&gt;
&lt;span class="cm"&gt;********************************************************/&lt;/span&gt;
&lt;span class="no"&gt;DECLARE&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="no"&gt;C_DISCOUNT_COURSE&lt;/span&gt; &lt;span class="err"&gt;找出那些至少有一部分超过十个学生登记的课程&lt;/span&gt;  
  &lt;span class="no"&gt;CURSOR&lt;/span&gt; &lt;span class="n"&gt;c_discount_course&lt;/span&gt; &lt;span class="no"&gt;IS&lt;/span&gt;
    &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="no"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;course_no&lt;/span&gt;
      &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;sect&lt;/span&gt;
     &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="no"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;enrollment&lt;/span&gt; &lt;span class="n"&gt;enr&lt;/span&gt;
                   &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;enr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;费用超过&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;2000.00&lt;/span&gt;&lt;span class="err"&gt;的课程的折扣率&lt;/span&gt;  
  &lt;span class="n"&gt;con_discount_2000&lt;/span&gt; &lt;span class="no"&gt;CONSTANT&lt;/span&gt; &lt;span class="no"&gt;NUMBER&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mf"&gt;.90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;费用在$&lt;/span&gt;&lt;span class="mf"&gt;1001.00&lt;/span&gt;&lt;span class="err"&gt;和$&lt;/span&gt;&lt;span class="mf"&gt;2000.00&lt;/span&gt;&lt;span class="err"&gt;之间的课程的折扣率&lt;/span&gt;  
  &lt;span class="n"&gt;con_discount_other&lt;/span&gt; &lt;span class="no"&gt;CONSTANT&lt;/span&gt; &lt;span class="no"&gt;NUMBER&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mf"&gt;.95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;v_current_course_cost&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="no"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;v_discount_all&lt;/span&gt;        &lt;span class="no"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;e_update_is_problematic&lt;/span&gt; &lt;span class="no"&gt;EXCEPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;BEGIN&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;对于那些要打折的课程&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;确定当前费用和新的费用&lt;/span&gt;  
  &lt;span class="no"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;r_discount_course&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c_discount_course&lt;/span&gt; &lt;span class="no"&gt;LOOP&lt;/span&gt;
    &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;
      &lt;span class="no"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;v_current_course_cost&lt;/span&gt;
      &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;
     &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;course_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r_discount_course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;course_no&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;v_current_course_cost&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;2000&lt;/span&gt; &lt;span class="no"&gt;THEN&lt;/span&gt;
      &lt;span class="n"&gt;v_discount_all&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;con_discount_2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;ELSE&lt;/span&gt;
      &lt;span class="no"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;v_current_course_cost&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;1000&lt;/span&gt; &lt;span class="no"&gt;THEN&lt;/span&gt;
        &lt;span class="n"&gt;v_discount_all&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;con_discount_other&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="no"&gt;ELSE&lt;/span&gt;
        &lt;span class="n"&gt;v_discount_all&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="no"&gt;END&lt;/span&gt; &lt;span class="no"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;END&lt;/span&gt; &lt;span class="no"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;BEGIN&lt;/span&gt;
      &lt;span class="no"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;
         &lt;span class="no"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v_discount_all&lt;/span&gt;
       &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;course_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r_discount_course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;course_no&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;EXCEPTION&lt;/span&gt;
      &lt;span class="no"&gt;WHEN&lt;/span&gt; &lt;span class="no"&gt;OTHERS&lt;/span&gt; &lt;span class="no"&gt;THEN&lt;/span&gt;
        &lt;span class="no"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;e_update_is_problematic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;更新记录的子代码块结束&lt;/span&gt;  
  &lt;span class="no"&gt;END&lt;/span&gt; &lt;span class="no"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;主循环结束&lt;/span&gt;  
  &lt;span class="no"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;EXCEPTION&lt;/span&gt;
  &lt;span class="no"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;e_update_is_problematic&lt;/span&gt; &lt;span class="no"&gt;THEN&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;事务回滚&lt;/span&gt;  
    &lt;span class="no"&gt;ROLLBACK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="no"&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="no"&gt;PUT_LINE&lt;/span&gt;&lt;span class="p"&gt;(&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt; &lt;span class="n"&gt;updating&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;.&amp;#39;);&lt;/span&gt;
  &lt;span class="no"&gt;WHEN&lt;/span&gt; &lt;span class="no"&gt;OTHERS&lt;/span&gt; &lt;span class="no"&gt;THEN&lt;/span&gt;
    &lt;span class="no"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;amp;nbsp_place_holder;-EOF-&lt;/p&gt;</summary><category term="Database"></category><category term="Oracle"></category><category term="PL/SQL"></category></entry><entry><title>python+django MTV框架 和php MVC框架</title><link href="/2009/10/python-django-mtv-framework-and-php-mvc-framework/" rel="alternate"></link><updated>2009-10-01T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-10-01:2009/10/python-django-mtv-framework-and-php-mvc-framework/</id><summary type="html">&lt;p&gt;首先，祝福祖国60华诞，我爱这个国家。&lt;/p&gt;
&lt;p&gt;刚才在GR读到&lt;a href="http://www.classicning.com"&gt;Here Comes The Sun&lt;/a&gt;的&lt;a href="http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url-
app/"&gt;A shorten url
app&lt;/a&gt;，其中提到了Python下Django框架的一些问题，我很感兴趣，搜索了一下MTV模型，资料很少。但有一篇我读后很有启发，现在转载如下。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href="http://bbs.thinkphp.cn/viewthread.php?tid=5022"&gt;python+django MTV框架 和php MVC框架的不同之处 - PHP+MYSQL+APACHE -
ThinkPHP官方论坛&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：乔峰&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*残酷的分割线&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;python+django MTV框架 和php MVC框架的不同之处&lt;/h2&gt;
&lt;p&gt;最近学习了python语言和djangoMTV框架，感觉用的很爽啊。这里给大家粗略的介绍一下。&lt;/p&gt;
&lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的设计模式，即模型M，模版T和视图控制器V。它最初是被开发来用于管理劳伦斯出版
集团旗下的一些以新闻内容为主的网站的。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
&lt;p&gt;Django的主要目标是使得开发复杂的、数据库驱动的网站变得简单。Django注重组件的重用性和「可插拔性」，敏捷开发和DRY法则（Don't Repeat
Yourself）。在Django中Python被普遍使用，甚至包括配置文件和数据模型。&lt;/p&gt;
&lt;p&gt;关键一点是Django框架把控制层(Ctronl layer)给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作.在写程序的时候，只要调用方
法就行了.感觉很方便.用户可以用很少的代码完成很多的事情.代码可读性强.运行的速度比php要快.&lt;/p&gt;
&lt;p&gt;python是嵌入式的语言,它可以把C和JAVA语言的写的东西结合在一起.也难怪Google公司主导议语言用python,c++,java的比较多.大的公司
比较重视系统管理和总体的架构.&lt;/p&gt;
&lt;p&gt;有人说最有发展的语言是python,不过都值得大家去探讨的.因为结果都很预料,前段时间闹的很热的是Ruby语言,Ruby刚出来时,传说也很了得,现在看起来也
不怎么行了.&lt;/p&gt;
&lt;h2&gt;Python的前景&lt;/h2&gt;
&lt;p&gt;Python在编程领域的占有率一直处于稳步上升之中，根据最新的数据，Python排名第七。前六名分别是Java,C,VB,C++,PHP和Perl.
作为一个很年轻的语言，Python的位置已经相当令人振奋了。随着微软将Python纳入.Net 平台，相信Python的将来会更加强劲发展。Python
很可能会成为.Net平台快速开发的主流语言。&lt;/p&gt;
&lt;p&gt;欲了解这方面情况，请参考Iron Python的相关信息.&lt;/p&gt;
&lt;p&gt;著名的搜索引擎 Google 也大量使用Python。 现在中国的搜狐(sohu)网站邮箱系统也是用python开发的.更加令人吃惊的是，在Nokia智能手
机所采用的Symbian操作系统上，Python成为继C++,Java之后的第三个编程语言！可见Python的影响力之巨大。&lt;/p&gt;
&lt;p&gt;我在学python语言和django MTV框架的一点体会,拿来教程,都说该语言如何简单易学,都是乱说,入门很简单,想要学深点,都不容易的.&lt;/p&gt;
&lt;p&gt;个人感觉还是学PHP入门时最简单,不过现在弄出哪么框架,组件,也变得越来越不简单,PHP也越来越像JAVA的儿子JSP(当然PHP是C语言的儿子),个人觉得
他们越来越接近,但又有好多差异.&lt;/p&gt;
&lt;p&gt;python语言不仅可以做WEB应用,而且可以做桌面,服务器软件和手机软件开发(有的诺基亚手机系统就是用python做的),而PHP专注做WEB 应用的,P
HP开发祖师也为PHP为什么不能转向照顾到做桌面,服务器软件和手机软件开发的应用听说也苦耐了好久,但最终没能成功转型.哪是因为他们在最初的底层定位搞死了(网
上评论观点).&lt;/p&gt;
&lt;p&gt;不过我看到网上语言排名,PHP在Python之前,也说明PHP在近期表现不俗.&lt;/p&gt;
&lt;p&gt;我喜欢用Python,Django,也很喜欢用php,thinkphp,特别是升级后的1.5版,但是可不可也做成MTV的框架模式呢.用精良的代码完成很多工作
.加快开发速度呢.大家都要努力哦.加油兄弟们.&lt;/p&gt;
&lt;h3&gt;2楼回复：&lt;/h3&gt;
&lt;p&gt;美國太空總署NASA使用Python，Google使用Python，Youtube使用Python.阿里巴巴也用python开发,搜狐邮箱是用python2
.6开发的&lt;/p&gt;
&lt;h3&gt;5楼回复：&lt;/h3&gt;
&lt;p&gt;MVC与MTV有什么不同呢.&lt;/p&gt;
&lt;p&gt;大家都知道&lt;/p&gt;
&lt;p&gt;MVC 中的M是代表MODLE层,V代表VIEW层,C代表Contrl层.&lt;/p&gt;
&lt;p&gt;MTV 中的M是代表MODLE层,T代表Template(模板层),V代表VIEW层.&lt;/p&gt;
&lt;p&gt;Django 是MTV模式框架,它把Control控制层容合到   Django 框架里边了,&lt;/p&gt;
&lt;p&gt;程序员把  Control控制层东西交给Django自动完成了,  只需要编写非常少的代码完成很多的事情.所以,它比MVC框架考虑的问题要深一步.因为我们程
序员大都写程序在Contrl层,现在这个工作交给了框架,仅需写很少的调用代码,自然工作效率就提高了.&lt;/p&gt;</summary><category term="Django"></category><category term="MTV"></category><category term="MVC"></category></entry><entry><title>编码: ASCII(ANSI), GB-2312, UNICODE, UTF-8，UTF-16</title><link href="/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/" rel="alternate"></link><updated>2009-09-12T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-09-12:2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</id><summary type="html">&lt;h2&gt;ASCII字符集&lt;/h2&gt;
&lt;p&gt;7位的编码方案，总共表示128个字符，其中包括了大小写英文字母、数字、标点符号等常用字符。英语世界已经足够应付。&lt;/p&gt;
&lt;h2&gt;ISO-8859-1字符集&lt;/h2&gt;
&lt;p&gt;也称ISO-Latin字符集，它扩展了ASCII字符集，用到了8bit字节里的最高一位，这样它就有256个字符，前128个字符和ASCII字符集相同
。有了ISO-Latin字符集，西方世界的一些其它语言，如西班牙语、法语、德语、意大利语都够用了。&lt;/p&gt;
&lt;h2&gt;GB系列字符集（GB2312，GBK，GB18030）&lt;/h2&gt;
&lt;p&gt;由于一个字节是无论如何也表达不了哪怕是最长用的汉字字符集的，所以为了用计算机存储汉字，必须使用多个字节。&lt;/p&gt;
&lt;p&gt;多字节字符集就是使用可变长的编码长度来编码字符，有的字符用一个字节编码，比如ASCII字符，有的字符用两个字节编码，比如汉字。在VC里，多字节字符集等同于双
字节字符集，VC不支持多于2个字节编码长度的字符。GB系列的字符集和ISO-Latin字符集一样，前128个字符和ASCII字符集相同。GB系列字符集是兼容
的，相同的中文字符在这3个字符集里有相同的编码。GB2312和GBK一个字符最多2个字节表示，GB18030可多达4个字节。在这种编码里表示汉字时，需要一个
leading byte，它总是大于127，这个字节的含义是说明它和后面的字节（们）一起表示一个字符。&lt;/p&gt;
&lt;p&gt;这些字符集（ISO-Latin字符集，GB系列字符集）都是以ASCII为基础扩展而来，统称为ANSI字符集。&lt;/p&gt;
&lt;p&gt;记事本在默认情况下（选择ANSI编码）就是使用多字节字符集保存文件的，至于使用的是GB2312，GBK，还是GB18030我不清楚。&lt;/p&gt;
&lt;h2&gt;Unicode字符集&lt;/h2&gt;
&lt;p&gt;每个地区的人都试图扩展ASCII编码来支持本地的语言，最终的结果是导致互不兼容。因为除了最低的128个字符相同以外，其它的字符都使用自己特殊的编码方案。&lt;/p&gt;
&lt;p&gt;当使用与文件保存时的编码方案不同的编码来读取文件时，就会产生错误——比如Windows记事本那个著名的「联通BUG」。&lt;/p&gt;
&lt;p&gt;统一所有字符的编码是Unicode被设计出来的初衷。&lt;/p&gt;
&lt;p&gt;长久以来，Unicode在我心中的概念就是：使用2个字节来编码字符，使用Unicode可以表示世界上所有的字符。但这种理解并不准确！&lt;/p&gt;
&lt;p&gt;其实Unicode可以看成是一种理想：这种理想就是世界上的所有字符都只有一个唯一的标识！至于怎样去实现这种理想，有很多的实现方式：UTF-
8,UTF-16,UTF-32,甚至在Unicode标准里还介绍了一种压缩的实现方式。Unicode把这个唯一的标识称之为代码点（code
point），字符的代码点以U+XXXX的方式表示，这个可以打开Windows自带的字符映射表看得到。&lt;/p&gt;
&lt;p&gt;Unicode最初被设计出来的时候希望使用2个字节就可以表示世界上的所有字符。因此，实现Unicode最直接的想法就是用两个字节来存储一个字符，如果大家都这
么想就好了，这样一个字符就可以用2个字节长的短整形来存储。但是偏偏还有一个叫做大端小端东西存在，这样2个字节的短整型在内存中的表示顺序就有2种可能，这就是为
什么当用记事本保存文本文件时可以选择Unicode或者Unicode big endian的原因。&lt;/p&gt;
&lt;p&gt;1个字符=2个字节在现实中却遇到了麻烦。一方面，用2个字节表示一个字符，浪费了大量的空间（如果仅仅用来存储ISO-
Latin字符集里的字符的话），而且还会有大端小端的问题，解决的方案是UTF-
8编码；另一方面，人们在实践中发现即使用2个字节编码也无法表示所有字符，因此出现了UTF- 16。UTF-16除了使用2个字节编码外，还使用一对2个字节来表
示Unicode里很少用到的字符；另外还有UTF-32，它使用单独的4个字节来编码所有的Unicode字符。&lt;/p&gt;
&lt;h2&gt;UTF-8编码&lt;/h2&gt;
&lt;p&gt;我想最早提出UTF-8的一定是美国人，「用2个字节来表示一个英语字母这太浪费了！」，他们肯定会这么说的。顾名思义，那个8说明UTF-
8编码中最小的单位是8bit的字节。采用UTF-
8编码，Unicode代码点中U+007F以下（包含U+007F）的字符用一个字节编码，其它的字符用多个字节编码，最多一个字符用4个字节编码。这样UTF-
8兼容ASCII，但是不兼容ISO-Latin字符集。&lt;/p&gt;
&lt;h3&gt;Unicode字符采用UTF-8编码方案时的对照表&lt;/h3&gt;
&lt;p&gt;U-00000000 - U-0000007F:  0xxxxxxx&lt;/p&gt;
&lt;p&gt;U-00000080 - U-000007FF:  110xxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;U-00000800 - U-0000FFFF:  1110xxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;U-00010000 - U-001FFFFF:  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;U-00200000 - U-03FFFFFF:  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;U-04000000 - U-7FFFFFFF:  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
10xxxxxx&lt;/p&gt;
&lt;p&gt;网上的很多文章都有这个表，可以看到一个Unicode代码点采用UTF-8编码时最多可达6个字节。但是从Unicode官方网站上看到的是UTF-
8编码的最大字节长度是4个字节。也就是说最下面的两行没有了。&lt;/p&gt;
&lt;p&gt;UTF-8编码的实现方式比较好理解：例如「汉」字的Unicode编码是6C49，6C49在0800-FFFF之间，所以最终编码应该是3个字节。
6C49的二进制位串是：110110001001001，把这个位串从右向左填充到那3个字节的x部分，高位不够的用0补。最终得到的3个字节是：11100110
10110001 10001001，即E6 B1 89。注意由于UTF-
8的最小编码单元是字节，所以不存在大端小端的问题。在各种Unicode编码方案之间转换的标准算法（诸如从UTF-16到UTF-
8或者反过来）已经有了，在Unicode的官方网站上可以找到。&lt;/p&gt;
&lt;p&gt;这样Unicode至少就有5种编码方案了（UTF-8，UTF-16两种，UTF-32两种），怎么区分它们呢？&lt;/p&gt;
&lt;p&gt;区分各种不同Unicode编码方案的技巧被称为Byte Order Mark（BOM）&lt;/p&gt;
&lt;p&gt;Byte order mark     Description&lt;/p&gt;
&lt;p&gt;EF BB BF     UTF-8&lt;/p&gt;
&lt;p&gt;FF FE     UTF-16, little endian&lt;/p&gt;
&lt;p&gt;FE FF     UTF-16, big endian&lt;/p&gt;
&lt;p&gt;FF FE 00 00     UTF-32&lt;/p&gt;
&lt;p&gt;「像记事本、EditPlus这些软件，如果另存为unicode类型，会在文件最开头添加BOM码，如果一个文件没有BOM码，那么就很难识别，需要人工识别了。另
外，一般说Unicode编码，其实和Unicode-le(小头端)一个概念，Unicode Big endian会单独作为一种编码类型放置的。」-alswl&lt;/p&gt;</summary><category term="编码"></category></entry><entry><title>中国省份与城市数据SQL</title><link href="/2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/" rel="alternate"></link><updated>2009-08-22T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-08-22:2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/</id><summary type="html">&lt;p&gt;本文来源：&lt;a href="http://blog.csdn.net/xielingxu/archive/2007/08/26/1759471.aspx"&gt;中国省份与城市数据插入 - xlx -
CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Google找到这个，实在是爱不释手，就转过来了，很多项目都需要用到这些数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;sysobjects&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OBJECT_ID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;province&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;OBJECTPROPERTY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;IsUserTable&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;province&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CREATE TABLE [province] (&lt;/p&gt;
&lt;p&gt;[id] [int] NOT NULL,&lt;/p&gt;
&lt;p&gt;[provinceID] [nvarchar] (12) NOT NULL,&lt;/p&gt;
&lt;p&gt;[province] [nvarchar] (80) NOT NULL)&lt;/p&gt;
&lt;p&gt;ALTER TABLE [province] WITH NOCHECK ADD CONSTRAINT [PK_province] PRIMARY KEY
NONCLUSTERED ( [id] )INSERT [province] ([id],[provinceID],[province]) VALUES (
1,'110000','北京市')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 2,'120000','天津市')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 3,'130000','河北省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 4,'140000','山西省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 5,'150000','内蒙古自治区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 6,'210000','辽宁省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 7,'220000','吉林省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 8,'230000','黑龙江省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 9,'310000','上海市')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 10,'320000','江苏省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 11,'330000','浙江省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 12,'340000','安徽省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 13,'350000','福建省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 14,'360000','江西省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 15,'370000','山东省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 16,'410000','河南省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 17,'420000','湖北省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 18,'430000','湖南省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 19,'440000','广东省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES (
20,'450000','广西壮族自治区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 21,'460000','海南省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 22,'500000','重庆市')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 23,'510000','四川省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 24,'520000','贵州省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 25,'530000','云南省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 26,'540000','西藏自治区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 27,'610000','陕西省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 28,'620000','甘肃省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 29,'630000','青海省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES (
30,'640000','宁夏回族自治区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES (
31,'650000','新疆维吾尔自治区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES ( 32,'710000','台湾省')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES (
33,'810000','香港特别行政区')&lt;/p&gt;
&lt;p&gt;INSERT [province] ([id],[provinceID],[province]) VALUES (
34,'820000','澳门特别行政区')&lt;/p&gt;
&lt;p&gt;if exists (select * from sysobjects where id = OBJECT_ID('[area]') and
OBJECTPROPERTY(id, 'IsUserTable') = 1)&lt;/p&gt;
&lt;p&gt;DROP TABLE [area]&lt;/p&gt;
&lt;p&gt;CREATE TABLE [area] (&lt;/p&gt;
&lt;p&gt;[id] [int] NOT NULL,&lt;/p&gt;
&lt;p&gt;[cityID] [nvarchar] (12) NOT NULL,&lt;/p&gt;
&lt;p&gt;[city] [nvarchar] (100) NOT NULL,&lt;/p&gt;
&lt;p&gt;[father] [nvarchar] (12) NOT NULL)&lt;/p&gt;
&lt;p&gt;ALTER TABLE [area] WITH NOCHECK ADD CONSTRAINT [PK_area] PRIMARY KEY
NONCLUSTERED ( [id] )INSERT [area] ([id],[cityID],[city],[father]) VALUES (
1,'110100','市辖区','110000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
2,'110200','县','110000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
3,'120100','市辖区','120000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
4,'120200','县','120000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
5,'130100','石家庄市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
6,'130200','唐山市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
7,'130300','秦皇岛市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
8,'130400','邯郸市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
9,'130500','邢台市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
10,'130600','保定市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
11,'130700','张家口市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
12,'130800','承德市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
13,'130900','沧州市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
14,'131000','廊坊市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
15,'131100','衡水市','130000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
16,'140100','太原市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
17,'140200','大同市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
18,'140300','阳泉市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
19,'140400','长治市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
20,'140500','晋城市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
21,'140600','朔州市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
22,'140700','晋中市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
23,'140800','运城市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
24,'140900','忻州市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
25,'141000','临汾市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
26,'141100','吕梁市','140000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
27,'150100','呼和浩特市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
28,'150200','包头市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
29,'150300','乌海市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
30,'150400','赤峰市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
31,'150500','通辽市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
32,'150600','鄂尔多斯市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
33,'150700','呼伦贝尔市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
34,'150800','巴彦淖尔市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
35,'150900','乌兰察布市','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
36,'152200','兴安盟','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
37,'152500','锡林郭勒盟','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
38,'152900','阿拉善盟','150000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
39,'210100','沈阳市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
40,'210200','大连市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
41,'210300','鞍山市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
42,'210400','抚顺市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
43,'210500','本溪市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
44,'210600','丹东市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
45,'210700','锦州市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
46,'210800','营口市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
47,'210900','阜新市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
48,'211000','辽阳市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
49,'211100','盘锦市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
50,'211200','铁岭市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
51,'211300','朝阳市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
52,'211400','葫芦岛市','210000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
53,'220100','长春市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
54,'220200','吉林市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
55,'220300','四平市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
56,'220400','辽源市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
57,'220500','通化市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
58,'220600','白山市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
59,'220700','松原市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
60,'220800','白城市','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
61,'222400','延边朝鲜族自治州','220000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
62,'230100','哈尔滨市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
63,'230200','齐齐哈尔市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
64,'230300','鸡西市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
65,'230400','鹤岗市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
66,'230500','双鸭山市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
67,'230600','大庆市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
68,'230700','伊春市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
69,'230800','佳木斯市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
70,'230900','七台河市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
71,'231000','牡丹江市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
72,'231100','黑河市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
73,'231200','绥化市','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
74,'232700','大兴安岭地区','230000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
75,'310100','市辖区','310000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
76,'310200','县','310000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
77,'320100','南京市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
78,'320200','无锡市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
79,'320300','徐州市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
80,'320400','常州市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
81,'320500','苏州市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
82,'320600','南通市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
83,'320700','连云港市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
84,'320800','淮安市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
85,'320900','盐城市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
86,'321000','扬州市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
87,'321100','镇江市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
88,'321200','泰州市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
89,'321300','宿迁市','320000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
90,'330100','杭州市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
91,'330200','宁波市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
92,'330300','温州市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
93,'330400','嘉兴市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
94,'330500','湖州市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
95,'330600','绍兴市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
96,'330700','金华市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
97,'330800','衢州市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
98,'330900','舟山市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
99,'331000','台州市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
100,'331100','丽水市','330000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
101,'340100','合肥市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
102,'340200','芜湖市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
103,'340300','蚌埠市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
104,'340400','淮南市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
105,'340500','马鞍山市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
106,'340600','淮北市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
107,'340700','铜陵市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
108,'340800','安庆市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
109,'341000','黄山市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
110,'341100','滁州市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
111,'341200','阜阳市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
112,'341300','宿州市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
113,'341400','巢湖市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
114,'341500','六安市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
115,'341600','亳州市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
116,'341700','池州市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
117,'341800','宣城市','340000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
118,'350100','福州市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
119,'350200','厦门市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
120,'350300','莆田市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
121,'350400','三明市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
122,'350500','泉州市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
123,'350600','漳州市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
124,'350700','南平市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
125,'350800','龙岩市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
126,'350900','宁德市','350000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
127,'360100','南昌市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
128,'360200','景德镇市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
129,'360300','萍乡市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
130,'360400','九江市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
131,'360500','新余市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
132,'360600','鹰潭市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
133,'360700','赣州市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
134,'360800','吉安市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
135,'360900','宜春市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
136,'361000','抚州市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
137,'361100','上饶市','360000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
138,'370100','济南市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
139,'370200','青岛市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
140,'370300','淄博市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
141,'370400','枣庄市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
142,'370500','东营市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
143,'370600','烟台市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
144,'370700','潍坊市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
145,'370800','济宁市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
146,'370900','泰安市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
147,'371000','威海市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
148,'371100','日照市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
149,'371200','莱芜市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
150,'371300','临沂市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
151,'371400','德州市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
152,'371500','聊城市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
153,'371600','滨州市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
154,'371700','荷泽市','370000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
155,'410100','郑州市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
156,'410200','开封市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
157,'410300','洛阳市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
158,'410400','平顶山市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
159,'410500','安阳市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
160,'410600','鹤壁市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
161,'410700','新乡市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
162,'410800','焦作市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
163,'410900','濮阳市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
164,'411000','许昌市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
165,'411100','漯河市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
166,'411200','三门峡市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
167,'411300','南阳市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
168,'411400','商丘市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
169,'411500','信阳市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
170,'411600','周口市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
171,'411700','驻马店市','410000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
172,'420100','武汉市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
173,'420200','黄石市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
174,'420300','十堰市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
175,'420500','宜昌市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
176,'420600','襄樊市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
177,'420700','鄂州市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
178,'420800','荆门市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
179,'420900','孝感市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
180,'421000','荆州市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
181,'421100','黄冈市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
182,'421200','咸宁市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
183,'421300','随州市','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
184,'422800','恩施土家族苗族自治州','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
185,'429000','省直辖行政单位','420000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
186,'430100','长沙市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
187,'430200','株洲市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
188,'430300','湘潭市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
189,'430400','衡阳市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
190,'430500','邵阳市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
191,'430600','岳阳市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
192,'430700','常德市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
193,'430800','张家界市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
194,'430900','益阳市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
195,'431000','郴州市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
196,'431100','永州市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
197,'431200','怀化市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
198,'431300','娄底市','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
199,'433100','湘西土家族苗族自治州','430000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
200,'440100','广州市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
201,'440200','韶关市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
202,'440300','深圳市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
203,'440400','珠海市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
204,'440500','汕头市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
205,'440600','佛山市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
206,'440700','江门市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
207,'440800','湛江市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
208,'440900','茂名市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
209,'441200','肇庆市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
210,'441300','惠州市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
211,'441400','梅州市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
212,'441500','汕尾市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
213,'441600','河源市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
214,'441700','阳江市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
215,'441800','清远市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
216,'441900','东莞市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
217,'442000','中山市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
218,'445100','潮州市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
219,'445200','揭阳市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
220,'445300','云浮市','440000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
221,'450100','南宁市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
222,'450200','柳州市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
223,'450300','桂林市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
224,'450400','梧州市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
225,'450500','北海市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
226,'450600','防城港市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
227,'450700','钦州市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
228,'450800','贵港市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
229,'450900','玉林市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
230,'451000','百色市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
231,'451100','贺州市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
232,'451200','河池市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
233,'451300','来宾市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
234,'451400','崇左市','450000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
235,'460100','海口市','460000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
236,'460200','三亚市','460000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
237,'469000','省直辖县级行政单位','460000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
238,'500100','市辖区','500000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
239,'500200','县','500000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
240,'500300','市','500000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
241,'510100','成都市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
242,'510300','自贡市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
243,'510400','攀枝花市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
244,'510500','泸州市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
245,'510600','德阳市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
246,'510700','绵阳市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
247,'510800','广元市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
248,'510900','遂宁市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
249,'511000','内江市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
250,'511100','乐山市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
251,'511300','南充市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
252,'511400','眉山市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
253,'511500','宜宾市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
254,'511600','广安市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
255,'511700','达州市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
256,'511800','雅安市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
257,'511900','巴中市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
258,'512000','资阳市','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
259,'513200','阿坝藏族羌族自治州','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
260,'513300','甘孜藏族自治州','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
261,'513400','凉山彝族自治州','510000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
262,'520100','贵阳市','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
263,'520200','六盘水市','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
264,'520300','遵义市','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
265,'520400','安顺市','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
266,'522200','铜仁地区','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
267,'522300','黔西南布依族苗族自治州','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
268,'522400','毕节地区','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
269,'522600','黔东南苗族侗族自治州','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
270,'522700','黔南布依族苗族自治州','520000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
271,'530100','昆明市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
272,'530300','曲靖市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
273,'530400','玉溪市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
274,'530500','保山市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
275,'530600','昭通市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
276,'530700','丽江市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
277,'530800','思茅市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
278,'530900','临沧市','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
279,'532300','楚雄彝族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
280,'532500','红河哈尼族彝族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
281,'532600','文山壮族苗族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
282,'532800','西双版纳傣族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
283,'532900','大理白族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
284,'533100','德宏傣族景颇族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
285,'533300','怒江傈僳族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
286,'533400','迪庆藏族自治州','530000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
287,'540100','拉萨市','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
288,'542100','昌都地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
289,'542200','山南地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
290,'542300','日喀则地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
291,'542400','那曲地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
292,'542500','阿里地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
293,'542600','林芝地区','540000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
294,'610100','西安市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
295,'610200','铜川市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
296,'610300','宝鸡市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
297,'610400','咸阳市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
298,'610500','渭南市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
299,'610600','延安市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
300,'610700','汉中市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
301,'610800','榆林市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
302,'610900','安康市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
303,'611000','商洛市','610000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
304,'620100','兰州市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
305,'620200','嘉峪关市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
306,'620300','金昌市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
307,'620400','白银市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
308,'620500','天水市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
309,'620600','武威市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
310,'620700','张掖市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
311,'620800','平凉市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
312,'620900','酒泉市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
313,'621000','庆阳市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
314,'621100','定西市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
315,'621200','陇南市','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
316,'622900','临夏回族自治州','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
317,'623000','甘南藏族自治州','620000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
318,'630100','西宁市','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
319,'632100','海东地区','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
320,'632200','海北藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
321,'632300','黄南藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
322,'632500','海南藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
323,'632600','果洛藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
324,'632700','玉树藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
325,'632800','海西蒙古族藏族自治州','630000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
326,'640100','银川市','640000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
327,'640200','石嘴山市','640000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
328,'640300','吴忠市','640000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
329,'640400','固原市','640000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
330,'640500','中卫市','640000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
331,'650100','乌鲁木齐市','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
332,'650200','克拉玛依市','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
333,'652100','吐鲁番地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
334,'652200','哈密地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
335,'652300','昌吉回族自治州','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
336,'652700','博尔塔拉蒙古自治州','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
337,'652800','巴音郭楞蒙古自治州','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
338,'652900','阿克苏地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
339,'653000','克孜勒苏柯尔克孜自治州','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
340,'653100','喀什地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
341,'653200','和田地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
342,'654000','伊犁哈萨克自治州','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
343,'654200','塔城地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
344,'654300','阿勒泰地区','650000')&lt;/p&gt;
&lt;p&gt;INSERT [area] ([id],[cityID],[city],[father]) VALUES (
345,'659000','省直辖行政单位','650000')&lt;/p&gt;</summary><category term="Database"></category><category term="SQL"></category></entry><entry><title>IIS IE7 Opera Firefox 需要用户名和密码？【转载】</title><link href="/2009/07/iis-ie7-opera-firefox-requires-a-user-name-and-password/" rel="alternate"></link><updated>2009-07-30T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-07-30:2009/07/iis-ie7-opera-firefox-requires-a-user-name-and-password/</id><summary type="html">&lt;p&gt;转载自《&lt;a href="http://www.ruizhisky.cn/article/Digest/207.htm"&gt;IIS IE7 Opera Firefox 需要用户名和密码？ -
睿之工作室&lt;/a&gt;》（虽然从图片上来看是转载自多彩工作室```）&lt;/p&gt;
&lt;p&gt;我先说几句：在FireFox about:config那里输入值时候，如果有多个网址应该用逗号隔开，如「localhost,
127.0.0.1」，这样比原文章中只添加localhost要更加方便。&lt;/p&gt;
&lt;p&gt;转载的文字加灰色&lt;/p&gt;
&lt;p&gt;Windows XP Professional IIS 5.1&lt;/p&gt;
&lt;p&gt;原因：由于安全性能优越IE7.0的internet默认采用的「用户被询问是否允许带参数加载或编码控件」选项，也就是总是要验证用户是否有参数
加载，而IIS默认采用的匿名登录不进行任何验证，而前后的internet和IIS的设置矛盾，ie7的权限优先于iis所以冲突导致总是要密码验证。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.i170.com/Attach/5DE1DA55-8E8E-4A0A-8768-DB93CD5E0E6A" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.i170.com/Attach/2681B4F4-D11A-47ED-8FB9-E7B0BE76FC5A" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firefox 登录本地站点也需要用户名和密码的吧，用此办法即可解决&lt;/p&gt;
&lt;p&gt;在Firefox地址栏中输入：about:config&lt;/p&gt;
&lt;p&gt;然后在过滤器中输入：NTLM&lt;/p&gt;
&lt;p&gt;双击network.automatic-ntlm-auth.trusted-uris,&lt;/p&gt;
&lt;p&gt;在输入值中输入   localhost&lt;/p&gt;
&lt;p&gt;重启FireFox,重新访问站点就可以解决这个问题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Opera&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Opera地址栏中输入：about:config&lt;/p&gt;
&lt;p&gt;找到Network点击打开折叠&lt;/p&gt;
&lt;p&gt;去掉Check Local Hostname后面的勾后保存&lt;/p&gt;
&lt;p&gt;重启Opera,重新访问站点就可以解决这个问题了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="file:///C:/DOCUME%7E1/%E7%8B%84%E6%95%AC%E8%B6%85/LOCALS%7E1/Temp/moz-" title="screenshot.png" /&gt;&lt;/p&gt;</summary><category term="FireFox"></category><category term="IE7"></category><category term="Opera"></category></entry><entry><title>MySQL Command Line Client乱码问题及解决方案</title><link href="/2009/07/mysql-command-line-client-garbled-problems-and-solutions/" rel="alternate"></link><updated>2009-07-06T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-07-06:2009/07/mysql-command-line-client-garbled-problems-and-solutions/</id><summary type="html">&lt;p&gt;以前用MySQL时候都是可视化界面，如MySQL Admin使用，现在学着使用MySQL Command Line client，初次接触，就遇到乱码问题。&lt;/p&gt;
&lt;p&gt;乱码是中文字符串的，Google后，找到一些解决方案。摘录如下：&lt;/p&gt;
&lt;p&gt;引用自今天去祸害哪家的闺女呢？&amp;lt;&lt;a href="http://leonel.javaeye.com/blog/315090"&gt;猛击这里打开&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;1:改变数据库的默认编码配置，在MYSQL的安装目录中，找到my.ini，修改默认编&lt;/p&gt;
&lt;p&gt;码为：default-character-set=utf8&lt;/p&gt;
&lt;p&gt;2:建立数据库时，CREATE DATABASE ms_db CHARACTER SET utf8 COLLATE&lt;/p&gt;
&lt;p&gt;utf8_general_ci;&lt;/p&gt;
&lt;p&gt;3:执行脚本：指定编码格式set names utf8(注意，不是UTF-8)&lt;/p&gt;
&lt;p&gt;4:如果你采用的是外部接入的方式，在连接中确定请求的编码格式如：&lt;/p&gt;
&lt;p&gt;jdbc:mysql://localhost:3306 /ms_db?&lt;/p&gt;
&lt;p&gt;useUnicode=true&amp;amp;characterEncoding=UTF-8(不要出现任何空格，否则出错)&lt;/p&gt;
&lt;p&gt;我使用的是第3种方法，由于我的数据库是Hibernate生成的，所以编码集改为utf8依然乱码，使用gbk就可以了。&lt;/p&gt;</summary><category term="Database"></category><category term="MySQL"></category><category term="编码"></category></entry><entry><title>MYSQL数据类型长度常规的建库策略</title><link href="/2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/" rel="alternate"></link><updated>2009-06-25T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2009-06-25:2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/</id><summary type="html">&lt;p&gt;无论是在小得可怜的免费数据库空间或是大型电子商务网站，合理的设计表结构、充分利用空间是十分必要的。这就要求我们对数据库系统的常用数据类型有充分的认识。下面我
就将我的一点心得写出来跟大家分享。&lt;/p&gt;
&lt;h3&gt;一、数字类型&lt;/h3&gt;
&lt;p&gt;数字类型按照我的分类方法分为三类：整数类、小数类和数字类。&lt;/p&gt;
&lt;p&gt;我所谓的「数字类」，就是指DECIMAL和NUMERIC，它们是同一种类型。它严格的说不是一种数字类型，因为他们实际上是将数字以字符串形式保存的；他的值的每
一位（包括小数点）占一个字节的存储空间，因此这种类型耗费空间比较大。但是它的一个突出的优点是小数的位数固定，在运算中不会「失真」，所以比较适合用于「价格」、
「金额」这样对精度要求不高但准确度要求非常高的字段。&lt;/p&gt;
&lt;p&gt;小数类，即浮点数类型，根据精度的不同，有 FLOAT（单精度）和DOUBLE（双精度）两种。它们的优势是精确度，FLOAT可以表示绝对值非常小、小到约
1.17E- 38 （0.000...0117， 小数点后面有37个零）的小数，而DOUBLE更是可以表示绝对值小到约 2.22E- 308
（0.000...0222， 小数点后面有307个零）的小数。FLOAT类型和DOUBLE类型占用存储空间分别是4字节和8字节。如果需要用到小数的字段，精度
要求不高的，当然用FLOAT了！可是说句实在话，我们「民用」的数据，哪有要求精度那么高的呢？这两种类型至今我没有用过——我还没有遇到适合于使用它们的事例。&lt;/p&gt;
&lt;p&gt;用的最多的，最值得精打细算的，是整数类型。从只占一个字节存储空间的TINYINT到占8个字节的
BIGINT，挑选一个「够用」并且占用存储空间最小的类型是设计数据库时应该考虑的。TINYINT、SMALLINT、MEDIUMINT、INT和
BIGINT占用存储空间分别为1字节、2字节、3字节、4字节和8字节，就无符号的整数而言，这些类型能表示的最大整数分别为255、65535、 1677721
5、4294967295和18446744073709551615。如果用来保存用户的年龄（举例来说，数据库中保存年龄是不可取的），用TINYINT就够了；
九城的《纵横》里，各项技能值，用SMALLINT也够了；如果要用作一个肯定不会超过16000000行的表的
AUTO_INCREMENT的IDENTIFY字段，当然用 MEDIUMINT 不用 INT
，试想，每行节约一个字节，16000000行可以节约10兆多呢！&lt;/p&gt;
&lt;h3&gt;二、日期时间类型&lt;/h3&gt;
&lt;p&gt;日期和时间类型比较简单，无非是 DATE、TIME、DATETIME、TIMESTAMP
和YEAR等几个类型。只对日期敏感，而对时间没有要求的字段，就用DATE而不用DATETIME是不用说的了；单独使用时间的情况也时有发生——使用
TIME；但最多用到的还是用DATETIME。在日期时间类型上没有什么文章可做，这里就不再详述。&lt;/p&gt;
&lt;h3&gt;三、字符（串）类型&lt;/h3&gt;
&lt;p&gt;不要以为字符类型就是 CHAR！CHAR和VARCHAR的区别在于CHAR是固定长度，只要你定义一个字段是CHAR(10),那么不论你存储的数据是否达到了1
0个字节，它都要占去10个字节的空间；而VARVHAR则是可变长度的，如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为
VARCHAR(10)是最合算的，VARCHAR 类型的实际长度是它的值的(实际长度+1)。为什么「+1」呢？这一个字节用于保存实际使用了多大的长度呀！从这
个「+1」中也应该看到，如果一个字段，它的可能值最长是10个字符，而多数情况下也就是用到了10个字符时，用
VARCHAR就不合算了：因为在多数情况下，实际占用空间是11个字节，比用CHAR(10)还多占用一个字节！&lt;/p&gt;
&lt;p&gt;举个例子，就是一个存储股票名称和代码的表，股票名称绝大部分是四个字的，即8个字节；股票代码，上海的是六位数字，深圳的是四位数字。这些都是固定长度的，股票名称
当然要用CHAR(8 )；股票代码虽然是不固定长度，但如果使用VARVHAR(6)，一个深圳的股票代码实际占用空间是5个字节，而一个上海的股票代码要占用7个
字节！考虑到上海的股票数目比深圳的多，那么用VARCHAR(6)就不如CHAR(6)合算了。&lt;/p&gt;
&lt;p&gt;虽然一个CHAR或
VARVHAR的最大长度可以到255，我认为大于20的CHAR是几乎用不到的——很少有大于20个字节长度的固定长度的东东吧？不是固定长度的就用 VARCHA
R！大于100的VARCHAR也是几乎用不到的——比这更大的用TEXT就好了。TINYTEXT，最大长度为255，占用空间也是(实际长度+1)；TEXT，最
大长度65535，占用空间是(实际长度+2)；MEDIUMTEXT，最大长度16777215，占用空间是(实际长度+3)；LONGTEXT，最大长度4294
967295，占用空间是(实际长度+4)。为什么「+1」？「+2」？「+3」？「+4」？你要是还不知道就该打PP了。这些可以用在论坛啊、新闻啊，什么的，用来
保存文章的正文。根据实际情况的不同，选择从小到大的不同类型。&lt;/p&gt;
&lt;h3&gt;四、枚举和集合类型&lt;/h3&gt;
&lt;p&gt;枚举（ENUM）类型，最多可以定义65535种不同的字符串从中做出选择，只能并且必须选择其中一种，占用存储空间是一个或两个字节，由枚举值的数目决定；集合（S
ET）类型，最多可以有64个成员，可以选择其中的零个到不限定的多个，占用存储空间是一个到八个字节，由集合可能的成员数目决定。&lt;/p&gt;
&lt;p&gt;举个例子来说，在SQLServer中，你可以节约到用一个Bit类型来表示性别（男/女），但MySQL没有Bit，用TINTINT？不，可以用
ENUM(帅哥,美眉)！只有两种选择，所以只需一个字节——跟TINYINT一样大，但却可以直接用字符串帅哥和美眉来存取。真是太方便啦！&lt;/p&gt;
&lt;p&gt;好了，MySQL的数据类型介绍得差不多，我的建库策略也随着介绍数据类型介绍给大家一些。但这只是其中一部分，篇幅有限，不能再细说；其他的，就靠各人在对数据类型
理解的基础上，多多实践、多多讨论。&lt;/p&gt;
&lt;p&gt;转载自YD631.com&amp;lt;&lt;a href="http://www.yd631.com/blog/article.asp?id=179"&gt;猛击这里打开&lt;/a&gt;&amp;gt;，原始作者信息不详，
感谢该作者的文章。&lt;/p&gt;</summary><category term="Database"></category><category term="MySQL"></category></entry><entry><title>mysql 数据库导出/导入</title><link href="/2008/10/mysql-database-export-import/" rel="alternate"></link><updated>2008-10-23T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2008-10-23:2008/10/mysql-database-export-import/</id><summary type="html">&lt;p&gt;正在学JSP，用的TomCat和MySQL，没有用CSV控制，所以数据库靠导出导入&lt;/p&gt;
&lt;p&gt;导出：&lt;/p&gt;
&lt;p&gt;cd bin;&lt;/p&gt;
&lt;p&gt;mysqldump -uroot -proot xxx &amp;gt; xxx.sql;&lt;/p&gt;
&lt;p&gt;导入：&lt;/p&gt;
&lt;p&gt;cd bin;&lt;/p&gt;
&lt;p&gt;create xxx;&lt;/p&gt;
&lt;p&gt;source xxx.sql;&lt;/p&gt;</summary><category term="Database"></category><category term="MySQL"></category></entry></feed>
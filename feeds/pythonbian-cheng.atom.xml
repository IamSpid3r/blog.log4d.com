<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/feeds/pythonbian-cheng.atom.xml" rel="self"></link><id>/</id><updated>2013-11-01T01:11:00+08:00</updated><entry><title>在 Python 中使用 GDB 来调试[译文]</title><link href="/2013/11/python-gdb/" rel="alternate"></link><updated>2013-11-01T01:11:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-11-01:2013/11/python-gdb/</id><summary type="html">&lt;p&gt;大约一年前，我接触了 Java 中的 &lt;a href="http://kenai.com/projects/btrace"&gt;Btrace&lt;/a&gt;
能够不停机查看线上 JVM 运行情况的特性让我艳羡不已。
另外还有强悍的 jStack 和 jConsole 来进行运行期侦测，JVM 的工业级强度果然不是盖的。&lt;/p&gt;
&lt;p&gt;当时公司技术方面也遇到了一些瓶颈，一部分原因是 CPython 本身的 IO 模型问题，
另一方面也和早期代码写的极不工整脱不了关系。万般无奈之下，我们用
Jython 推翻重做了主要业务，效果立竿见影，但同时也把真实问题给规避掉了。&lt;/p&gt;
&lt;p&gt;在这之后我们在 JVM 的领导下，走上了康庄大道。但我心中始终还有一个梗，
就是想对性能遇到瓶颈的 Python Process 进行线上侦测。
这篇文章就是开始的第一步。&lt;/p&gt;
&lt;p&gt;PS:这篇文章理论上是可行的，但是在我机器（Ubuntu 12.04 / 系统自带 Python）
无法正常执行，会爆出 &lt;code&gt;unable to read python frame information&lt;/code&gt;
的问题。解决方法我会在下篇文章中写出。这里只是单纯翻译一下原文。&lt;/p&gt;
&lt;p&gt;原文可以移步 &lt;a href="https://wiki.python.org/moin/DebuggingWithGdb"&gt;https://wiki.python.org/moin/DebuggingWithGdb&lt;/a&gt;。&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;有一些类型的 bugs 很难使用 Python 直接进行 debug，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段错误（无法被捕捉的 Python 异常）&lt;/li&gt;
&lt;li&gt;卡住的进程（这种情况下面没法使用 &lt;code&gt;pdb&lt;/code&gt; 来进行跟踪）&lt;/li&gt;
&lt;li&gt;控制之外的后台处理 daemon 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些情况下，你可以使用尝试使用 &lt;code&gt;gdb&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;需要在系统安装 &lt;code&gt;gdb&lt;/code&gt; 和 Python debug 扩展。
Python debug 扩展包含了一些 debug 命令，并且添加了一些 Python 特定的命令到 &lt;code&gt;gdb&lt;/code&gt;。
在主流的 Linux 发行版中，你可以轻松的安装他们：&lt;/p&gt;
&lt;p&gt;Fedora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debuginfo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubunt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一些老系统上面，也一样可以使用 &lt;code&gt;gdb&lt;/code&gt;，具体看文章末尾。&lt;/p&gt;
&lt;h2&gt;使用 &lt;code&gt;GDB&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;有两种可行的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始就使用 &lt;code&gt;gdb&lt;/code&gt; 来启动应用&lt;/li&gt;
&lt;li&gt;连接到一个已经运行的 Python 进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 下面启动 Python 同样有两种方式：&lt;/p&gt;
&lt;p&gt;交互式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt;
&lt;span class="nx"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="na"&gt;-ex&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的话，它会一直运行直到退出、段错误、或者人为的停止（使用 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;如果进程已经开始运行，你可以通过 PID 来接入它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;调试进程&lt;/h2&gt;
&lt;p&gt;如果你的程序段错误了， &lt;code&gt;gdb&lt;/code&gt; 会自动暂停程序，这样你可以切换到 &lt;code&gt;gdb&lt;/code&gt;
命令行来检查状态。你也可以人为地使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停程序运行。&lt;/p&gt;
&lt;p&gt;查看 &lt;a href="https://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;EasierPythonDebugging&lt;/a&gt;
获得 &lt;code&gt;gdb&lt;/code&gt; 里面的 Python 命令列表。&lt;/p&gt;
&lt;h2&gt;查看 C 调用栈&lt;/h2&gt;
&lt;p&gt;如果你在 debug 段错误，你最想做的可能就是查看 C 调用栈。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 的命令行里面，只要运行一下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;bt&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3b705&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3ce8e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;abort&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mh"&gt;0x00000000004c164f&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;posix_abort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;noargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;posixmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7158&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000489fac&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;call_function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pp_stack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x7fbffff110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oparg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3531&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000485fc2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;PyEval_EvalFrame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x66ccd8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2163&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运气好的话，你可以直接看到问题出现在什么地方。如果它提供的信息不能直接帮你解决问题，
你可以尝试继续追踪调用栈。
调式的结果取决于 debug 信息的有效程度。&lt;/p&gt;
&lt;h2&gt;查看 Python 调用栈&lt;/h2&gt;
&lt;p&gt;如果你安装了 Python 扩展，你可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以获取熟悉的 Python 源代码。&lt;/p&gt;
&lt;h2&gt;对挂住的进程开刀&lt;/h2&gt;
&lt;p&gt;如果一个进程看上去挂住了，他可能在等待什么东西（比如锁、IO 等等）。
也有可能在拼命的跑循环。连接上这个进程，然后检查调用栈也许可以帮上忙。&lt;/p&gt;
&lt;p&gt;如果进程在疯狂循环，你可以先让它运行一会，使用 &lt;code&gt;cont&lt;/code&gt; 命令，
然后使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停，并且打印出调用栈。&lt;/p&gt;
&lt;p&gt;如果一些线程卡住了，下面的命令可能会帮上忙：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;
  &lt;span class="n"&gt;Id&lt;/span&gt;   &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt;         &lt;span class="n"&gt;Frame&lt;/span&gt;
  &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa29feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17914&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NotificationThr&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa03fcb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17913&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QProcessManager&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa1bffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17909&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;31&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa31ffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17907&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa3fdfb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17906&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QInotifyFileSys&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;29&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa481cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17905&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa508db40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17883&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QThread&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa5cebb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17882&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa660cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17881&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xabdffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17876&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gdbus&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xac7b7b40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17875&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dconf worker&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xb7d876c0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17863&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当前运行的线程被标记为 &lt;code&gt;*&lt;/code&gt;，要查看 Python 代码运行到哪里，使用 &lt;code&gt;py-list&lt;/code&gt; 查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="mi"&gt;2025&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="mi"&gt;2026&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darwin&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Spyder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2027&lt;/span&gt;            &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="mi"&gt;2028&lt;/span&gt;                         &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;2029&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2030&lt;/span&gt;        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2031&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="mi"&gt;2032&lt;/span&gt;
&lt;span class="mi"&gt;2033&lt;/span&gt;
&lt;span class="mi"&gt;2034&lt;/span&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__remove_temp_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2035&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;osp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMP_SESSION_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有进程的 Python 代码位置，可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
 &lt;span class="mi"&gt;204&lt;/span&gt;        &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;205&lt;/span&gt;
 &lt;span class="mi"&gt;206&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;207&lt;/span&gt;            &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;dup() -&amp;gt; socket object&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;197&lt;/span&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_delegate_methods&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;198&lt;/span&gt;                &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mi"&gt;199&lt;/span&gt;        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock"&gt;https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;老系统上的 GDB&lt;/h2&gt;
&lt;p&gt;有时候你需要在老系统上面安装 &lt;code&gt;gdb&lt;/code&gt;，这时候你可能需要下列信息：&lt;/p&gt;
&lt;h3&gt;GDB Macros&lt;/h3&gt;
&lt;p&gt;一些随着 Python 发布的 GDB 脚本可以用来调试 Python 进程。
你可以把 Python 源码里面的 &lt;code&gt;Misc/gdbinit&lt;/code&gt;  拷贝到 &lt;code&gt;~/.gdbinit&lt;/code&gt;，
或者从 &lt;a href="http://svn.python.org/view/python/branches/release27-maint/Misc/gdbinit?view=log"&gt;Subversion&lt;/a&gt;
来拷贝他们。请注意你的 Python，确保使用正确的代码版本，否则有些功能可能无法工作。&lt;/p&gt;
&lt;p&gt;请注意有些新的 GDB 命令只有在 debug 需要的库存在才能正常工作。&lt;/p&gt;
&lt;p&gt;这个脚本在 Ubuntu 上面的 gcc 4.5.2 工作时，会爆出错误
&lt;code&gt;No symbol "co" in current context.&lt;/code&gt;，是因为 &lt;code&gt;call_function&lt;/code&gt; 在
&lt;a href="https://wiki.python.org/moin/EvalFrameEx"&gt;PyEval_EvalFrameEx&lt;/a&gt; 和
&lt;a href="https://wiki.python.org/moin/EvalCodeEx"&gt;PyEval_EvalCodeEx&lt;/a&gt; 之间。
重新使用 &lt;code&gt;make "CFLAGS=-g -fno-inline -fno-strict-aliasing"&lt;/code&gt;
编译 Python 可以解决这个问题。&lt;/p&gt;
&lt;h3&gt;使用 Python Stack Traces GDB 脚本&lt;/h3&gt;
&lt;p&gt;在 gdb 命令行里，可以这样查看 Python stack trace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，可以获取一列 stack frame 的 Python 变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystackv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多 gdbinit 里面没定义的有用的脚本可以在这里找到：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros"&gt;http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros&lt;/a&gt;&lt;/p&gt;</summary><category term="GDB"></category><category term="译文"></category></entry><entry><title>在 Python 中使用 epoll[译文]</title><link href="/2013/01/python-epoll/" rel="alternate"></link><updated>2013-01-12T00:01:00+08:00</updated><author><name>alswl</name></author><id>tag:,2013-01-12:2013/01/python-epoll/</id><summary type="html">&lt;p&gt;原文地址： &lt;a href="http://scotdoyle.com/python-epoll-howto.html"&gt;http://scotdoyle.com/python-epoll-howto.html&lt;/a&gt; ，
我这里取精简内容翻译过来。&lt;/p&gt;
&lt;p&gt;============ 正文开始 ============ &lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Python 从 2.6 开始支持 &lt;a href="http://linux.die.net/man/4/epoll"&gt;epoll&lt;/a&gt;。现在我们用 Python3 来写基于这些 API
的 epoll 范例。&lt;/p&gt;


&lt;h2&gt;阻塞的 Socket 通信范例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: Mon, 1 Jan 1996 01:01:01 GMT&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type: text/plain&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 13&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;connectiontoclient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个范例中的代码在 &lt;code&gt;accept()&lt;/code&gt; 、 &lt;code&gt;recv()&lt;/code&gt; 和 &lt;code&gt;send()&lt;/code&gt; 时候会发生阻塞，
导致其他连接无法完成。&lt;/p&gt;
&lt;p&gt;通常情况下，在我们使用阻塞模型时候，会专门建立一个主线程来进行监听，
将建立成功的连接交给其他线程操作，然后继续在主线程上面监听。
这样一来，就不会受单次请求阻塞的限制。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kegel.com/c10k.html"&gt;C10K&lt;/a&gt; 问题描述了其他处理高并发方法，比如异步 Socket，
通过监听事件来触发预设的响应。异步 Socket 可以是单线程，也可以是多线程。&lt;/p&gt;
&lt;p&gt;Python 的 API 中包含了 select / poll / epoll，具体的可用性依赖于操作系统。
他们的效率是 epoll &amp;gt; poll &amp;gt; select，从这个 &lt;a href="http://lse.sourceforge.net/epoll/index.html"&gt;性能测试文章&lt;/a&gt; 就可以看出来。&lt;/p&gt;
&lt;h2&gt;epoll 异步编程范例&lt;/h2&gt;
&lt;p&gt;epoll 的流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 epoll 实例&lt;/li&gt;
&lt;li&gt;告诉 epoll 去监听哪几种类型事件&lt;/li&gt;
&lt;li&gt;向 epoll 查询最近已监听事件的变化&lt;/li&gt;
&lt;li&gt;根据不同的类型做不同的处理&lt;/li&gt;
&lt;li&gt;让 epoll 修改监听列表&lt;/li&gt;
&lt;li&gt;重复 3-5 直到结束&lt;/li&gt;
&lt;li&gt;消灭 epoll 实例&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;范例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;

&lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Date: Mon, 1 Jan 1996 01:01:01 GMT&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type: text/plain&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;Content-Length: 13&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;epoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
            &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;EOL1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;EOL2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
               &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;byteswritten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;byteswritten&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SHUT_RDWR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLHUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最关键的几行如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;16：注册感兴趣的事件&lt;/li&gt;
&lt;li&gt;23：如果发现是监听 socket，则创建连接&lt;/li&gt;
&lt;li&gt;30：读事件处理&lt;/li&gt;
&lt;li&gt;33：读事件完成后，修改 epoll 对应的状态到写事件&lt;/li&gt;
&lt;li&gt;35：写事件&lt;/li&gt;
&lt;li&gt;41：释放对应的连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Epoll 分边缘触发（edge-triggered）和水平触发（level-triggered）两种，
前者只被内核触发一次通知（除非状态被改变为未就绪），后者在触发后如果不做操作，
以后仍然会收到内核的触发通知。&lt;/p&gt;
&lt;h2&gt;更多优化&lt;/h2&gt;
&lt;h3&gt;连接等待池大小&lt;/h3&gt;
&lt;p&gt;我们之前的代码直接使用 &lt;code&gt;listen()&lt;/code&gt; 建立连接，可以通过设定一个队列大小，
在队列满了时候，就不再接受新的连接，从而保证已经接受的连接顺利完成。&lt;/p&gt;
&lt;h3&gt;TCP 选项&lt;/h3&gt;
&lt;p&gt;使用 [TCP_CORK][] 功能，可以将小数据包封装成大包传输，提高效率。&lt;/p&gt;
&lt;p&gt;[TCP_NODELAY][] 则作用相反，将大包分成小包发送出去。比较适合实时应用比如 SSH。&lt;/p&gt;
&lt;p&gt;（译者：&lt;a href="http://www.uplook.cn/blog/8/81276/"&gt;Linux下高性能网络编程中的几个TCP/IP选项&lt;/a&gt;介绍这几个 HTTP，写的不错。&lt;/p&gt;
&lt;p&gt;范例中的源码在 &lt;a href="http://scotdoyle.com/python-epoll-examples.tar.gz"&gt;source code&lt;/a&gt; 下载。&lt;/p&gt;</summary><category term="译文"></category></entry><entry><title>如何让 Instagram 在一百多万用户爆炸后稳定运行</title><link href="/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/" rel="alternate"></link><updated>2012-11-19T00:06:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-11-19:2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</id><summary type="html">&lt;p&gt;原文链接：&lt;a href="http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in"&gt;Keeping Instagram up with over a million new users in twelve hours&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这周二我们发布了 &lt;a href="https://play.google.com/store/apps/details?id=com.instagram.android"&gt;Instagram for Android&lt;/a&gt;，反响空前强烈。
最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。
尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。
在这里我们将分享一些帮助我们解决问题的工具和技术。&lt;/p&gt;


&lt;h2&gt;statsd&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://github.com/etsy/statsd/"&gt;statsd&lt;/a&gt; 在 Instagram 很受欢迎。这是 &lt;a href="http://github.com/etsy/"&gt;Etsy&lt;/a&gt; 写的一个网络监控器，
能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。
我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。
同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。&lt;/p&gt;
&lt;p&gt;我们喜欢 statsd 的最大原因是它能迅速将状态显示并图形化出来。
Stats 几乎是实时的（在我们系统中有 10 秒钟的延时）
帮助我们评估系统状况和代码变化情况。
Stats 可以随意启用，当我们需要跟踪时，能够快速启用它。
你可以指定一个取样密度，来均匀的查看 web 应用概况，
而不会影响它运行效率。&lt;/p&gt;
&lt;p&gt;总结：实时统计可以动态添加，帮助你线上诊断而无须等待问题重现。&lt;/p&gt;
&lt;h2&gt;Dogslow&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.bitbucket.org/2011/05/17/tracking-slow-requests-with-dogslow/"&gt;Bitbucket&lt;/a&gt; 出品，Dogslow 是一个 Django middleware，它能监视运行的进程，
当发现有进程运行时间超过 &lt;em&gt;N&lt;/em&gt; 秒时，会保存当前进程信息的快照到磁盘。
一直开着它很耗性能，但当去定位突发问题的瓶颈时，就会非常有用（我们在 web
服务器上加了一个开关控制）。&lt;/p&gt;
&lt;p&gt;在发布那天，我们发现很多运行时间超过 1.5s 的进程都卡在 memcached 的 set()
和 get_many() 方法上。我们使用 Munin 跟踪我们的机器状态，发现 memcached
每秒有 5 万次请求，因此，尽管还没到达 CPU 上限，却被 memcached
拖慢了应用服务器速度。&lt;/p&gt;
&lt;p&gt;总结：瓶颈往往是后台的一个短板造成的，定位到底哪里卡下来能帮助找出问题根源。&lt;/p&gt;
&lt;h2&gt;Replication &amp;amp; Read-slaves&lt;/h2&gt;
&lt;p&gt;我们主要的两个数据源 &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; 和 &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt; 都可以方便地主从分离。
当我们的 Redis 数据库到达每秒 4 万请求时候，开始成为瓶颈。我们在另外一台服务器
打开 &lt;a href="http://redis.io/topics/replication"&gt;SYNCing to the master&lt;/a&gt;，然后将读请求发送到这台服务器，
这些操作仅耗时 20 分钟。根据几个案例，有些机器的负载会偏离了我们预期，
所以我们会提前准备好从服务器，从而快速地分离出读请求。&lt;/p&gt;
&lt;p&gt;比方说 Postgres，我们混合使用 &lt;a href="http://wiki.postgresql.org/wiki/Streaming_Replication"&gt;Streaming Replication&lt;/a&gt; 和 Amazon EBS
快照来快速启动从服务器。所有从主 DB 到从服务器的数据不定时会有 EBS 快照。
根据这些快照，我们可以在 20 分钟内启动新的从服务器并通知主服务器。
在 AWS 这样的环境中，我们使用脚本和命令来很快的预判并部署新的从服务器。&lt;/p&gt;
&lt;p&gt;总结：如果读能力会变成瓶颈，那就预先准备好从服务器，并让他们轮询服务。
一旦出现了新的读问题，要做的仅仅是加更多的读服务器到轮询中去。&lt;/p&gt;
&lt;h2&gt;PGFouine&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://pgfouine.projects.postgresql.org/"&gt;PGFouine&lt;/a&gt; 是一个分析 PostgreSQL 查询日志并生成查询结果的工具。
将最重、最常用、最慢的查询拆分出来。我们写了一个 Fabric 脚本来方便的使用它，
连接到一个数据库，然后等待 30 秒并记录下其中每条查询，把结果保存到本地再用
pgfouine 来分析，这里可以看到 &lt;a href="https://gist.github.com/2307647"&gt;as a gist&lt;/a&gt;。PGFouine
是我们用来分析数据库性能的核心工具。帮我们找出哪些查询应该被 memcached 缓存，
哪些查询了过度的数据等等。发布那天数据库出现了一点压力，我们就跑 PGFouine，
然后部署一些提升性能的代码来缓解压力，然后再跑一次 PGFouine 来确认效果。&lt;/p&gt;
&lt;p&gt;知道平日里数据库表现性能很重要，因此我们也定期在无压力的服务器上统计信息。&lt;/p&gt;
&lt;p&gt;总结：数据库日志分析（尤其注意迭代循环查询和缓存经常使用的数据）&lt;/p&gt;
&lt;h2&gt;One more thing&lt;/h2&gt;
&lt;p&gt;另一个帮助我们顺利通过发布第一天的工具是我们自己写的一个 node.js 服务，node2dm，
用来推送通知消息到 Android C2DM 服务。它至今已经发送了 500 万条推送。&lt;/p&gt;
&lt;p&gt;我们调查了一些支持 C2DM 的可用服务，但要么是开源包不那么被积极维护，
要么是不支持 Google 所有的功能。我们现在用 &lt;a href="http://github.com/Instagram/node2dm"&gt;open sourcing node2dm&lt;/a&gt;，
你可以随意 forlk / pull-request 来帮助我们改进。&lt;/p&gt;
&lt;h2&gt;Interested?&lt;/h2&gt;
&lt;p&gt;如果你对这些很感兴趣，你可以跟我们联系来获得工作机会，&lt;a href="http://instagram.jobscore.com/jobs/instagram/engineer/bXctey0Oir4kCZeJe4bk1X"&gt;drop us a note&lt;/a&gt;，
我们需要知道你的想法。&lt;/p&gt;
&lt;p&gt;你可以在 Hacker News 来 &lt;a href="http://news.ycombinator.com/item?id=3804351"&gt;discuss this post&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mike Krieger, co-founder&lt;/em&gt;&lt;/p&gt;</summary><category term="Instagram"></category><category term="译文"></category><category term="Django"></category><category term="Database"></category></entry><entry><title>KuKu-一个 Weekend Project</title><link href="/2012/11/kuku/" rel="alternate"></link><updated>2012-11-18T22:31:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-11-18:2012/11/kuku/</id><summary type="html">&lt;p&gt;一个小小的 Weekend Project，基于 &lt;a href="http://webpy.org/"&gt;web.py&lt;/a&gt;。
代码在 &lt;a href="https://github.com/alswl/kuku"&gt;alswl / kuku&lt;/a&gt; ，很简陋，属于差不多能用阶段。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kuku" src="http://upload-log4d.qiniudn.com/2012/11/kuku.png" /&gt;&lt;/p&gt;
&lt;p&gt;基于以下原因开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想把服务器去 PHP 化，以前的 &lt;a href="http://upload-log4d.qiniudn.com/"&gt;upload.log4d.com&lt;/a&gt; 是基于 PHP 的，
详情请见 &lt;a href="http://log4d.com/2012/05/image-host/"&gt;使用独立图床子域名&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;刚买的 &lt;a href="http://www.linode.com/?r=7e51a136a0eca06c5f6474373f616bbdaa2b5b6c"&gt;Linode VPS&lt;/a&gt;，终于从 128MB 内存解放出来了，赶紧放个 Python 程序跑跑。&lt;/li&gt;
&lt;li&gt;想些 Python 了，手痒，想看看写这么简单的功能需要多长时间，
弥补上次没能参加黑客马拉松的遗憾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KuKu 的发音是我家乡话的「看看」。&lt;/p&gt;
&lt;p&gt;KuKu 中比较有趣的地方是，用了 &lt;a href="http://foundation.zurb.com/"&gt;Foundation&lt;/a&gt; 这个流式 Web 前端框架，
用了 &lt;a href="http://www.zurb.com/playground/foundation-icons"&gt;Foundation Icons Fonts&lt;/a&gt;，将 js 库全部托管在 &lt;a href="https://developers.google.com/speed/libraries/"&gt;Google Hosted Libaries&lt;/a&gt;
和 &lt;a href="http://cdnjs.com"&gt;cdnjs&lt;/a&gt; 上。&lt;/p&gt;
&lt;p&gt;这篇文章我看着都觉得水。&lt;/p&gt;</summary><category term="kuku"></category><category term="web.py"></category><category term="OpenSource"></category><category term="coffee-time-project"></category><category term="Foundation"></category></entry><entry><title>PyCon 2012 见闻</title><link href="/2012/10/pycon-2012/" rel="alternate"></link><updated>2012-10-21T21:15:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-10-21:2012/10/pycon-2012/</id><summary type="html">&lt;p&gt;PyCon 是 Python 领域最著名的技术会议，从 2011 年开始，中国区开始举办自己的
PyCon 大会。这次 PyCon 2012 分成两个场地同时进行，北京和上海，
并且在网上提供同步转播，各地也有组织线下收看的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyCon Logo" src="http://upload-log4d.qiniudn.com/2012/10/PyConChina2012.png" /&gt;&lt;/p&gt;
&lt;p&gt;去年时候我很遗憾的不能跑到上海来参加，现在我人就在上海，
怎能错过 Pythoner 的饕餮大餐呢？早就眼巴巴的买票准备参加了。&lt;/p&gt;


&lt;p&gt;上海这边的主题如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Python 产品构建与发布指南》- 沈崴&lt;/li&gt;
&lt;li&gt;《实战游戏客户端》 - 林伟&lt;/li&gt;
&lt;li&gt;《让程序运行更快》- 李小红&lt;/li&gt;
&lt;li&gt;《演进或革命 - 选型和架构的实践经验谈》 - 潘俊勇&lt;/li&gt;
&lt;li&gt;《网游开发中的 Python 组件》- 赖勇浩&lt;/li&gt;
&lt;li&gt;《自动化即时战斗游戏解决方案》 - 王健&lt;/li&gt;
&lt;li&gt;《人人可以化半小时开发一个全功能OpenERP模块》 - Tony Gu&lt;/li&gt;
&lt;li&gt;《元编程在redis orm中的应用》 - 许智翔&lt;/li&gt;
&lt;li&gt;《OpenERP即将推出的第7版的功能和新的编程框架介绍》- Eric Caudal&lt;/li&gt;
&lt;li&gt;《Python如何帮助「逆转三国」获得成功》- 车蕙怡&lt;/li&gt;
&lt;li&gt;《Pyramid Web Framework for Advanced Web Applications》- 黄峥峼 （Mark Huang）&lt;/li&gt;
&lt;li&gt;《用Tornado开发RESTful API应用》- 飞龙非龙&lt;/li&gt;
&lt;li&gt;《NOSQL和MySQL在django上的混合使用》- 黄昶&lt;/li&gt;
&lt;li&gt;《网页游戏的跨界开发》 - 董诣&lt;/li&gt;
&lt;li&gt;《阿里云之移动开发者上云》 - 刘飞&lt;/li&gt;
&lt;li&gt;《使用 Python 和 Django 建设维护学校门户》- 于夏桥 &lt;/li&gt;
&lt;li&gt;《python在linux运维中的应用》 - 吴晗&lt;/li&gt;
&lt;li&gt;《用Python替换C代码——A Python Successful Story》- Adieu（刁立知）&lt;/li&gt;
&lt;li&gt;《 Python in Gentoo Linux》- Patrick Lauer&lt;/li&gt;
&lt;li&gt;《基于nova的自动扩展和负载均衡》- 刘明华&lt;/li&gt;
&lt;li&gt;《用myTestCase模块来做python的UT》- 陈钢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我最喜欢的是 &lt;a href="http://shell909090.com/blog/"&gt;许智翔（shell）&lt;/a&gt; / 沈崴 / 林伟 / 黄峥峼 / 李小红 / 赖勇浩
的 Topic。其中尤其是沈崴关于输入处理的准则，解开我一个很久的疑惑。
沈崴这个 &lt;a href="http://www.slideshare.net/wilhelmshen/py-art"&gt;Python 编程艺术&lt;/a&gt; 是赖勇浩提到的幻灯片，强烈推荐观看。&lt;/p&gt;
&lt;p&gt;shell 的博客我一直在关注，也列入了我的 GR 「tag-必读」中，
这次听了他关于「元编程」的黑魔法，我也很有收获，而且他是个很有趣的人，
把 Topic 讲的很生动。&lt;/p&gt;
&lt;p&gt;我用 Pylons 一年多，所以对 Pyramid 有一种天然好感，可惜一直可机会去学习，
黄峥峼的 Topic 讲了很多关于 Pyramid 的东西，也很值得一看，
潘俊勇对 Pyramid 的来源补充也非常详细，果然是高手啊。&lt;/p&gt;
&lt;p&gt;本来还想听王捷讲一讲 &lt;a href="http://www.shanbay.com/"&gt;扇贝网&lt;/a&gt; 的 Django，可惜他居然去北京做 Topic，
我勒个去，要知道扇贝网可是在南京。王捷也是 NJLUG 成员，
下月他们还将提供 NJLUG 会场，一直没有机会见到，蛮可惜的。
而且他们也是用的 Django，现在遇到一些性能瓶颈，
讲座内容应该有很多值得学习，只能一会去看视频了。&lt;/p&gt;
&lt;p&gt;比较广告的就是「逆转三国」和「阿里云」的 Topic 啦，赞助商嘛，大家懂的。&lt;/p&gt;
&lt;p&gt;上一些拍的照片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="主持人开场" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-09.16.05.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;主持人开场，这位主持应该是 Intridea 的 Ruby 程序员，哈哈。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shell 在讲黑魔法" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-14.06.18.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;shell 在讲黑魔法&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 1 的圆桌" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-20-16.54.39.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Day 1 的圆桌&lt;/p&gt;
&lt;p&gt;&lt;img alt="赖勇浩和沈葳" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-21-09.58.48.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;赖勇浩和沈葳&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2 的圆桌" src="http://upload-log4d.qiniudn.com/2012/10/2012-10-21-17.48.42.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Day 2 的圆桌&lt;/p&gt;
&lt;p&gt;虽然 Python CN 邮件列表中有人反应今年不如去年质量高，我没有看过去年的 PyCon，
但是觉得今年的还是很不错，学到了很多东西，也见到了很多牛人真身。
一会准备把去年的 &lt;a href="2011"&gt;PyCon 2011&lt;/a&gt; 也学习一下。&lt;/p&gt;</summary><category term="PyCon"></category></entry><entry><title>Working with Python subprocess[译文]</title><link href="/2012/10/working-with-python-subprocess/" rel="alternate"></link><updated>2012-10-16T00:42:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-10-16:2012/10/working-with-python-subprocess/</id><summary type="html">&lt;p&gt;8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。&lt;/p&gt;
&lt;p&gt;这篇文章是在写 &lt;a href="http://kenai.com/projects/btrace/pages/Home"&gt;Btrace&lt;/a&gt; 脚本时候查资料看到的，
看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。
熬了一个月才磨出来，媳妇都快成婆了有木有。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href="http://jimmyg.org/blog/2009/working-with-python-subprocess.html"&gt;Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于「执行命令时候发生了什么」这个问题，可以在
&lt;a href="http://en.wikipedia.org/wiki/Redirection_(computing)"&gt;http://en.wikipedia.org/wiki/Redirection_(computing)&lt;/a&gt;
找到更多最新信息。这篇文章遵循 &lt;a href="http://www.gnu.org/copyleft/fdl.html"&gt;GFDL&lt;/a&gt; 协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我的上一篇日志中，我写到如何
&lt;a href="http://jimmyg.org/blog/2009/python-command-line-interface-%28cli%29-with-sub-commands.html"&gt;build a command line interface with sub-commands in Python&lt;/a&gt;。
这次我来尝试如何通过 Python 的 &lt;code&gt;subprocess&lt;/code&gt; 模块来和命令行指令进行交互。&lt;/p&gt;
&lt;p&gt;我想达到的目标是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当你键入命令时究竟发生了什么&lt;/li&gt;
&lt;li&gt;如何确认一个命令是否存在并找出到底在哪&lt;/li&gt;
&lt;li&gt;通过 Python 或 shell 执行命令&lt;/li&gt;
&lt;li&gt;向一个运行中的进程读取 STDOUT 或写入 STDIN&lt;/li&gt;
&lt;li&gt;检查进程的退出返回状态&lt;/li&gt;
&lt;li&gt;理解 Bash 在命令中断中扮演的角色，并如何将它们发送给程序&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;执行程序时发生了什么&lt;/h2&gt;
&lt;p&gt;当你双击桌面上的终端程序图标时，就会打开一个载入 &lt;code&gt;shell&lt;/code&gt; 的程序。
你键入的命令不会直接在内核执行，而是先和 shell 进行交互。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;Command&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
&lt;span class="n"&gt;Terminal&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;gnome&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
     &lt;span class="n"&gt;Shell&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="n"&gt;Bash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;↓&lt;/span&gt;
     &lt;span class="n"&gt;Kernel&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Linux&lt;/span&gt; &lt;span class="mf"&gt;2.6.24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多关于 shell 的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Unix_shell"&gt;http://en.wikipedia.org/wiki/Unix_shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于进程如何运行的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html"&gt;http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你通过 Python 执行程序时候，你可以选择直接从内核执行或者通过 shell。
如果你选择直接执行，你就没办法和 bash 同样方式执行命令。&lt;/p&gt;
&lt;p&gt;我们先看看怎么使用 shell 和那些好玩的特性功能，
然后再通过 &lt;code&gt;subprocess&lt;/code&gt; 来实现同样的功能，&lt;/p&gt;
&lt;h3&gt;数据流&lt;/h3&gt;
&lt;p&gt;在 UNIX 和 Linux 下，有三个被称作 &lt;em&gt;流&lt;/em&gt; 的 I/O 通道，它们通过文本终端
（比如用 gnome-terminal 运行 Bash）和其他应用程序（比如通过 Python 的
&lt;code&gt;subprocess&lt;/code&gt; ）这类环境来连接程序。
这几个 I/O 通道分别称为 &lt;em&gt;标准输入&lt;/em&gt;， &lt;em&gt;标准输出&lt;/em&gt;，和 &lt;em&gt;标准错误输出&lt;/em&gt; ,
它们的 &lt;em&gt;文件描述符&lt;/em&gt; 分别为 0，1，2。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; 句柄 &lt;/th&gt; &lt;th&gt; 名称 &lt;/th&gt; &lt;th&gt; 描述 &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; 0 &lt;/td&gt; &lt;td&gt; stdin &lt;/td&gt; &lt;td&gt; 标准输入 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; 1 &lt;/td&gt; &lt;td&gt; stdout &lt;/td&gt; &lt;td&gt; 标准输出 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; 2 &lt;/td&gt; &lt;td&gt; stderr &lt;/td&gt; &lt;td&gt; 标准错误输出 &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里你能看到标准输入叫做 &lt;code&gt;stdin&lt;/code&gt;，标准输出称作 &lt;code&gt;stdout&lt;/code&gt;，标准错误输出叫做
&lt;code&gt;stderr&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;流是这样工作的：从终端输出获取输入并通过标准输入发送到程序，
程序返回的正常输出从标准输出输出，错误则返回到环境上下文的标准错误输出。
维基百科有幅图将描述这个过程：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/File:Stdstreams-notitle.svg"&gt;&lt;img alt="Stdstreams-notitle.svg" src="http://upload-log4d.qiniudn.com/2012/09/Stdstreams-notitle.svg.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想将流从一个程序重定向到另一个地方，请看下文分解。&lt;/p&gt;
&lt;h2&gt;使用 Shell&lt;/h2&gt;
&lt;h3&gt;重定向标准输入和输出到文件&lt;/h3&gt;
&lt;p&gt;你可以在 Bash 中使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 操作符将一个程序的标准输出重定向到一个文件
（在其他 Shell 也许略有语法差异）。这里有个范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;program1&lt;/code&gt; 执行后的输出结果从标准输出流写入 &lt;code&gt;file1&lt;/code&gt;，并将 &lt;code&gt;file1&lt;/code&gt;
其中现有的内容所替换。如果你只是想追加内容，你可以使用 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 操作符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt;&amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 操作符可以被用来从文件中读取数据并传输到程序的标准输入流：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;lt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，&lt;code&gt;program1&lt;/code&gt; 会被执行，但是此时 &lt;code&gt;file1&lt;/code&gt; 取代了键盘，
成为了标准输入的数据源。&lt;/p&gt;
&lt;p&gt;你可以组合 shell 操作符以完成更复杂的操作。
下面这个范例中，&lt;code&gt;program1&lt;/code&gt; 从 &lt;code&gt;file1&lt;/code&gt; 获取数据并发送到标准输入。标准输出则从
&lt;code&gt;program1&lt;/code&gt; 输出到 &lt;code&gt;file2&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;lt; file1 &amp;gt; file2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也许有时候你需要从一个程序获取输出并将其作为另一个程序的输入。
你可以通过一个临时文件来实现这个操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 &amp;gt; tempfile1
program2 &amp;lt; tempfile1
rm tempfile1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法有点累赘，因此 shell 提供了方便的机制，称为 &lt;em&gt;管道&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;管道&lt;/h3&gt;
&lt;p&gt;管道允许一个程序的标准输出直接输入到另一个程序的标准输入流中，
而无须创建临时文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 | program2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;操作符 &lt;code&gt;|&lt;/code&gt; 被称作 &lt;em&gt;管道&lt;/em&gt; 符号，因此这种操作就被称为 &lt;em&gt;管道&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;这里有一幅来自维基百科的图片来描述管道：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/File:Pipeline.svg"&gt;&lt;img alt="Pipeline.svg" src="http://upload-log4d.qiniudn.com/2012/09/Pipeline.svg.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有个使用 &lt;code&gt;find .&lt;/code&gt;（遍历当前目录下的文件和目录）的例子，将输出定向到 &lt;code&gt;grep&lt;/code&gt;
程序来查找特定文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . | grep &lt;span class="s2"&gt;&amp;quot;The file I&amp;#39;m after.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个程序产生的数据是一行一行地导向第二个程序的，所以在第一个程序运行结束之前，
第二个程序就可以开始使用它们。&lt;/p&gt;
&lt;h3&gt;从文件重定向标准输入和输出&lt;/h3&gt;
&lt;p&gt;在重定向标准输出的同时，你也可以重定向其他流，
比如重定向标准错误输出到标准输出。我们已经讨论过在 Bash 中，
可以在文件描述符之前使用 &lt;code&gt;&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 操作符来重定向数据流
（还记得之前讨论的数字 0，1，2 么）。如果把标准输出代表的数字 1 省略掉看，
会发现我们一直在使用标准输出。&lt;/p&gt;
&lt;p&gt;下面这条命令执行 &lt;code&gt;program1&lt;/code&gt; 并将所有标准 &lt;em&gt;错误&lt;/em&gt; 数据输出到 &lt;code&gt;file1&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;program1 2&amp;gt; file1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行 &lt;code&gt;program1&lt;/code&gt;，错误信息就被重定向到 &lt;code&gt;file&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;这里有个范例程序让你来测试，将它保存成 &lt;code&gt;redirect1.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Echo to stdout: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Echo to stderr: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;KeyboardError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个程序始终将接受到的输入数据并同时输出到 stdout 和 stderr 。&lt;/p&gt;
&lt;p&gt;在 csh 衍生出来的 shell 中，语法则是在重定向符号之后加上 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号，
可以达到同样的效果。（译者注：即 &lt;code&gt;|&amp;amp;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;另一个常用的特性是将一个输出流重定向到定一个。
最常见的用法是将标准错误输出重定向到标准输出，
这样就可以把错误信息和正确信息合并在一起，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find / -name .profile &amp;gt; results 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令将会找出所有名叫 &lt;code&gt;.profile&lt;/code&gt; 的文件。
如果没有重定向，它将输出命中信息到 stdout，错误信息到 stderr
（比如有些目录无权限访问）。如果标准输出定向到文件，错误信息则会显示在命令行上。
为了在结果文件中可以同时看到命中信息和错误信息，我们需要使用 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;
将标准错误输出（2）输出到标准输出（1）。（这次即使在 Bash 中也需要 &lt;code&gt;&amp;amp;&lt;/code&gt; 符。）&lt;/p&gt;
&lt;p&gt;虽然语法上可以将 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 放到 &lt;code&gt;&amp;gt;&lt;/code&gt; 前面，但这样不能正常工作。
事实上，当解析器读取 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 时候，它还不知道标准输出将重定向到哪里，
所以标准错误输出就不会被合并。&lt;/p&gt;
&lt;p&gt;如果使用管道合并输出流，那么合并符号 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 需要在管道符号 &lt;code&gt;|&lt;/code&gt; 之前。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find / -name .profile 2&amp;gt;&amp;amp;1 | less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bash 中的合并输出简写形式是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;gt; file 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;amp;&amp;gt;file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;gt;&amp;amp;file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是最好别用简写形式，否则你会弄糊涂。我提倡宁愿麻烦但是要清晰。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; 操作符同时重定向标准输出和标准错误输出。
它的作用和在 Bourne Shell 中的 &lt;code&gt;command &amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code&gt; 一样。&lt;/p&gt;
&lt;h3&gt;管道链&lt;/h3&gt;
&lt;p&gt;重定向可以和管道连接起来组成复杂的命令，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ls | grep &lt;span class="s1"&gt;&amp;#39;\.sh&amp;#39;&lt;/span&gt; | sort &amp;gt; shlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列出当前目录下所有文件，然后过滤剩下仅包含 .sh 的内容，根据文字编码排序，
然后将最终结果输出到 shlist。这种类型的命令经常在 shell 脚本和批处理文件中使用。&lt;/p&gt;
&lt;h3&gt;多重输出重定向&lt;/h3&gt;
&lt;p&gt;标准命令 &lt;code&gt;tee&lt;/code&gt; 可以重定向一个命令到多个地方。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ls -lrt | tee xyz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将文件列表同时输出到标准输出和文件 &lt;code&gt;xyz&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3&gt;Here 文档&lt;/h3&gt;
&lt;p&gt;大部分 Shell，包括 Bash 都支持 &lt;em&gt;Here 文档&lt;/em&gt;，它允许你使用 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 
操作符和一些文本作为分隔符将文本块嵌入到命令之中。&lt;/p&gt;
&lt;p&gt;在下面的范例中，文本块被传送给 &lt;code&gt;tr&lt;/code&gt; 命令，同时使用 &lt;code&gt;END_TEXT&lt;/code&gt; 作为 Here
文档分隔符来指明文本的开始和结束。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tr a-z A-Z &lt;span class="s"&gt;&amp;lt;&amp;lt;END_TEXT&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; one two three&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; uno dos tres&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; END_TEXT&lt;/span&gt;
ONE TWO THREE
UNO DOS TRES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过 &lt;code&gt;tr&lt;/code&gt; 处理后，输出的结果是 &lt;code&gt;ONE TWO THREE&lt;/code&gt; 和 &lt;code&gt;UNO DOS TRES&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一种常用用法是用 Here 文档向文件添加文本。
默认情况下，文本中的变量是会被替换成真实值的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; Working dir $PWD&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
Working dir /home/user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过在 Here 文档标签引上单引号或者双引号，就可以避免这种转义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat &amp;lt;&amp;lt; &lt;span class="s2"&gt;&amp;quot;EOF&amp;quot;&lt;/span&gt;
&amp;gt; Working dir &lt;span class="nv"&gt;$PWD&lt;/span&gt;
&amp;gt; EOF
Working dir &lt;span class="nv"&gt;$PWD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;介绍 &lt;code&gt;subprocess&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;刚才我们讨论过了一些命令行提供的功能，现在让我们体验一下 &lt;code&gt;subprocess&lt;/code&gt; 模块。
你可以在命令行中运行下面这条简单的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们试着在 Python 中运行它。&lt;/p&gt;
&lt;p&gt;以前我们需要使用一堆各异的标准库来实现进程管理。
从 Python 2.4 开始，所有功能都被精心地整理到 &lt;code&gt;subprocess&lt;/code&gt; 这个模块，
其中的 &lt;code&gt;Popen&lt;/code&gt; 类可以提供所有我们需要的。&lt;/p&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你对新的 &lt;code&gt;Popen&lt;/code&gt; 如何替换旧模块，&lt;a href="http://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module"&gt;subprocess-doc&lt;/a&gt;[subprocess-documentation]
有一个章节解释过去是如何作用以及当前是如何作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Popen&lt;/code&gt; 可以接受一下参数，详情可以在 &lt;a href="http://docs.python.org/library/subprocess.html#using-the-subprocess-module"&gt;using-the-subprocess-module&lt;/a&gt;[http://docs.python.org/library/subprocess.html#using-the-subprocess-module]：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;args, &lt;span class="nv"&gt;bufsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0, &lt;span class="nv"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None,
    &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;preexec_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,
    &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False, &lt;span class="nv"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,
    &lt;span class="nv"&gt;startupinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;creationflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 Shell&lt;/h2&gt;
&lt;p&gt;让我们以 Hello World! 这个例子开始。和之前类似，通过
Python shell 执行下列命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import subprocess
&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，标准输出和同样打印出 &lt;code&gt;Hello world!&lt;/code&gt; ，
区别在于命令行显示了一个我们创建的 &lt;code&gt;subprocess.Popen&lt;/code&gt; 实例。&lt;/p&gt;
&lt;p&gt;如果你将代码保存为 &lt;code&gt;process_test.py&lt;/code&gt; ，然后在命令行执行，你会得到一样的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python process_test.py
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去运行 OK。&lt;/p&gt;
&lt;p&gt;你可能在琢磨我们到底使用了哪个 shell。Unix 的默认 shell 是 &lt;code&gt;/bin/sh&lt;/code&gt; ，
而 Windows 下面则取决于 &lt;code&gt;COMSPEC&lt;/code&gt; 这个环境变量。
如果你设置 &lt;code&gt;shell=True&lt;/code&gt; ，则可以通过 &lt;code&gt;executable&lt;/code&gt; 参数来自定义 shell。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True, &lt;span class="nv"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和我们之前看到的一样，但是如果你使用特定的 shell ，
你也许会发现不同的地方。&lt;/p&gt;
&lt;p&gt;让我们探索一下通过 Python 使用 shell 的其他特性：&lt;/p&gt;
&lt;p&gt;变量解析：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo $PWD&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
/home/james/Desktop
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;管道和重定向：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot; | tr a-z A-Z 2&amp;gt; errors.txt&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;subprocess.Popen object at 0x...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; HELLO WORLD!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;errors.txt&lt;/code&gt; 应该是空的，因为没有任何错误产生。
有趣的是在我电脑上，&lt;code&gt;Popen&lt;/code&gt; 实例在 &lt;code&gt;HELLO WORLD!&lt;/code&gt; 被打印到标准输出
&lt;em&gt;之前&lt;/em&gt; 出现。
恩，管道和重定向都可以正常工作。&lt;/p&gt;
&lt;p&gt;Here 文档：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.Popen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;... cat &amp;lt;&amp;lt; EOF &amp;gt; new.txt&lt;/span&gt;
&lt;span class="s2"&gt;... Hello World!&lt;/span&gt;
&lt;span class="s2"&gt;... EOF&lt;/span&gt;
&lt;span class="s2"&gt;... &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;subprocess.Popen object at 0xb7dbbe2c&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;new.txt&lt;/code&gt; 文件正常生成，并且包含内容 &lt;code&gt;Hello World!&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如我们预料，在 shell 中正常运行的命令同样可以在 Python shell 中运行。&lt;/p&gt;
&lt;h2&gt;字符串和参数列表&lt;/h2&gt;
&lt;p&gt;现在可以轻松地在 Python 中执行命令行了，你也许会需要传递变量过去。
假设我们要用 &lt;code&gt;echo&lt;/code&gt; 重写刚才那个函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也许想当然这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种写法，当字符串是 &lt;code&gt;Hello World!&lt;/code&gt; 时候没问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但这样就有问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasty &amp;quot; example&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
/bin/sh: Syntax error: Unterminated quoted string
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个命令会被执行成 &lt;code&gt;echo "nasty" example"&lt;/code&gt; ，唔，这里的转义有问题。&lt;/p&gt;
&lt;p&gt;一种解决方式是在代码里面做好转义，但这样会很麻烦，
你需要处理所有可能出现的转义字符和空格等等。&lt;/p&gt;
&lt;p&gt;Python 可以帮你处理好，条件是你不能直接操作 shell，
如何操作看下文。&lt;/p&gt;
&lt;h2&gt;Shell 之外&lt;/h2&gt;
&lt;p&gt;现在让我们试试不操作 shell 来实现同样的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def print_string&lt;span class="o"&gt;(&lt;/span&gt;string&lt;span class="o"&gt;)&lt;/span&gt;:
    subprocess.Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;, string&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello world!
&amp;gt;&amp;gt;&amp;gt; print_string&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasty &amp;quot; example&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
nasty &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; example
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你可以看到它正常地处理了转义。&lt;/p&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上你也可以在 &lt;code&gt;shell=False&lt;/code&gt; 那里直接使用一个单独的字符串作为参数，
但是它必须是命令程序本身，这种做法和在一个列表中定义一个 &lt;code&gt;args&lt;/code&gt;
没什么区别。而如果当 &lt;code&gt;shell=False&lt;/code&gt; 时候直接执行字符串命令，则会报错：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;Hello world!&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;594&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="n"&gt;errread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errwrite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1147&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_child&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;child_exception&lt;/span&gt;
&lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们还是坚持使用一个字符串，Python 会认为这个 &lt;em&gt;完整的字符串&lt;/em&gt;
是一个可执行的程序名，而实际上没有一个叫做 &lt;code&gt;echo "Hello world!"&lt;/code&gt;
的程序，所以报错了。正确的做法要用 list 分开传送参数。&lt;/p&gt;
&lt;h3&gt;检查 PATH 中的程序&lt;/h3&gt;
&lt;p&gt;这里有个方法可以找出程序真正的位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;whereis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
           &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们用它来找出 &lt;code&gt;echo&lt;/code&gt; 程序在哪里：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whereis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法同样可以检查用户的 &lt;code&gt;PATH&lt;/code&gt; 里面是否有 Python 需要的程序。&lt;/p&gt;
&lt;p&gt;当然你也可以使用命令行中的程序 &lt;code&gt;whereis&lt;/code&gt; 来找出程序的路径。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;whereis &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;: /bin/echo /usr/share/man/man1/echo.1.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论我们使用 &lt;code&gt;shell&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; 或者 &lt;code&gt;False&lt;/code&gt; ，
我们都没有指定执行程序的全路径。
如果这个程序在上下文环境的 &lt;code&gt;PATH&lt;/code&gt; 变量中，我们才可以执行。
当然如果你愿意，指定全路径也没问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你也可以坚持指定 &lt;code&gt;executable&lt;/code&gt; 为想要执行的程序，
然后 &lt;code&gt;args&lt;/code&gt; 就不设定程序。虽然没看到明确的文档，不过我电脑上面可以这么执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xb776f56c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不直接使用 shell 会导致不能直观地使用重定向、管道、here 文档、shell
参数或其他那些可以在命令行使用的技巧。接下来我们会看看怎么使用这些功能。&lt;/p&gt;
&lt;h2&gt;从标准输出和错误重定向&lt;/h2&gt;
&lt;p&gt;当你使用 &lt;code&gt;Popen&lt;/code&gt; 执行程序时候，输出内容通常被发送到 stdout，
这也是为什么你能看到这些内容。&lt;/p&gt;
&lt;p&gt;当你想尝试从某个程序读取标准输出信息时候，则需要在调用 &lt;code&gt;Popen&lt;/code&gt; 之前设定
&lt;code&gt;stdout&lt;/code&gt; 参数。要设定的值是 &lt;code&gt;subprocess.PIPE&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subprocess.PIPE&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以为 &lt;code&gt;Popen&lt;/code&gt; 指定标准输入、标准输出和标准错误输出的参数，
需要注意的是标准输出流需要打开可写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有个范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To read the output from the pipe you use the &lt;code&gt;communicate()&lt;/code&gt; method:&lt;/p&gt;
&lt;p&gt;为了从管道获取输出，你可以使用 &lt;code&gt;communicate()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;communicate()&lt;/code&gt; 的返回值是一个 tuple，第一个值是标准输出的数据，
第二个输出是标准错误输出的内容。&lt;/p&gt;
&lt;p&gt;这里有段脚本能让我们测试标准输出和标准错误输出的表现行为，
将它存为 &lt;code&gt;test1.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stderr&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意标准错误输出在被生成后就打印了，而标准输出则被管道传输了。
这是因为我们只设定了标准输出的管道，让我们同时也设定标准错误输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Message to stdout&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Message to stderr&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次标准输出和标准错误输出都被 Python 获取到了。&lt;/p&gt;
&lt;p&gt;现在所有的消息能被打印出来了，如果我们再次调用 &lt;code&gt;communicate()&lt;/code&gt;，
则会得到一个错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;communicate&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.5/subprocess.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_communicate&lt;/span&gt;
    &lt;span class="n"&gt;rlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;write_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;communicate()&lt;/code&gt; 方法读取标准输出和标准错误输出时候，遇到结束符（EOF）
就会结束。&lt;/p&gt;
&lt;h3&gt;重定向 stderr 到 stdout&lt;/h3&gt;
&lt;p&gt;如果你想将错误信息重定向到标准输出，只需要给 &lt;code&gt;stderr&lt;/code&gt; 
参数指定一个特殊值： &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2&gt;写入标准输入&lt;/h2&gt;
&lt;p&gt;写数据入一个进程和之前所述比较类似。为了要写入数据，需要先打开一个管道到标准输入。
通过设定 &lt;code&gt;Popen&lt;/code&gt; 参数 &lt;code&gt;stdin=subproces.PIPE&lt;/code&gt; 可以实现。&lt;/p&gt;
&lt;p&gt;为了测试，让我们另外写一个仅输出 &lt;code&gt;Received:&lt;/code&gt; 和输入数据的程序。
它在退出之前会输出消息。调用这个 &lt;code&gt;test2.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Received: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了发送消息到标准输入，把你想发送的信息作为 &lt;code&gt;communicate()&lt;/code&gt; 的参数 &lt;code&gt;input&lt;/code&gt; 。让我们跑起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test2.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;How are you?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意 &lt;code&gt;test2.py&lt;/code&gt; 发送的信息被打印到标准输出，随后的是 &lt;code&gt;(None, None)&lt;/code&gt; ，
这是因为标准输出和标准错误输出没有设定输出管道。&lt;/p&gt;
&lt;p&gt;你可以和之前那样指定 &lt;code&gt;stdout=subprocess.PIPE&lt;/code&gt;
和 &lt;code&gt;stderr=subprocess.PIPE&lt;/code&gt; 来设定输出管道。&lt;/p&gt;
&lt;h3&gt;类文件属性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Popen&lt;/code&gt; 拥有 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 属性，从而可以当作文件一样写出数据，同时 &lt;code&gt;stdin&lt;/code&gt; 属性可以像文件一样读取数据。
你可以使用他们来替换 &lt;code&gt;communicate()&lt;/code&gt;。下面我们将看如何用它们。&lt;/p&gt;
&lt;h3&gt;读写同一个进程&lt;/h3&gt;
&lt;p&gt;这里有个例子，将它保存为 &lt;code&gt;test3.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Received: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个程序也是简单的响应接受到的数据，让我们把它跑起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test3.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每隔一秒钟会输出一行。&lt;/p&gt;
&lt;p&gt;现在你应该掌握了所有需要通过 Python 来跟 Shell 交互需要的知识。&lt;/p&gt;
&lt;h2&gt;获取返回值， &lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;当一个程序退出时候，他会返回一个正整数来表明它的退出状态。
0 代表「成功地结束」，非零则表示「非正常结束」。
大部分系统要求返回值在 0-127 之间，其他都是未定义的结果。
一些系统会有事先定义好的错误对应关系，但一般不被拿出来用。
Unix 程序通常使用 2 作为命令语法错误，1 作为其他错误。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;code&gt;Popen&lt;/code&gt; 的 &lt;code&gt;.returncode&lt;/code&gt; 属性获取程序返回值。这儿有个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;
&lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个 &lt;code&gt;returncode&lt;/code&gt; 并不是一开始就设定好的，最初是默认值 &lt;code&gt;None&lt;/code&gt;，
它会一直是 &lt;code&gt;None&lt;/code&gt; 知道你调用 &lt;code&gt;subprocess&lt;/code&gt; 的方法比如 &lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt;。
这些方法会设定 &lt;code&gt;returncode&lt;/code&gt;。因此，如果你想知道返回值，那就调用 &lt;code&gt;poll()&lt;/code&gt;
和 &lt;code&gt;wait()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;poll()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt; 方法区别很小：&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Popen.poll()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;检查子进程是否结束。并设置和返回 &lt;code&gt;.returncode&lt;/code&gt; 属性。&lt;/dt&gt;
&lt;dt&gt;&lt;code&gt;Popen.wait()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;等待子进程结束。并设置和返回 &lt;code&gt;.returncode&lt;/code&gt; 属性。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;便捷的方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;subprocess&lt;/code&gt; 模块还提供了很多方便的方法来使得执行 shell 命令更方便。
我没有全部试试。（译者：意思是让读者自己挖掘？）&lt;/p&gt;
&lt;h2&gt;理解 &lt;code&gt;sys.argv&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;如果你想写一个 Python 脚本来接受命令行参数，
那么命令行的参数会被传送并成参数 &lt;code&gt;sys.argv&lt;/code&gt;。
这里有个小范例，将它保存成 &lt;code&gt;command.py&lt;/code&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Executable: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Arg: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 这行确保代码在被执行是才运行，
而不是被引入时候运行。给这个文件执行权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod 755 command.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里是一些运行时的范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py
Executable: command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py arg1
Executable: command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;python command.py arg1 arg2
Executable: command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意无论 Python 脚本怎么执行， &lt;code&gt;sys.argv[0]&lt;/code&gt; 始终是脚本的名称。
&lt;code&gt;sys.argv[1]&lt;/code&gt; 和之后的参数是命令行接受的参数。
你可以通过使用参数 &lt;code&gt;-m&lt;/code&gt; 来强制 Python 脚本作为模块导入使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command&lt;/span&gt;
Executable: /home/james/Desktop/command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command &lt;/span&gt;arg1
Executable: /home/james/Desktop/command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;python -m &lt;span class="nb"&gt;command &lt;/span&gt;arg1 arg2
Executable: /home/james/Desktop/command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，Python 将 &lt;code&gt;-m&lt;/code&gt; 作为命令的一部分，因此 `sys.srgv[0] 包含了脚本的全路径。
现在我们来直接执行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py
Executable: ./command.py
&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py arg1
Executable: ./command.py
Arg: arg1
&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py arg1 arg2
Executable: ./command.py
Arg: arg1
Arg: arg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看吧，&lt;code&gt;sys.argv[0]&lt;/code&gt; 包含 Python 脚本的名称， &lt;code&gt;sys.argv[1]&lt;/code&gt;
以及他的兄弟们还是老样子，包含各类参数。&lt;/p&gt;
&lt;h3&gt;展开 Shell&lt;/h3&gt;
&lt;p&gt;有时候，我们会在 shell 中使用通配符来设定一组参数，比如，
我们在 Bash 中运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能觉得输出应该是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Executable: ./command.py
Arg: *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这不是你想要的结果。输出结果应该依赖当前文件夹中 &lt;code&gt;.txt&lt;/code&gt; 文件的数目。执行效果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Executable: ./command.py
Arg: errors.txt
Arg: new.txt
Arg: output.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bash 会将 &lt;code&gt;\*.txt&lt;/code&gt; 自动展开成所有符合 &lt;code&gt;.txt&lt;/code&gt; 的参数。所以接受到的参数会超过你预期。&lt;/p&gt;
&lt;p&gt;你可以通过将参数用引号抱起来来关闭 Shell 解释特性，
但是只要你用过，就会意识到在大多数情况下面这是非常有用的功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./command.py &lt;span class="s2"&gt;&amp;quot;*.txt&amp;quot;&lt;/span&gt;
Executable: ./command.py
Arg: *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多关于 Bash 解释信息，可以看 &lt;a href="http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion"&gt;http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;拓展阅读&lt;/h2&gt;
&lt;p&gt;可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.doughellmann.com/PyMOTW/subprocess/"&gt;http://www.doughellmann.com/PyMOTW/subprocess/&lt;/a&gt; (and its O'Reilly copy here)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/library/subprocess.html"&gt;http://docs.python.org/library/subprocess.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webpython.codepoint.net/cgi_shell_command"&gt;http://webpython.codepoint.net/cgi_shell_command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829"&gt;http://www.artima.com/weblogs/viewpost.jsp?thread=4829&lt;/a&gt; (About writing main() functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来相关的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程间信号通信&lt;/li&gt;
&lt;li&gt;后台执行程序&lt;/li&gt;
&lt;/ul&gt;</summary><category term="subprocess"></category><category term="bash"></category><category term="shell"></category><category term="译文"></category></entry><entry><title>MoinMoin Wiki 转换 Text 脚本</title><link href="/2012/07/moin2txt/" rel="alternate"></link><updated>2012-07-27T09:02:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-07-27:2012/07/moin2txt/</id><summary type="html">&lt;p&gt;我使用 MoinMoin 作为我的 KMS，具体使用方式可以参考
[使用MoinMoin作为个人KMS][moin-kms]。另外，我将 MoinMoin 的 &lt;code&gt;data&lt;/code&gt;
目录链接到 Dropbox 同步目录下面，从而可以备份并查看我的知识库。&lt;/p&gt;
&lt;h2&gt;我想同步阅读 KMS 数据&lt;/h2&gt;
&lt;p&gt;想在移动设备阅读 KMS 数据时，我遇到一个麻烦，MoinMoin 使用文件来保存 wiki 数据，
比如「28个Unix.Linux的命令行神器」这篇 wiki 目录在
&lt;code&gt;data/28(e4b8aa)Unix(2e)Linux(e79a84e591bde4bba4e8a18ce7a59ee599a8)&lt;/code&gt; 中，
结构如下：&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;revisions&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="mo"&gt;00000002&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="mo"&gt;00000001&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;attachments&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_xargs_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_sl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_mtr_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_lftp_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_htop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_calcurse_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_multitail_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ack_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_tpp_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_powertop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_newsbeuter_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_socat_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_siege_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_duplicity_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ipbt_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_iftop_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_curl_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_iptraf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tcpudp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_vim_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_earthquake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_tmux3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_cowsay_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_TaskWarrior2&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_vifm_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_taskwarrior_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_linuxlogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ranger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_nethack_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_rtorrent_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_dtach&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dvtm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_gnu_screen_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ledger_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_rsync_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_byobu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tmux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;http___coolshell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn_wp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;content_uploads_2012_07_ttytter_screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;text_html&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;|---&lt;/span&gt;&lt;span class="n"&gt;pagelinks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，中文名称的 wiki 在存储时候，MoinMoin 会将中文保存为 utf-8 码，
不能直接阅读。并且我需要将目录下面有多级目录，阅读麻烦。&lt;/p&gt;
&lt;h2&gt;一个脚本&lt;/h2&gt;
&lt;p&gt;为了解决这个问题，我写了如下小脚本，帮我解决这个问题：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class="c"&gt;# coding=utf-8&lt;/span&gt;

&lt;span class="c"&gt;# convert MoinMoin wiki to text&lt;/span&gt;
&lt;span class="c"&gt;# for moinmoin 1.9.x&lt;/span&gt;
&lt;span class="c"&gt;# author: alswl&lt;/span&gt;
&lt;span class="c"&gt;# update at: 2012-07-22&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;

&lt;span class="n"&gt;IS_DECODE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;current&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;revisions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;IS_DECODE_PATH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;\(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;File &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, Name: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, Message: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
                         &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;ENCODE_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\(([\w\d]+)\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ENCODE_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
        &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unhexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;lastpos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENCODE_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lastpos&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Convert moin wiki to text archieves&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;the path of moinmoin/data/pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;the path os target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;使用帮助：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;moin2txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;

&lt;span class="n"&gt;Convert&lt;/span&gt; &lt;span class="n"&gt;moin&lt;/span&gt; &lt;span class="n"&gt;wiki&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;archieves&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;            &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;moinmoin&lt;/span&gt;&lt;span class="sr"&gt;/data/&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python moin2txt.py -i /your/moin/path/data/pages -o /your/dropbox/path/kms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令运行完，就能在对应目录生成一坨 txt 文件，文件名还是中文的，Mission complete.&lt;/p&gt;
&lt;p&gt;我将这个命令加入了 cron，每天执行一次，保证 Dropbox 中是最新的 wiki。&lt;/p&gt;</summary><category term="MoinMoin"></category></entry><entry><title>GAE 编程指南读书笔记</title><link href="/2012/03/gae/" rel="alternate"></link><updated>2012-03-24T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-03-24:2012/03/gae/</id><summary type="html">&lt;p&gt;GAE 和我蛮有缘分，我初学 Python 的其中一个原因就是当时 GAE 刚推出， 当时想法是免费的应用要用起来，要不然就浪费了。随后也假模假样的看文档，
就是没有什么产出。&lt;/p&gt;
&lt;p&gt;去年写了一个小应用 &lt;a href="https://github.com/alswl/dbevent2gc"&gt;dbevent2gc&lt;/a&gt; ， 期间发现 GAE
和普通程序开发的诸多不同，又遭遇 GAE 配额大幅缩水， 写出来的应用运转的不太稳定。在南京图书馆的架上看见这本《GAE 编程指南读书笔记》，
立即借回家仔细阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GAE 的简介  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时环境 Python / Java&lt;/li&gt;
&lt;li&gt;数据存储 Datastore（实体 / 查询 / 索引 / 事务）&lt;/li&gt;
&lt;li&gt;服务（Memcache / GAccount / 任务队列 / 计划任务）&lt;/li&gt;
&lt;li&gt;工具（SDK / appcfg / dev_appserver / 控制台）&lt;/li&gt;
&lt;li&gt;入门（安装 / GAccount / webapp / app.yaml / /_ah/admin / 注册部署 / login:required）&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理流程：请求 - 前端 - 引用服务器 / 静态文件服务器 - 服务  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配额限制：请求限制 / CPU 限制 / 服务限制 / 部署限制 （最新配额：http://code.google.com/intl/zh-CN/appengine/docs/quotas.html）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GAE 的数据存储方式和传统的 RDBMS 差异比较大，更类似于对象数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;类别 kind / 键 / 键名 key name&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过键来获取和操作对象  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;e = db.get(db.Key('Entity', 'alphabeta'))&lt;/code&gt; / &lt;code&gt;e = Entity.get(k)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e = db.get(k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e.delete()&lt;/code&gt; / &lt;code&gt;db.delete(e1, e2)&lt;/code&gt; / &lt;code&gt;db.delete(k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Expando 基类可以任意扩展属性，Model 基类则不可。&lt;/li&gt;
&lt;li&gt;GAE 中基本类型与 Python / Java 中基本类型的差异&lt;/li&gt;
&lt;li&gt;多值属性&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据查询  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询和类别 &lt;code&gt;db.query()&lt;/code&gt; &lt;code&gt;query.filter()&lt;/code&gt; &lt;code&gt;query.order()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;查询和键：查询结果要么返回实体，要么返回键（ &lt;code&gt;key_only=True&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;可以用 GQL 写查询语句，不能写 CUD&lt;/li&gt;
&lt;li&gt;获取结果： &lt;code&gt;fetch()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每条查询都需要维护一条索引，在 &lt;code&gt;index.yaml&lt;/code&gt; 中可以配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;排序之后的索引查询很快，查询效率和返回结果集有关&lt;/li&gt;
&lt;li&gt;实体的每个属性会自动维护两条索引：升序和降序&lt;/li&gt;
&lt;li&gt;查询时候选取对应的索引进行查询，条件语句可能和排序语句相冲突&lt;/li&gt;
&lt;li&gt;不等于 / IN 操作符将引发一系列变换出的查询&lt;/li&gt;
&lt;li&gt;多值字段的索引：每个值会成为索引中一行 / 实体会因此分散 / 取第一次成功扫描到的行&lt;/li&gt;
&lt;li&gt;多值会引入爆炸索引问题&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过实体组来控制事务，实体组会在同一块存储区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GAE 使用乐观锁&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;AModel(parent=p)&lt;/code&gt; 构造祖先，然后通过 &lt;code&gt;run_in_transation()&lt;/code&gt; 回调事务处理函数&lt;/li&gt;
&lt;li&gt;BigTable 中使用日志+时间戳来跟踪实体的修改，保证数据并发和一致性&lt;/li&gt;
&lt;li&gt;事务更新和索引更新：可能返回的索引结果和实体不一致&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 数据建模  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明 / 类型 / 验证（ &lt;code&gt;validate()&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;不编入索引的属性 &lt;code&gt;indexed=False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间类型的自动值&lt;/li&gt;
&lt;li&gt;模型变化带来的维护问题：修改属性类型 / 添加一个必要属性是不向后兼容的。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系建模  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;db.ReferenceProperty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;collection_name&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多对多关系的处理  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;键列表方法：使用多值属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;链接模型方法：相当于中间表概念&lt;/li&gt;
&lt;li&gt;模型的继承：通过 &lt;code&gt;db.PolyModel&lt;/code&gt; 实现多态查询&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memcache  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CRUD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 URL 资源  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;urlfetch()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;RPC 异步请求调用，闭包调用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;邮件和 XMPP  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;额，亲用到时候看 Google 官方文档吧～&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大批量数据操作和远程访问  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/remote_api&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Bulk Loader 大量数据操作&lt;/li&gt;
&lt;li&gt;远程 shell &lt;code&gt;remote_api_shell.py app-id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务队列和计划任务  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;队列： &lt;code&gt;queue.yaml&lt;/code&gt; / 令牌桶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;计划任务： &lt;code&gt;cron.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是通过设定主动触发某个 url&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看 Django 文档吧，亲～&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传 &lt;code&gt;appcfg.py update ./clock&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通过 url 使用特定版本： &lt;code&gt;version-id.latest.app-id.appspot.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;版本只维护代码，数据库还是同一份&lt;/li&gt;
&lt;li&gt;下载日志 &lt;code&gt;appcfg.py request_logs clock logs.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GAE"></category><category term="读书笔记"></category></entry><entry><title>在Python中调试代码</title><link href="/2012/03/python-debug/" rel="alternate"></link><updated>2012-03-20T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-03-20:2012/03/python-debug/</id><summary type="html">&lt;p&gt;撰写程序时候，需要在调试上面花费不少时间，好的调试工具可以让这个过程如虎添翼， 靠打 log 调试会是一种很痛苦的过程，我总结一下 Pylons
开发的调试技巧。&lt;/p&gt;
&lt;p&gt;吐槽：团队开发时候，每个成员需要学习、总结和分享各自的开发技巧， 这样才能自我提升并提高开发效率。这属于团队文化建设，开发是一种艺术创造过程，
绝对不是简单的复制和粘帖。&lt;/p&gt;
&lt;h2&gt;在 Python 中调试&lt;/h2&gt;
&lt;h3&gt;pdb&lt;/h3&gt;
&lt;p&gt;在代码中加入下列语句即可启用交互式调试。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 pdb 中，可以使用 &lt;code&gt;h / l / b / n / s / c / j / a / p / ! / q&lt;/code&gt; 这些命令所代表的含义可以通过
&lt;code&gt;h(elp)&lt;/code&gt; 打印出来。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://magustest.com/blog/python/use-pdb-debug-python/comment-page-1"&gt;用PDB库调试Python程序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ipdb&lt;/h3&gt;
&lt;p&gt;比 pdb 更好用的是 ipdb，需要预先安装 IPython，通过 IPython 可以提供更强的交互功能。&lt;/p&gt;
&lt;p&gt;安装 ipdb: &lt;code&gt;easy_install ipdb&lt;/code&gt; ， 使用方法依然是 &lt;code&gt;import ipdb;ipdb.set_trace()&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;ps: 根据我的测试，ipdb 0.61 不能和 ipython 0.91 正常工作， 会报 &lt;code&gt;ImportError: No module named
core.debugger&lt;/code&gt; 错误，请尝试使用 ipython 0.10 或者更新版本。这个错误在 ipdb 官网有 issue 描述
（&lt;a href="https://github.com/gotcha/ipdb/issues/9"&gt;link&lt;/a&gt;）。&lt;/p&gt;
&lt;h3&gt;使用 embed python shell&lt;/h3&gt;
&lt;p&gt;除了特定代码的调试，有时候我们还需要在开发一个功能之前进行尝试性代码撰写， 这点在 web 开发时候尤其有用。托 Python
动态语言特性的福，我们可以很方便的使用 Interactivate Shell 进行开发。&lt;/p&gt;
&lt;p&gt;在项目的根目录建立一个 Python 脚本，比如 &lt;code&gt;shell.py&lt;/code&gt; ，其中代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;desc: 这个shell提供Python上下文环境，方便调试&lt;/h1&gt;
&lt;h1&gt;author: alswl&lt;/h1&gt;
&lt;h1&gt;date: 2012-03-20&lt;/h1&gt;
&lt;p&gt;def main():&lt;/p&gt;
&lt;h1&gt;Do something for init here.&lt;/h1&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;p&gt;from IPython.frontend.terminal.embed import InteractiveShellEmbed&lt;/p&gt;
&lt;p&gt;ipshell = InteractiveShellEmbed()&lt;/p&gt;
&lt;p&gt;ipshell()&lt;/p&gt;
&lt;p&gt;except ImportError:&lt;/p&gt;
&lt;p&gt;import code&lt;/p&gt;
&lt;p&gt;pyshell = code.InteractiveConsole(locals=locals())&lt;/p&gt;
&lt;p&gt;pyshell.interact()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;p&gt;main()&lt;/p&gt;
&lt;p&gt;这段代码先尝试使用 IPython 作为交互 shell，如果没有安装就使用原生 Python 作为 交互 Shell。(强烈建议使用 IPython)。&lt;/p&gt;
&lt;p&gt;请在 &lt;code&gt;main()&lt;/code&gt; 方法开始时候做一些初始化动作，比如载入 webapp 的实例并初始化各路config，
这样就能实现即时代码测试功能，提高开发效率，不用一遍遍地跑流程。&lt;/p&gt;
&lt;p&gt;参考链接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qixinglu.com/archives/embed_python_shell_in_code"&gt;http://qixinglu.com/archives/embed_python_shell_in_code&lt;/a&gt; （注意， 这篇文章是2011年的，其中引入 IPython 的 &lt;code&gt;InteractiveShellEmbed&lt;/code&gt; 的方法已经过期，请参考上面的代码）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE 中的 pdb&lt;/h3&gt;
&lt;p&gt;有一些特定系统，比如 GAE 和 nosetests，他们会重定向 &lt;code&gt;std:in&lt;/code&gt; 和 &lt;code&gt;std:out&lt;/code&gt; ， 造成 pdb
无法正确输入和输出，在使用的使用，需要用以下代码做个 hack。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pylons 调试&lt;/h2&gt;
&lt;p&gt;Paster 的 Shell 交互式调试更显犀利（官方所称杀手级功能）， 可以直接使用 &lt;code&gt;paster shell dev.ini&lt;/code&gt;
命令启用交互界面，默认会先尝试载入 IPython，不存在就载入原生 Shell。&lt;/p&gt;
&lt;p&gt;我当前使用的 Paster 版本为 1.7.5,无法正确识 IPython 0.11及以上版本， 请使用0.9.1或者0.10。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.pylonshq.com/pages/viewpage.action?pageId=9011323"&gt;How can I use "paster shell" to develop doctest tests?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7389388/pylons-paster-shell-does-not-run-in-ipython"&gt;stackoverflow 上关于 IPython 版本的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ipdb"></category><category term="Paster"></category><category term="pdb"></category><category term="Pylons"></category></entry><entry><title>给MoinMoin写插件</title><link href="/2012/02/the-write-the-plugins-for-moinmoin/" rel="alternate"></link><updated>2012-02-10T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-02-10:2012/02/the-write-the-plugins-for-moinmoin/</id><summary type="html">&lt;h2&gt;1. 使用 MoinMoin&lt;/h2&gt;
&lt;p&gt;前些日子，我写了一篇&lt;a href="../2011/12/moinmoin-kms"&gt;使用MoinMoin作为个人KMS&lt;/a&gt;
大赞MoinMoin的各种好处。MoinMoin的其中一个好处是基于GPL的开源，
我们可以方便的给MoinMoin撰写自己的插件（当然也可以去官方的wiki上获取大量现成插件）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://moinmo.in/MoinDev"&gt;MoinMoin开发者wiki地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.moinmo.in/"&gt;MoinMoin开发API文档（这个官方wiki居然很少提及）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://moinmo.in/MoinDev/Translation"&gt;MoinMoin的多国语翻译组wiki地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在使用MoinMoin过程中，有一个急迫需要的功能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;保存一篇网页时候，要将里面的图片保存到本地，而不是使用外链接方式保存， 因为由于各种不可预测的原因，原始图片数据很有可能丢失或者无法连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个功能对于将Wiki产品转化为KMS应用非常需要，可惜MoinMoin官方并没有提供，
我也没在MoinMoin的开发者插件库中找到类似功能，就自己写了一个插件image2attach。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://moinmo.in/MoinMoinExtensions"&gt;MoinMoin插件库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://moinmo.in/ActionMarket/Image2Attach"&gt;image2attach在MoinMoin官方Wiki的地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我分享一下如何写MoinMoin插件，技术大牛可以直接移步官方开发文档， 我这里只是写一些简单的内容，帮助像我一样的同学。&lt;/p&gt;
&lt;p&gt;以下内容需要Python编程基础～&lt;/p&gt;
&lt;h2&gt;2. MoinMoin 系统结构&lt;/h2&gt;
&lt;p&gt;MoinMoin的UML图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="MoinMoin" src="http://upload-log4d.qiniudn.com/2012/02/MoinMoinArchitecture.png" /&gt;&lt;/p&gt;
&lt;h2&gt;3. MoinMoin 常用对象&lt;/h2&gt;
&lt;h3&gt;3.1. request&lt;/h3&gt;
&lt;p&gt;这个request和普通jsp/asp中request很类似（实际上这个request就是继承
&lt;a href="http://werkzeug.pocoo.org/"&gt;werkzeug&lt;/a&gt;的Request）。&lt;/p&gt;
&lt;p&gt;除了正常的web request功能，Moin的request还带了Wiki自身的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request.getText # 多国语函数，经常使用 &lt;code&gt;_ = request.getText&lt;/code&gt; 来简化代码&lt;/li&gt;
&lt;li&gt;request.dicts # 获取定义在页面中的Dict，参见http://moinmo.in/HelpOnDictionaries&lt;/li&gt;
&lt;li&gt;request.groups # 获取权限管理中的组别&lt;/li&gt;
&lt;li&gt;request.user.may # 检查用户权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.2. Page&lt;/h3&gt;
&lt;p&gt;Page是最常见的类，它代表某个Wiki页面，通过它可以获取某个页面所有信息。 age本身是只读的，如果需要编辑需要使用PageEditor。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Page.exists() # 是否存在&lt;/li&gt;
&lt;li&gt;Page.getRevList() # 版本列表&lt;/li&gt;
&lt;li&gt;Page.current_rev() # 当前版本&lt;/li&gt;
&lt;li&gt;Page.getPagePath() # 存储路径&lt;/li&gt;
&lt;li&gt;Page.get_raw_body() # 获取存储的数据&lt;/li&gt;
&lt;li&gt;Page.send_page() # 发送格式化好页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.3. PageEditor&lt;/h3&gt;
&lt;p&gt;上面说到Page是只读的，那当我们需要编辑页面时候，就要用到PageEditor类了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PageEditor.saveText() # 保存内容&lt;/li&gt;
&lt;li&gt;PageEditor.deletePage() # 删除页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.4. AttachFile&lt;/h3&gt;
&lt;p&gt;顾名思义，AttachFile用来管理页面附件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttachFile.exists() # 检查附件是否存在&lt;/li&gt;
&lt;li&gt;AttachFile.getAttachDir() # 获取附件存放的本地目录&lt;/li&gt;
&lt;li&gt;AttachFile.getAttachUrl() # 获取附件url&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.5. wikiutil&lt;/h3&gt;
&lt;p&gt;wikiutil 是MoinMoin提供的一个帮助类，包含一些常用的小功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wikiutil.escape() # html转义&lt;/li&gt;
&lt;li&gt;wikiutil.createTicket() # 生成一串唯一key，用来页面验证&lt;/li&gt;
&lt;li&gt;wikiutil.checkTicket() # 检查ticket&lt;/li&gt;
&lt;li&gt;wikiutil.invoke_extension_function() # 注入脚本类插件&lt;/li&gt;
&lt;li&gt;wikiutil.version2timestamp() # 将MoinMoin时间转换成UNIX时间戳&lt;/li&gt;
&lt;li&gt;wikiutil.timestamp2version() # 参考楼上&lt;/li&gt;
&lt;li&gt;wikiutil.renderText() # 将wiki text转换成html来展现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.6. user&lt;/h3&gt;
&lt;p&gt;用户类，CRUD操作，不解释。&lt;/p&gt;
&lt;h3&gt;3.7. formatter&lt;/h3&gt;
&lt;p&gt;formatter将输出展现类，将wiki text转换为各种预定义的格式。 需要和parser配合使用（两者关系看上去像抽象工厂模式）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formatter.text() # 格式化为普通文本&lt;/li&gt;
&lt;li&gt;formatter.img() # 格式化为图片&lt;/li&gt;
&lt;li&gt;formatter.number_list() # 格式化为有序列表&lt;/li&gt;
&lt;li&gt;formatter.bullet_list() # 格式化为无序列表&lt;/li&gt;
&lt;li&gt;formatter.listitem() # 格式化为列表项&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.8. parser&lt;/h3&gt;
&lt;p&gt;formatter完成的工作是展现解析后的wiki内容，而负责解析的就是parser了。&lt;/p&gt;
&lt;p&gt;流程是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wiki&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每一个parser都对应一个或者多个formatter。系统内置的 parser/formatter 有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docbook&lt;/li&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;li&gt;plain&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;rst&lt;/li&gt;
&lt;li&gt;cvs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. MoinMoin 运行流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;cgi.py&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过url获取pagename和action，然后调用对应的Page方法和Action对象  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Page().send_page()创建普通页面&lt;/li&gt;
&lt;li&gt;MoinMoin.action.getHandler()用来获取对应action&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;5. MoinMoin 开发配置&lt;/h2&gt;
&lt;h3&gt;5.1. 禁用pyc缓存&lt;/h3&gt;
&lt;p&gt;MoinMoin 为了提高系统效率，会为 python 文件生成pyc缓存，如果放任它们的话。
每次修改python源码效果都得不到立即体现。所以我们要在开发阶段禁用系统缓存。&lt;/p&gt;
&lt;p&gt;在文件 &lt;code&gt;/usr/lib/python2.7/site-packages/MoinMoin/config/multiconfig.py&lt;/code&gt;
的第815行左右，修改 &lt;code&gt;options_no_group_name&lt;/code&gt; 中的 &lt;code&gt;cache&lt;/code&gt; 时间。&lt;/p&gt;
&lt;p&gt;当改为0时候，就不使用 &lt;code&gt;pyc&lt;/code&gt; 缓存，这样就不用重启服务器来清楚缓存了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;options_no_group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="err"&gt;#&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;cheap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;efficient&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;cheap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;efficient&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt; &lt;span class="n"&gt;alswl&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. image2attach 范例&lt;/h2&gt;
&lt;p&gt;image2attach这个插件功能很简单，就是读取wiki文本内容，找出所有图片，
然会将这些图片从互联网上下载到本地，并将文中的图片链接改为MoinMoin的附件链接。&lt;/p&gt;
&lt;h3&gt;6.1. 创建插件文件&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;data/plugin/action/&lt;/code&gt; 目录下创建文件Image2Attach.py。
（请使用大写文件，Moin会自动识别大写开头的Python文件为插件）&lt;/p&gt;
&lt;h3&gt;6.2. 基本框架&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt; ：hook函数，用来给上层调用，签名必须是 &lt;code&gt;def execute(pagename, request)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Class Image2Attach&lt;/code&gt; ：主要类，处理逻辑。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;process() / process_line()&lt;/code&gt; ：处理每行wiki text，会抓取&lt;a&gt;和&lt;img&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_transclude() / process_link()&lt;/code&gt; ：分别处理&lt;a&gt; / &lt;img&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch_image()&lt;/code&gt; ：下载图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_attachment()&lt;/code&gt; ：将图片作为附件加入到wiki&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_file()&lt;/code&gt; ：写入wiki text&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，开发Moin插件还是比较方便的，官方提供了详尽（但不够顺畅）的教程和
&lt;a href="http://docs.moinmo.in/moin/1.9/"&gt;API文档&lt;/a&gt;。 我大部分时间在看Moin的API文档，
Moin作为一款久经考研的Wiki系统，开放的代码也有很多地方可以学习。&lt;/p&gt;</summary><category term="image2attach"></category><category term="MoinMoin"></category></entry><entry><title>baidu ting下载音乐脚本</title><link href="/2012/01/tingdownload/" rel="alternate"></link><updated>2012-01-03T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2012-01-03:2012/01/tingdownload/</id><summary type="html">&lt;p&gt;度娘终于干了一件好事，&lt;a href="http://ting.baidu.com"&gt;Baidu Ting&lt;/a&gt;上线了，
正版音乐免费下载，类似于&lt;a href="http://www.google.cn/music"&gt;谷歌音乐&lt;/a&gt;。 关于音乐版权和免费的问题， 有很多问题需要取讨论，
比如说这种商业模式是否对传统唱片业产生冲击又或是有积极影响？ 作为普通消费者，暂时不用考虑这些问题，先享受这些服务好了。&lt;/p&gt;
&lt;p&gt;Baidu Ting的音乐质量是128KBps，音质算好，里面的idv3信息也勉强可以，有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歌名&lt;/li&gt;
&lt;li&gt;歌手&lt;/li&gt;
&lt;li&gt;部分专辑名（偶尔也出现"201-8月新歌快递"这种比较山寨的字）&lt;/li&gt;
&lt;li&gt;部分唱片封面图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然比不上谷歌音乐连歌曲风格都准备好了，但是比杂乱无章的那些音乐mp3要好太多了。&lt;/p&gt;
&lt;h2&gt;自动下载脚本tingdownload&lt;/h2&gt;
&lt;p&gt;早上下了几首音乐，就顺手写了一个脚本，用来批量从Badu Ting下载音乐。&lt;/p&gt;
&lt;p&gt;代码在&lt;a href="https://github.com/alswl/tingdownload"&gt;github-tingdownload&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;需要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 2 (仅在Python2.7下测试)&lt;/li&gt;
&lt;li&gt;BeautifulSoup(已包含在目录下)&lt;/li&gt;
&lt;li&gt;simplejson（已包含在目录下)&lt;/li&gt;
&lt;li&gt;一点点Python基础&lt;/li&gt;
&lt;li&gt;Linux/Windows（我在Linux没问题，Windows应该也可以）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;在Shell(命令行)里输入下面随便一个命令，就会在当前目录下面出现 &lt;code&gt;musics&lt;/code&gt; 文件夹， 里面就有下载好的音乐。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 使用说明&lt;/span&gt;
&lt;span class="nl"&gt;usage:&lt;/span&gt; &lt;span class="n"&gt;tingdownload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Keyword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Keyword&lt;/span&gt; &lt;span class="p"&gt;...]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A script to download music from ting.baidu.com.&lt;/p&gt;
&lt;p&gt;positional arguments:&lt;/p&gt;
&lt;p&gt;Keyword&lt;/p&gt;
&lt;p&gt;optional arguments:&lt;/p&gt;
&lt;p&gt;-h, --help show this help message and exit&lt;br /&gt;
--input INPUT, -i INPUT&lt;br /&gt;
a list file to input musics&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 示例&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;tingdownload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="err"&gt;老男孩&lt;/span&gt; &lt;span class="err"&gt;#单个文件下载&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tingdownload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="err"&gt;老男孩&lt;/span&gt; &lt;span class="err"&gt;#单个文件下载（给&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;文件加上可执行权限）&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;tingdownload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="err"&gt;老男孩&lt;/span&gt; &lt;span class="n"&gt;Raise&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;多文件名，如果有空格，请记得加上空格反转&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;批量下载的话，可以准备一个列表文件，每个歌曲名用回车隔开，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;还过得去&lt;/span&gt;
&lt;span class="err"&gt;不敢太幸福&lt;/span&gt;
&lt;span class="err"&gt;小情歌&lt;/span&gt;
&lt;span class="err"&gt;爱情靠不住&lt;/span&gt;
&lt;span class="err"&gt;我爱我&lt;/span&gt;
&lt;span class="err"&gt;你可以不用给我答案&lt;/span&gt;     &lt;span class="err"&gt;金莎&lt;/span&gt;
&lt;span class="err"&gt;没有这首歌&lt;/span&gt;         &lt;span class="err"&gt;后弦&lt;/span&gt;
        &lt;span class="err"&gt;回不去了吗&lt;/span&gt;         &lt;span class="err"&gt;萧亚轩&lt;/span&gt;
        &lt;span class="err"&gt;有些事现在不做&lt;/span&gt; &lt;span class="err"&gt;一辈子都不会做了&lt;/span&gt;  &lt;span class="err"&gt;五月天&lt;/span&gt;
        &lt;span class="err"&gt;第一夫人&lt;/span&gt;    &lt;span class="err"&gt;张杰&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将这个list文件作为输入传入执行脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt; &lt;span class="n"&gt;tingdownload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果如下，列出四种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载成功，如果文件已经存在，会跳过&lt;/li&gt;
&lt;li&gt;下载失败，由于网络原因&lt;/li&gt;
&lt;li&gt;下载失败，由于关键词不准确而出现太多结果&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载失败，没有关键词匹配的结果&lt;/p&gt;
&lt;p&gt;█▓▒░alswl@x201█▓▒░ ~/dev/project/python/tingdownload/ ./tingdownload.py 黄昏\ 周传雄 考试什么 --input ~/a.txt&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Start download 黄昏 周传雄...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Info: File "/home/alswl/dev/project/python/tingdownload/musics/周传雄-黄昏.mp3" exists.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Start download 考试什么...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Info: File "/home/alswl/dev/project/python/tingdownload/musics/徐良-考试什么的去死吧.mp3" exists.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Start download 还过得去...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Start download 不敢太幸福...&lt;/p&gt;
&lt;p&gt;Start download 小情歌...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Failed: Too more result found for keyword 小情歌.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Start download 爱情靠不住...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;== Download success (4) ==&lt;/p&gt;
&lt;p&gt;黄昏 周传雄&lt;/p&gt;
&lt;p&gt;考试什么&lt;/p&gt;
&lt;p&gt;还过得去&lt;/p&gt;
&lt;p&gt;不敢太幸福&lt;/p&gt;
&lt;p&gt;== Download failed for too many result (1) ==&lt;/p&gt;
&lt;p&gt;小情歌&lt;/p&gt;
&lt;p&gt;Enjoy it.&lt;/p&gt;</summary><category term="tingdownload"></category></entry><entry><title>MoinMoin plugin: image2attach</title><link href="/2011/12/moinmoin-plugin-image2attach/" rel="alternate"></link><updated>2011-12-18T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-12-18:2011/12/moinmoin-plugin-image2attach/</id><summary type="html">&lt;p&gt;&lt;img alt="MoinMoin" src="http://upload-log4d.qiniudn.com/2011/12/moinmoin.png" /&gt;&lt;/p&gt;
&lt;h2&gt;What's this&lt;/h2&gt;
&lt;p&gt;Image2Attach is a extension for &lt;a href="http://moinmo.in"&gt;MoinMoin&lt;/a&gt;.
It can create a page action to save images from web to page's attachments.&lt;/p&gt;
&lt;h2&gt;Requirment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MoinMoin 1.9 (I only test in this version.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;copy action/Image2Attach.py to data/plugin/action/&lt;/li&gt;
&lt;li&gt;restart python server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Go into a page, click &lt;code&gt;more action&lt;/code&gt; - &lt;code&gt;Image2Attach&lt;/code&gt; .
It will take a while to fetch the images,
after that it will save the image to attachments and replace the
image's link with attachment's link.
Finnally it will commit a change with message
&lt;code&gt;internet image save to attachment&lt;/code&gt; to wiki.&lt;/p&gt;
&lt;p&gt;Enjoy it, any bugs can report to
&lt;a href="https://github.com/alswl/image2attach/issues"&gt;Issue Report&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;You can get some develop infomation in
&lt;a href="http://log4d.com/tag/image2attach"&gt;Image2attach - Log4D&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Licence&lt;/h2&gt;
&lt;p&gt;Distributed under the &lt;a href="http://www.gnu.org/licenses/gpl-2.0.htmwl"&gt;GPL v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source code powered by &lt;a href="https://github.com/alswl/image2attach"&gt;https://github.com/alswl/image2attach&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;update&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2012-05-28&lt;/li&gt;
&lt;li&gt;fix url catch bug(Issue 4 / Issue 6)&lt;/li&gt;
&lt;li&gt;2011-12-25 &lt;/li&gt;
&lt;li&gt;support link([[http://xxx.com/xxx.jpg|)&lt;/li&gt;
&lt;li&gt;fix url has 'attachment' string bug.&lt;/li&gt;
&lt;li&gt;support image attachment rewrite.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="image2attach"></category><category term="MoinMoin"></category></entry><entry><title>dbevent2gc v0.1发布</title><link href="/2011/11/dbevent2gc-v0-1-released/" rel="alternate"></link><updated>2011-11-25T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-11-25:2011/11/dbevent2gc-v0-1-released/</id><summary type="html">&lt;p&gt;重要通知：Log4D的域名由 &lt;a href="http://dddspace.com"&gt;http://dddspace.com&lt;/a&gt; 迁移到
&lt;a href="http://log4d.com"&gt;http://log4d.com&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;订阅地址现在改为 &lt;a href="http://log4d.com/feed"&gt;http://log4d.com/feed&lt;/a&gt; 和
&lt;a href="http://feeds.feedburner.com/dddspace"&gt;http://feeds.feedburner.com/dddspace&lt;/a&gt;
。（FeedBurner的地址未发生变化）&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;http://feed.dddspace.com&lt;/strike&gt; 弃用&lt;/p&gt;
&lt;p&gt;请订阅我博客的朋友更新一下订阅地址。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dbevent2gc" src="http://upload-log4d.qiniudn.com/2011/11/dbevent2gc.png" /&gt;&lt;/p&gt;
&lt;h2&gt;关于dbevent2gc&lt;/h2&gt;
&lt;p&gt;A application to sync douban.com events to Google Calendar.&lt;/p&gt;
&lt;p&gt;dbevent2gc是一个GAE应用，它将豆瓣同城的活动同步到Google Calendar的日历， 允许用户订阅活动而知道最近几周周边将发生活动。&lt;/p&gt;
&lt;p&gt;dbevent2gc是基于Python/web.py/mako/iCalendar的，源代码地址在
&lt;a href="https://github.com/alswl/dbevent2gc"&gt;https://github.com/alswl/dbevent2gc&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;目前dbevent2gc运行在GAE上面，地址是 http://dbevent2gc.appspot.com （墙外）
&lt;a href="http://dbevent2gc.log4d.com/"&gt;http://dbevent2gc.log4d.com/&lt;/a&gt; （我做的本地反向代理）
登录这个地址可以选择需要订阅的城市和活动类型，然后会生成一个按钮， 点击这个按钮可以直接将选择的活动订阅到Google日历。&lt;/p&gt;
&lt;p&gt;如果你无法翻墙，可以使用 &lt;a href="h
ttp://dbevent2gc.appspot.com/event/location/beijing?type=all"&gt;http://dbevent2gc.appspot.com/event/location/beijing?type=all&lt;/a&gt; 这样的地址添加到你的Google
Calender里面。&lt;/p&gt;
&lt;p&gt;接受的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;城市（把最后的beijing替换成你想要的城市拼音， 更多城市拼音查看&lt;a href="http://www.douban.com/location/world/?others=true"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;活动类型 type，支持all, commonweal, drama, exhibition, film, music, others, party, salon, sports, travel. 可选参数,默认为all&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装方法&lt;/h2&gt;
&lt;p&gt;如果想自己搭建GAE应用，也很简单，直接使用 &lt;code&gt;git://github.com/alswl/dbevent2gc.git&lt;/code&gt; 就可以获取最新代码，
然后嘛去GAE注册一个应用，上传即可运行了。&lt;/p&gt;
&lt;p&gt;dbevent2gc看上去可以用了，我昨晚发布了v0.1版本。&lt;/p&gt;
&lt;p&gt;感兴趣的同学可以试试，现在的问题是获取的活动可能太多了，&lt;strike&gt;我后期会加上过滤功能&lt;/strike&gt;（update
2011-11-26，我已经添加了活动类型选择功能）。&lt;/p&gt;</summary><category term="coffee-time-project"></category><category term="dbevent2gc"></category><category term="GAE"></category><category term="github"></category><category term="iCalendar"></category><category term="Mako"></category><category term="OpenSource"></category><category term="web.py"></category></entry><entry><title>使用nose做测试</title><link href="/2011/09/nose/" rel="alternate"></link><updated>2011-09-22T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-09-22:2011/09/nose/</id><summary type="html">&lt;p&gt;不做单元测试的程序员不是好程序员。最近我在Pylons下面做开发， 使用
&lt;a href="http://readthedocs.org/docs/nose/en/latest"&gt;nose&lt;/a&gt; 做单元测试，颇有心得， 在这里分享一下。&lt;/p&gt;
&lt;h2&gt;1. Pylons中依赖包&lt;/h2&gt;
&lt;p&gt;先简单介绍一下Pylons, Pylons与其说是一个框架，不如说是一堆框架的组合， Pylons在其中做到一个胶水的作用。Pylons依赖的包如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/danielfm/pybreaker"&gt;breaker，缓存和Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://formencode.org/"&gt;FormEncode，用户输入检查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.makotemplates.org/"&gt;Mako，模板渲染&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://readthedocs.org/docs/nose/en/latest/"&gt;nose，自动化测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/script/"&gt;Paste，服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://routes.groovie.org/"&gt;Routes, 路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/tempita/"&gt;Tempita，Paste的模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://packages.python.org/WebCore/modules/thirdparty/weberror.html"&gt;Weberror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.webob.org/en/latest/index.html"&gt;WebOb，提供WSGI请求响应等对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/webtest/"&gt;WebTest，Paste自带的测试小框架， 提供TestResponse和TestRequest两个有用的小东西&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pylons的测试主要使用的其中的 Paste / nose / WebOb / WebTest。 遇到问题的时候，可以去翻一翻上面的文档。&lt;/p&gt;
&lt;h2&gt;2. Pylons中测试目录结构&lt;/h2&gt;
&lt;p&gt;目录结构如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="nx"&gt;controllers&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="kr"&gt;public&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;
&lt;span class="err"&gt;└─&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;
    &lt;span class="err"&gt;└─&lt;/span&gt;&lt;span class="nx"&gt;functional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录中的 &lt;code&gt;config / controllers / lib / model / public&lt;/code&gt;
在不同的web框架下面可能会略有差别，在这里我不关注他们，我关注 &lt;code&gt;tests / functional&lt;/code&gt; 中存放相应的测试脚本，比如
&lt;code&gt;test_user.py&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;3. 第一个简单的测试用例&lt;/h2&gt;
&lt;h3&gt;3.1. 撰写单元测试文件&lt;/h3&gt;
&lt;p&gt;最简单的test脚本如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;myb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class TestIndexController(TestController):&lt;/p&gt;
&lt;p&gt;def test_index(self):&lt;/p&gt;
&lt;p&gt;pass&lt;/p&gt;
&lt;h1&gt;Test response...&lt;/h1&gt;
&lt;p&gt;这里我们从 &lt;code&gt;myb.tests&lt;/code&gt; 这个目录下面引入了所有包 （其实起作用的是 &lt;code&gt;__init__.py&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt; 如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;#coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob.headers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ResponseHeaders&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;from paste.deploy import loadapp&lt;/p&gt;
&lt;p&gt;from paste.script.appinstall import SetupCommand&lt;/p&gt;
&lt;p&gt;from pylons import url&lt;/p&gt;
&lt;p&gt;from routes.util import URLGenerator&lt;/p&gt;
&lt;p&gt;from webtest import TestApp&lt;/p&gt;
&lt;p&gt;import pylons.test&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;all&lt;/strong&gt; = ['environ', 'url', 'TestController']&lt;/p&gt;
&lt;h1&gt;Invoke websetup with the current config file&lt;/h1&gt;
&lt;p&gt;SetupCommand('setup-app').run([pylons.test.pylonsapp.config['&lt;strong&gt;file&lt;/strong&gt;']])&lt;/p&gt;
&lt;p&gt;environ = {}&lt;/p&gt;
&lt;p&gt;class TestController(TestCase):&lt;/p&gt;
&lt;p&gt;def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;args, &lt;/em&gt;*kwargs):&lt;/p&gt;
&lt;p&gt;wsgiapp = pylons.test.pylonsapp&lt;/p&gt;
&lt;p&gt;config = wsgiapp.config&lt;/p&gt;
&lt;p&gt;self.app = TestApp(wsgiapp)&lt;/p&gt;
&lt;p&gt;url._push_object(URLGenerator(config['routes.map'], environ))&lt;/p&gt;
&lt;p&gt;TestCase.&lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;args, &lt;/em&gt;*kwargs)&lt;/p&gt;
&lt;p&gt;可以看到，这里使用了 &lt;code&gt;TestController&lt;/code&gt; 继承了 &lt;code&gt;TestCase&lt;/code&gt; 这个单元测试基类， 并且在里面进行了web应用的环境初始化。&lt;/p&gt;
&lt;h3&gt;3.2. 撰写测试配置文件&lt;/h3&gt;
&lt;p&gt;上文撰写了一个最简单的测试代码，我们接着做一些单元测试配置。&lt;/p&gt;
&lt;p&gt;在app应用的同级文件里面，修改 &lt;code&gt;test.ini&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[DEFAULT]&lt;/span&gt;
&lt;span class="na"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;#email_to = you@yourdomain.com&lt;/span&gt;
&lt;span class="na"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;error_email_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;paste@localhost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[server:main]&lt;/p&gt;
&lt;p&gt;use = egg:Paste#http&lt;/p&gt;
&lt;p&gt;host = 127.0.0.1&lt;/p&gt;
&lt;p&gt;port = 5000&lt;/p&gt;
&lt;p&gt;[app:main]&lt;/p&gt;
&lt;p&gt;use = config:development.ini&lt;/p&gt;
&lt;p&gt;sqlalchemy.url =
mysql://username:password@localhost/myb_test?charset=utf8&amp;amp;use_unicode=1&lt;/p&gt;
&lt;h1&gt;Logging configuration&lt;/h1&gt;
&lt;p&gt;[loggers]&lt;/p&gt;
&lt;p&gt;keys = root, routes, myb, sqlalchemy&lt;/p&gt;
&lt;p&gt;[handlers]&lt;/p&gt;
&lt;p&gt;keys = console&lt;/p&gt;
&lt;p&gt;[formatters]&lt;/p&gt;
&lt;p&gt;keys = generic&lt;/p&gt;
&lt;p&gt;[logger_root]&lt;/p&gt;
&lt;p&gt;level = INFO&lt;/p&gt;
&lt;p&gt;handlers = console&lt;/p&gt;
&lt;p&gt;[logger_routes]&lt;/p&gt;
&lt;p&gt;level = INFO&lt;/p&gt;
&lt;p&gt;handlers =&lt;/p&gt;
&lt;p&gt;qualname = routes.middleware&lt;/p&gt;
&lt;h1&gt;"level = DEBUG" logs the route matched and routing variables.&lt;/h1&gt;
&lt;p&gt;[logger_myb]&lt;/p&gt;
&lt;p&gt;level = DEBUG&lt;/p&gt;
&lt;p&gt;handlers =&lt;/p&gt;
&lt;p&gt;qualname = myb&lt;/p&gt;
&lt;p&gt;[logger_sqlalchemy]&lt;/p&gt;
&lt;p&gt;level = INFO&lt;/p&gt;
&lt;p&gt;handlers =&lt;/p&gt;
&lt;p&gt;qualname = sqlalchemy.engine&lt;/p&gt;
&lt;h1&gt;"level = INFO" logs SQL queries.&lt;/h1&gt;
&lt;h1&gt;"level = DEBUG" logs SQL queries and results.&lt;/h1&gt;
&lt;h1&gt;"level = WARN" logs neither. (Recommended for production systems.)&lt;/h1&gt;
&lt;p&gt;[handler_console]&lt;/p&gt;
&lt;p&gt;class = StreamHandler&lt;/p&gt;
&lt;p&gt;args = (sys.stderr,)&lt;/p&gt;
&lt;p&gt;level = NOTSET&lt;/p&gt;
&lt;p&gt;formatter = generic&lt;/p&gt;
&lt;p&gt;[formatter_generic]&lt;/p&gt;
&lt;p&gt;format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s]
%(message)s&lt;/p&gt;
&lt;p&gt;datefmt = %H:%M:%S&lt;/p&gt;
&lt;p&gt;这个配置文件设定了基本调试信息，数据库（使用myb_test数据库来避免修改原始数据） ，log方式。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;[app:main]&lt;/code&gt; 里面，我直接引用了 &lt;code&gt;development.ini&lt;/code&gt; 的配置。&lt;/p&gt;
&lt;h3&gt;3.3. 运行nose&lt;/h3&gt;
&lt;p&gt;在shell里面切换到app所在的目录（test.ini）所在的目录，运行 &lt;code&gt;nosetests
myb/tests/functional/test_hello world.py&lt;/code&gt; 。 之后会出现一些log内容，不出意外的话，应该出现 &lt;code&gt;OK&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果遇到 &lt;code&gt;FAILED&lt;/code&gt; ，那就根据错误提示的信息来查错。 nose会输出log的信息和print标准输出的信息。&lt;/p&gt;
&lt;h2&gt;4. 高级一点的测试方法&lt;/h2&gt;
&lt;p&gt;在开发过程中，我们需要判定单元测试是否正确，我罗列一些常见的用法&lt;/p&gt;
&lt;h3&gt;4.1. 测试返回类型为HTTP STATUS的方法&lt;/h3&gt;
&lt;p&gt;每次HTTP请求都会返回HTTP STATUS，正常是200，找不到是404，服务器错误是500， 我们可以根据这些返回状态值来判断测试是否跑通。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;TestQuestionController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;def test_suggest_question(self):&lt;/p&gt;
&lt;h1&gt;正常返回200&lt;/h1&gt;
&lt;p&gt;response = self.app.get(url=url(controller='question',&lt;/p&gt;
&lt;p&gt;action='suggest_question',&lt;/p&gt;
&lt;p&gt;),&lt;/p&gt;
&lt;p&gt;params={&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;headers=self.headers,&lt;/p&gt;
&lt;p&gt;status=200,&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;h1&gt;不存在的id返回404&lt;/h1&gt;
&lt;p&gt;response = self.app.get(url=url(controller='question',&lt;/p&gt;
&lt;p&gt;action='suggest_question',&lt;/p&gt;
&lt;p&gt;),&lt;/p&gt;
&lt;p&gt;params={&lt;/p&gt;
&lt;p&gt;'id': '345',&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;headers=self.headers,&lt;/p&gt;
&lt;p&gt;status=404,&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;我习惯使用 &lt;code&gt;url()&lt;/code&gt; 方法来生成url，这样一方面不用记住冗长的url， 另外在url路由表发生变化之后，也不用去改变测试代码。&lt;/p&gt;
&lt;h3&gt;4.2. 测试返回类型为html的方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                 &lt;span class="p"&gt;{&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;login_name&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;nose_json&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;login_pass&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;测试机器人&lt;/span&gt;&lt;span class="n"&gt;_json&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="p"&gt;},&lt;/span&gt;
                                 &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
                                 &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="n"&gt;cb962ac59075b964b07152d234b70&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="err"&gt;#返回的加密密码&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;器&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unicode_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#无法测试中文&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;测试机器人&lt;/span&gt;&lt;span class="n"&gt;_json&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unicode_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#无法测试中文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;response.body&lt;/code&gt; 来判定html里面的内容（这里对中文支持不太好）。&lt;/p&gt;
&lt;h3&gt;4.3. 测试返回类型为json的方法&lt;/h3&gt;
&lt;p&gt;AJAX请求正常返回的状态吗都是200，我们需要判定里面的内容进行assert&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;invitation&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;invite_by_mail&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                 &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;to_address&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;to_user_name&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;大爷&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="p"&gt;},&lt;/span&gt;
                                 &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
                                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;发送失败：你妹不漂亮&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4.4. 测试返回类型为重定向的方法&lt;/h3&gt;
&lt;p&gt;这是HTTP状态吗的特殊形式，比如登录之后做一次跳转之类的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#成功之后返回&lt;/span&gt;&lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="err"&gt;做跳转，同时判定返回内容中跳转路径&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="p"&gt;),&lt;/span&gt;
                                 &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;question_title&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;hwti1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;question_content&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;wgtinzrs1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="p"&gt;},&lt;/span&gt;
                                 &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost/question/d*&amp;#39;,&lt;/span&gt;
                        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4.5. 用户登录生成Session&lt;/h3&gt;
&lt;p&gt;有些方法需要登录后才能运行，这依赖于服务器和浏览器之间的Cookie。如果要对这类
方法进行测试，我们需要事先获取Cookie，再在每一次请求发出的时候附带这个Cookie。&lt;/p&gt;
&lt;p&gt;在下面的方法中，我实现了用户登录操作。 在test目录下的 &lt;code&gt;__init.py__&lt;/code&gt; 中 &lt;code&gt;TestController&lt;/code&gt; 加入新方法 &lt;code&gt;login()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;用户登录操作，获取&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"""&lt;/p&gt;
&lt;p&gt;response = self.app.post(url=url(controller='users',&lt;/p&gt;
&lt;p&gt;action='login'),&lt;/p&gt;
&lt;p&gt;params={&lt;/p&gt;
&lt;p&gt;'login_name': login_name,&lt;/p&gt;
&lt;p&gt;'login_pass': login_pass,&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;cookie = response.headers.getall('Set-cookie')[0]&lt;/p&gt;
&lt;p&gt;self.headers = ResponseHeaders()&lt;/p&gt;
&lt;p&gt;self.headers.add('Cookie', cookie)&lt;/p&gt;
&lt;p&gt;这样就可以通过 &lt;code&gt;self.headers&lt;/code&gt; 保存登录之后的cookie。&lt;/p&gt;
&lt;h3&gt;4.6. 批量测试&lt;/h3&gt;
&lt;p&gt;除了制定 &lt;code&gt;test_xxx.py&lt;/code&gt; 文件进行单元测试，我们还可以直接使用 &lt;code&gt;nosetests&lt;/code&gt; 测试所有测试用例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;nosetests&lt;/span&gt;
&lt;span class="c1"&gt;//该目录下需要存在 test.ini 配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. 遇到的问题&lt;/h2&gt;
&lt;h3&gt;5.1. 编码问题&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebtest__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;211&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebtest__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_gen_request&lt;/span&gt;
    &lt;span class="n"&gt;expect_errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expect_errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebtest__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_request&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;catch_exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebobrequest.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;catch_exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebobrequest.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;977&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;call_application&lt;/span&gt;
    &lt;span class="n"&gt;app_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbdist.win32eggwebtestlint.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;170&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lint_app&lt;/span&gt;
    &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response_wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespaste-1.7.5.1-py2.6.eggpastecascade.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespaste-1.7.5.1-py2.6.eggpasteregistry.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;app_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsmiddleware.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;catch_exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsutil.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;call_wsgi_application&lt;/span&gt;
    &lt;span class="n"&gt;app_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagesweberror-0.10.3-py2.6.eggweberrorevalexception.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagesweberror-0.10.3-py2.6.eggweberrorevalexception.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;418&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;respond&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagesbeaker-1.5.4-py2.6.eggbeakermiddleware.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session_start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagesroutes-1.12.3-py2.6.eggroutesmiddleware.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonswsgiapp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonswsgiapp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;F:workxintongworkspaceMYB_WENDAmybmyblibbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WSGIController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonscontrollerscore.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;266&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;517&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;341&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;322&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_response&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plain_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plain_body&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_escape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;294&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_make_body&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;182&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;no_escape&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsutil.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__repr__&lt;/span&gt;
    &lt;span class="n"&gt;value_repr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;UnicodeEncodeError:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ordinal&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个明显由编码引起的错误。&lt;/p&gt;
&lt;p&gt;修改pylons-1.0-py2.6.eggPylonsutil.py中112行修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;value_repr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;encode error in pylons/utils.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样虽然不能从根本上解决问题，但是至少规避了问题。&lt;/p&gt;</summary><category term="nose"></category><category term="Pylons"></category></entry><entry><title>TypeError: sequence item 22: expected string or Unicode, long found</title><link href="/2011/08/mako-typeerror/" rel="alternate"></link><updated>2011-08-25T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-08-25:2011/08/mako-typeerror/</id><summary type="html">&lt;p&gt;Mako 下面开发时候，遇到这个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeError: sequence item : expected string or Unicode, long found&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trace 的情况大概这样（我的错误信息无法再现，这是某位外国友人的错误信息）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/doupy/doupy/controllers/ root.py',
line 239 in staticpage&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;return render('/pages/%s.html' % name)&lt;/p&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Pylons-0.9.7-py2.5.egg/pylons/templating.py', line 274 in render_mako&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;cache_type=cache_type, cache_expire=cache_expire)&lt;/p&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Pylons-0.9.7-py2.5.egg/pylons/templating.py', line 249 in
cached_template&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;return render_func()&lt;/p&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Pylons-0.9.7-py2.5.egg/pylons/templating.py', line 271 in
render_template&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;return literal(template.render_unicode(**globs))&lt;/p&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Mako-0.2.4-py2.5.egg/mako/template.py', line 138 in render_unicode
return runtime.&lt;em&gt;render(self, self.callable&lt;/em&gt;, args, data, as_unicode=True) File
'/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Mako-0.2.4-py2.5.egg/mako/runtime.py', line 348 in _render&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;return context._pop_buffer().getvalue()&lt;/p&gt;
&lt;p&gt;File '/Users/amaslov/Projects/dou-pylons/py/lib/python2.5/site-
packages/Mako-0.2.4-py2.5.egg/mako/util.py', line 74 in getvalue&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;return self.delim.join(self.data)&lt;/p&gt;
&lt;p&gt;TypeError: sequence item 68: expected string or Unicode, NoneType found&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mako 的邮件列表曾在2009年遇到这个错误，讨论信息在&lt;a href="http://www.mail-archive.com/pylons-
discuss@googlegroups.com/msg11021.html"&gt;这里&lt;/a&gt;（需翻墙）&lt;/p&gt;
&lt;p&gt;讨论了半天也没什么结果，一直围绕在 default_filter 上面，我改了半天，也没效果。&lt;/p&gt;
&lt;p&gt;测试服务器和正式环境都没有问题，最后试了清空&lt;code&gt;data/session, data/templates&lt;/code&gt; 目录，终于没错误了。&lt;/p&gt;
&lt;p&gt;Google 上这个错误信息资料太少，我就记下来，如果哪位同学出现同样错误找到我这里，就方便解决了。&lt;/p&gt;</summary><category term="Mako"></category></entry><entry><title>go-pylons.py在Python2.7下错误解决</title><link href="/2011/08/go-pylons-py-in-python2-7/" rel="alternate"></link><updated>2011-08-02T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-08-02:2011/08/go-pylons-py-in-python2-7/</id><summary type="html">&lt;p&gt;当使用 Python2.7 +&lt;a href="http://pylonshq.com/download/1.0/go-pylons.py"&gt; go-pylons.py&lt;/a&gt;
创建 Pylons 运行环境的话，会报一下错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;alswl&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;arch&lt;/span&gt;&lt;span class="na"&gt;-vm&lt;/span&gt; &lt;span class="nx"&gt;xingtong&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;$ python go-pylons.py myb_env
New python executable in myb_env/bin/python
Traceback (most recent call last):
  File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/site.py&amp;quot;, line 67, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    import os
  File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/os.py&amp;quot;, line 398, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    import UserDict
  File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/UserDict.py&amp;quot;, line 83, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    import _abcoll
  File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/_abcoll.py&amp;quot;, line 11, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    from abc import ABCMeta, abstractmethod
  File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/abc.py&amp;quot;, line 8, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    from _weakrefset import WeakSet
ImportError: No module named _weakrefset
ERROR: The executable myb_env/bin/python is not functioning
ERROR: It thinks sys.prefix is &amp;#39;/home/alswl/work/xingtong&amp;#39; (should be &amp;#39;/home/alswl/work/xingtong/myb_env&amp;#39;)
ERROR: virtualenv is not compatible with this system or executable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;STFW 之后，找到了引发错误的根源&amp;amp;nbsp_place_holder;&lt;a href="https://github.com/pypa/virtualenv"&gt;virtualenv
&lt;/a&gt;，这个 bug
在&lt;a href="https://github.com/pypa/virtualenv/issues/76"&gt;这里&lt;/a&gt;已经修复了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- a/virtualenv.py        2010-09-14 21:48:58.078562930 +0200&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/virtualenv.py        2010-09-14 21:46:20.650769346 +0200&lt;/span&gt;
&lt;span class="gu"&gt;@@ -51,6 +51,8 @@ REQUIRED_FILES = [&amp;#39;lib-dynload&amp;#39;, &amp;#39;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;if sys.version_info[:2] &amp;gt;= (2, 6):&lt;/p&gt;
&lt;p&gt;REQUIRED_MODULES.extend(['warnings', 'linecache', '_abcoll', 'abc'])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if sys.version_info[:2] &amp;gt;= (2, 7):&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REQUIRED_MODULES.extend(['_weakrefset'])&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if sys.version_info[:2] &amp;lt;= (2, 3):&lt;/p&gt;
&lt;p&gt;REQUIRED_MODULES.extend(['sets', '&lt;strong&gt;future&lt;/strong&gt;'])&lt;/p&gt;
&lt;p&gt;if is_pypy:&lt;/p&gt;
&lt;p&gt;懒人可以点击&amp;amp;nbsp_place_holder;&lt;a href="http://upload-
log4d.qiniudn.com/2011/08/go-pylons.py"&gt;go-pylons.py&lt;/a&gt;&amp;amp;nbsp_place_holder;下载。&lt;/p&gt;</summary><category term="Pylons"></category></entry><entry><title>urllib2.urlopen的中文URL问题</title><link href="/2011/06/urllib2-urlopen-unicode/" rel="alternate"></link><updated>2011-06-14T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-06-14:2011/06/urllib2-urlopen-unicode/</id><summary type="html">&lt;p&gt;在url中使用中文其实是一个坏习惯，会带来一系列的转码问题， 我更喜欢英文译名或者id来标识某个uri。但是现实往往是残酷的，
特别是在我们调用别人服务时候，有时候被逼无奈使用中文URL。&lt;/p&gt;
&lt;p&gt;Python中unicode转码一向是让人头疼的问题。数次碰壁之后，我也摸出了一些门道，
研读完&lt;a href="http://ipie.blogbus.com/logs/19379694.html"&gt;Python字符串的encode与decode&lt;/a&gt;
之后，就自认为找到了万金油，谁知道这次又碰上这个老冤家。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;urlopen&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_opener.open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;391&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_open&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;_open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_call_chain&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1170&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;http_open&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;do_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httplib.HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1142&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;do_open&lt;/span&gt;
    &lt;span class="nx"&gt;h.request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req.get_method&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;req.get_selector&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;req.data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_send_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;951&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_send_request&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;endheaders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;908&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;endheaders&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_send_output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;780&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_send_output&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;759&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;send&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;sock.sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;sendall&lt;/span&gt;
&lt;span class="nx"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t encode characters in position 7-8: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次错误引发是在 &lt;code&gt;urlopen()&lt;/code&gt; 引起的，很有特色，开始使用 &lt;code&gt;url.encode('utf-8')&lt;/code&gt; 就可以解决了。 今天我做了一些测试。&lt;/p&gt;
&lt;h2&gt;1. ascii + unicode 测试&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;你&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;好&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;UnicodeDecodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t decode byte 0xe4 in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt; u&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;你&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; + u&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;好&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;u4f60u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt; u&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; + &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;你&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; + u&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;好&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="s1"&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;UnicodeDecodeError: &amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;ascii&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; codec can&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt; &lt;span class="nx"&gt;byte&lt;/span&gt; &lt;span class="mh"&gt;0xe4&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ordinal&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的测试说明ascii码和unicode码相连操作，结论是有中文记得带上u，就不会有问题。
Python默认解码器是ascii，无法解码unicode中的中文。&lt;/p&gt;
&lt;h2&gt;2. urllib2的测试&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;urllib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://baidu.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;urllib2.urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;addinfourl&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;153439532&lt;/span&gt; &lt;span class="nx"&gt;whose&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;socket._fileobject&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xb74e51ac&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://baidu.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;urllib2.urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;addinfourl&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;153440236&lt;/span&gt; &lt;span class="nx"&gt;whose&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;socket._fileobject&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x925912c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://baidu.com?w=测试&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;urllib2.urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;addinfourl&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;153482348&lt;/span&gt; &lt;span class="nx"&gt;whose&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;socket._fileobject&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x92593ac&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://baidu.com?w=测试&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;urllib2.urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;urlopen&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_opener.open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;391&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_open&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;_open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_call_chain&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1170&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;http_open&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;do_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httplib.HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/urllib2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1142&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;do_open&lt;/span&gt;
    &lt;span class="nx"&gt;h.request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req.get_method&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;req.get_selector&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;req.data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_send_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;951&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_send_request&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;endheaders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;908&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;endheaders&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;_send_output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;780&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_send_output&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.6/httplib.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;759&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;send&lt;/span&gt;
    &lt;span class="bp"&gt;self.&lt;/span&gt;&lt;span class="nx"&gt;sock.sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;sendall&lt;/span&gt;
&lt;span class="nx"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t encode characters in position 7-8: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个测试说明， &lt;code&gt;urllib2.urlopen()&lt;/code&gt; 可以接受ascii/unicode的英文，也可以接受ascii的中文，
但是一旦是unicode的中文url，就会报转码错误。&lt;/p&gt;
&lt;p&gt;so，请尽量英文url，非要用中文，请记得转码。&lt;/p&gt;</summary><category term=""></category></entry><entry><title>一个mako.vim</title><link href="/2011/06/mako-vim/" rel="alternate"></link><updated>2011-06-09T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-06-09:2011/06/mako-vim/</id><summary type="html">&lt;p&gt;给Vim找了一个Mako的语法高亮，发现着色居然有问题。查看更新记录后发现作者&lt;a href="http://lucumr.pocoo.or
g/"&gt;Armin Ronacher&lt;/a&gt;只更新到08年9月份。之后Mako更新了一些少许细节，我修改了一下mako.vim，放在这里供下载。&lt;/p&gt;
&lt;p&gt;其实我只改了57/58行，增加一个block语法。&lt;/p&gt;
&lt;p&gt;点击这里下载：[mako.vim&lt;/p&gt;
&lt;p&gt;](http://upload-log4d.qiniudn.com/2011/06/mako.vim)&lt;/p&gt;
&lt;p&gt;使用方法，放入vimfiles/syntax&lt;/p&gt;
&lt;p&gt;相关链接：&lt;/p&gt;
&lt;p&gt;原始mako.vim：&lt;a href="http://www.v
im.org/scripts/script.php?script_id=1858"&gt;http://www.vim.org/scripts/script.php?script_id=1858&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外一个mako.vim是缩进用的，放入vimfiles/syntax：&lt;a href="http://www.vim.org/scripts/script.php?script_id=2663"&gt;http://www.vim.org/scripts/script.php?scr
ipt_id=2663&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：Mako是一个Python下面的Template框架。&lt;/p&gt;
&lt;p&gt;pss：貌似服务器ip被认证了，讨厌~&lt;/p&gt;</summary><category term="Mako"></category><category term="Vim"></category></entry><entry><title>Pylons使用小记</title><link href="/2011/05/pylons/" rel="alternate"></link><updated>2011-05-16T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-05-16:2011/05/pylons/</id><summary type="html">&lt;p&gt;活着就是折腾，最近事情多的一塌糊涂，烦躁的很，导致log4d也荒废一个月了。今天趁着周五晚上，梳理一下最近学习的pylons知识。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2011/05/pylons.png" /&gt;&lt;/p&gt;
&lt;h2&gt;关于Pylons&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pylonsproject.org/"&gt;Pylons&lt;/a&gt;是一个用pythons写的web框架，优点是配置灵活，默认使用&lt;a href="http:
//www.makotemplates.org/"&gt;Mako&lt;/a&gt;作为Template，&lt;a href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;作为
ORM映射。使用BSD作为授权协议。&lt;/p&gt;
&lt;p&gt;托WSGI的福，python的web框架超多，甚至高手5分钟可以自己手写一个web框架，这种情况也导致了Python
web框架的纷杂。我这里选择Pylons（其实是被选择），并不是说Pylons一定最好，而是比较适合当前项目。更多的Python
web框架对比建议看这篇&lt;a href="http://feilong.me/2011/01/talk-about-python-web-
framework"&gt;浅谈Python web框架&lt;/a&gt;，另外，这个&lt;a href="http://www.bestwebframeworks.com/python/"&gt;Best Web-
Framework&lt;/a&gt;有直观的对比。&lt;/p&gt;
&lt;h2&gt;Pylons环境配置&lt;/h2&gt;
&lt;p&gt;因为开发机是刚到手的ThinkPad，没有冒险安装Linux，所以这里的安装环境是Win7 + Python 2.6 + MySQL5.1。&lt;/p&gt;
&lt;h3&gt;1、安装Pylons&lt;/h3&gt;
&lt;p&gt;Pylons似乎没有方便的easy_install，原因是由于Pylons在安装过程中，会生成一个目标环境。这个环境包括完整的Python环境，从而与系统自
带Python环境独立开来，防止第三方库的相互污染。Pylons官方提供了一个Python &lt;a href="http://www.pylonshq.com/download/1.0/go-pylons.py"&gt;go-
pylons.py&lt;/a&gt;脚本进行安装。&lt;/p&gt;
&lt;p&gt;通过在shell键入命令&lt;code&gt;python go-pylons.py myb_env&lt;/code&gt;安装，其中myb_env代表目标环境，会在当前目录下面生成一个myb_en
v文件夹，myb_env也可以使用绝对路径代替。在生成完之后请不要随意移动这个目录，因为环境里生成的Python脚本硬编码了绝对路径。&lt;/p&gt;
&lt;h3&gt;2、安装mysql-python驱动&lt;/h3&gt;
&lt;p&gt;我使用的是MySQL数据库，使用mysql-python驱动，windows下具体安装过程可以参见&lt;a href="http://fendou.org/2010/06/17
/install-python26-mysql-python-on-windows/"&gt;http://fendou.org/2010/06/17
/install-python26-mysql-python-on-windows/&lt;/a&gt; 需要修改一下源码和加入几个dll。&lt;/p&gt;
&lt;h3&gt;3、生成egg包，下载第三方依赖&lt;/h3&gt;
&lt;p&gt;在目标项目下面，执行&lt;code&gt;python setup.py develop&lt;/code&gt;，这将执行项目需要的三方依赖，设定依赖可以到&lt;code&gt;setup.py中install_req
uires&lt;/code&gt;进行配置。这个步骤用到了easy_install，所以请确保python/script下面有easy_install的可执行文件。windows
下安装easy_install可以参考这里&lt;a href="http://thinkhole.org/wp/2007/02/01/howto-install-
setuptools-in-windows/"&gt;http://thinkhole.org/wp/2007/02/01/howto-install-
setuptools-in-windows/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;呼啦啦一大串命令跑完之后，就ok了。&lt;/p&gt;
&lt;h3&gt;4、安装额外的三方依赖（可选）&lt;/h3&gt;
&lt;p&gt;根据实际情况操作吧，我这里使用了&lt;code&gt;easy_install python-memcached&lt;/code&gt;和&lt;code&gt;easy_install
pil&lt;/code&gt;，前者是memcache的python驱动，后者是python图形库。&lt;/p&gt;
&lt;h3&gt;5、初始化数据库&lt;/h3&gt;
&lt;p&gt;托SQLAlchemy的福，我们可以让它自动给我们创建映射表。首先确保在model下面配置好model类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;id = Column(Integer, primary_key=True)&lt;/p&gt;
&lt;p&gt;name = Column(String(100))&lt;/p&gt;
&lt;p&gt;email = Column(String(100))&lt;/p&gt;
&lt;p&gt;def &lt;strong&gt;init&lt;/strong&gt;(self, name='', email=''):&lt;/p&gt;
&lt;p&gt;self.name = name&lt;/p&gt;
&lt;p&gt;self.email = email&lt;/p&gt;
&lt;p&gt;然后在目标项目下面的development.ini中配置数据库连接字符串。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# SQLAlchemy database URL&lt;/span&gt;
&lt;span class="cp"&gt;#sqlalchemy.url = sqlite:&lt;/span&gt;&lt;span class="c1"&gt;///%(here)s/myb.db&lt;/span&gt;
&lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//test:test@localhost/myb?charset=utf8&amp;amp;use_unicode=0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后在shell中执行&lt;code&gt;paster setup-app development.ini&lt;/code&gt;，即可初始化好数据库结构。&lt;/p&gt;
&lt;p&gt;如果需要在初始化时候加入测试数据，可以在项目目录下的websetup.py中setup_app方法填充数据。&lt;/p&gt;
&lt;p&gt;如果paster运行错误，则使用&lt;code&gt;easy_install Paste&lt;/code&gt;安装一下paster。&lt;/p&gt;
&lt;h3&gt;6、运行app&lt;/h3&gt;
&lt;p&gt;在shell中运行&lt;code&gt;paster serve --reload development.ini&lt;/code&gt;即可启动网站，通过访问127.0.0.1:5000访问。&lt;/p&gt;
&lt;h2&gt;pylons中常用的paster命令([via](http://www.cnblogs.com/JustRun1983/archive/2009/12&lt;/h2&gt;
&lt;p&gt;/17/1626771.html))&lt;/p&gt;
&lt;p&gt;paster create -t pylons helloworld&lt;/p&gt;
&lt;p&gt;创建一个以pylons为模板的项目，项目名字是helloworld&lt;/p&gt;
&lt;p&gt;paster create --list-templates&lt;/p&gt;
&lt;p&gt;显示当前的pylons中有多少可以使用的模板&lt;/p&gt;
&lt;p&gt;paster serve --reaload development.ini&lt;/p&gt;
&lt;p&gt;最常用的命令了，启动调式程序的时候都会使用得到它。&lt;/p&gt;
&lt;p&gt;paster controller helloworld&lt;/p&gt;
&lt;p&gt;常见一个新的controller,名字是helloworld.会在项目目录controller中生成一个hellowolrd.py文件。这个是一个最基本的c
ontroller文件了，可以修改代码，完成我们的目的。&lt;/p&gt;
&lt;p&gt;paster setup-app development.ini&lt;/p&gt;
&lt;p&gt;安装数据库表。&lt;/p&gt;
&lt;p&gt;当配置好了model的__init__.py文件，执行这个命令按照要求生成数据库结构。&lt;/p&gt;
&lt;p&gt;数据库默认是sqlite的，如果要修改sqlite数据库路径或者更换成mysql数据库，需要修改development.ini文件。&lt;/p&gt;
&lt;h2&gt;更多的文档&lt;/h2&gt;
&lt;p&gt;[Pylons Reference Documentation&lt;/p&gt;
&lt;p&gt;](http://docs.pylonsproject.org/projects/pylons_framework/dev/index.html)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sqlalchemy.org/docs/index.html"&gt;SQLAlchemy 0.6.8 Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.makotemplates.org/docs/index.html"&gt;Mako 0.4.1 Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpaste.org/script/"&gt;Paste Script v1.7 documentation&lt;/a&gt;&lt;/p&gt;</summary><category term="Mako"></category><category term="Paster"></category><category term="Pylons"></category><category term="SQLAlchemy"></category></entry><entry><title>Eclipse中运行Pylons</title><link href="/2011/05/run-pylons-in-eclipse/" rel="alternate"></link><updated>2011-05-16T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2011-05-16:2011/05/run-pylons-in-eclipse/</id><summary type="html">&lt;p&gt;官方中pylons都是通过在shell中运行paster serve --reload
development.ini来运行应用实例。而整天在任务栏跑着一个黑乎乎的shell很碍眼，通过一下步骤可以在Eclipse中运行pylons。&lt;/p&gt;
&lt;p&gt;配置Run Configuration - Python Run如下。&lt;/p&gt;
&lt;p&gt;Main页签中Main Module指向paster-script.py，可以使用绝对路径。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2011/05/eclipse-main.png" /&gt;&lt;/p&gt;
&lt;p&gt;配置Arguments页签的参数，添加serve --reload development.ini，后面的ini配置文件可以使用绝对路径。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2011/05/eclipse-arguments.png" /&gt;&lt;/p&gt;
&lt;p&gt;勾选Common下的Allocate Console来进行paster调试信息输出。&lt;/p&gt;
&lt;p&gt;在Windows - Preference - Pydev - Interpreter - Python中的PYTHONPATH加入pylons目标环境
，报过site-packages目录和site-packages目录下面的egg文件（理解为jar包，称之为蟒蛇蛋）。&lt;/p&gt;
&lt;p&gt;不出意外的话，就可以通过Run跑起整个应用了。&lt;/p&gt;
&lt;p&gt;很可惜的是，这样做还是不能对应用进行Debug，pylons的debug依然依赖于pylons的"交互调试页面"。&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://stackoverflow.com/questions/147650/debug-pylons-application-
through-eclipse"&gt;http://stackoverflow.com/questions/147650/debug-pylons-application-through-
eclipse&lt;/a&gt;&lt;/p&gt;</summary><category term="Eclipse"></category><category term="Pylons"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Log4D</title><link>http://blog.log4d.com/</link><description></description><atom:link href="http://blog.log4d.com/feeds/alswl.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 04 Apr 2015 00:39:41 +0800</lastBuildDate><item><title>2015 沪港 Hackathon</title><link>http://blog.log4d.com/2015/04/2015-hk-sh-hackathon/</link><description>&lt;p&gt;我想参加黑客马拉松很久了，去年就观战过 2014 沪港黑客马拉松。
但苦于需要连续两天时间，一直没有下定决心参加。&lt;/p&gt;
&lt;p&gt;上周末本来安排了两天的团队会议，后来临时取消，
给了我充足的时间。于是我在 27 号周五下午，报名参加了 27 号晚上开始的 2015 沪港 Hackathon。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5D3_0001.jpg" src="http://upload-log4d.qiniudn.com/upload_dropbox/201504/5D3_0001.jpg" /&gt;&lt;/p&gt;


&lt;p&gt;独自作战的我，在现场寻觅了几个小伙伴组了一个队伍，其中有 &lt;a href="http://homeway.me/2015/03/30/play-music-through-senses/"&gt;小草&lt;/a&gt; / tevin / 女王 / Doris / n1k0。
小草负责树莓派服务端，tevin 负责传感器取数据，我……负责前端游戏逻辑，哈哈哈，我已经三年没有写前端代码了，为了团队职责分工，只能赶鸭子上架了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_4467.JPG" src="http://upload-log4d.qiniudn.com/upload_dropbox/201504/IMG_4467.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;经过现场的头脑风暴，我们最后选定了基于树莓派的游戏：
通过感应玩家的手掌移动距离来玩类似节奏大师的音乐游戏。&lt;/p&gt;
&lt;p&gt;具体的游戏原理，可以在 &lt;a href="http://homeway.me/2015/03/30/play-music-through-senses/"&gt;基于树莓派的体感音乐游戏&lt;/a&gt; 看到，
源码也在 &lt;a href="https://github.com/2015-hackathon/hackathon"&gt;Github&lt;/a&gt; 这里。&lt;/p&gt;
&lt;p&gt;最关键是，我们这支临时凑齐的战队，经过两天一夜的奋战，拿了一等奖（第二名），拥有了去香港参加国际赛资格和一堆乱七八糟的云服务器现金券、折扣券！！！撒花~~撒花~~&lt;/p&gt;
&lt;p&gt;&lt;img alt="5D3_2087.jpg" src="http://upload-log4d.qiniudn.com/upload_dropbox/201504/5D3_2087.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;第一次参加 Hackathon，就能获得这个奖，觉得自己蛮幸运，
和队友合作愉快，和队友通宵到三点多调整音乐命中算法，然后在早上 6 点钟被冻醒。五音不全的我花了几个小时将超级玛丽五线谱转化为发音库能够理解的符号描述。&lt;/p&gt;
&lt;p&gt;虽然最后由于时间原因不能和队友去香港参加比赛，但是仍然祝愿他们在香港能够继续加油。各位队友，Have fun。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2015/04/2015-hk-sh-hackathon/"&gt;http://blog.log4d.com/2015/04/2015-hk-sh-hackathon/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 04 Apr 2015 00:39:41 +0800</pubDate><guid>tag:blog.log4d.com,2015-04-04:2015/04/2015-hk-sh-hackathon/</guid><category>技术达人</category><category>上海</category></item><item><title>读「遇见未知的自己」</title><link>http://blog.log4d.com/2015/03/real-self/</link><description>&lt;p&gt;「遇到未知的自己」这本书讲的是如何来认识自己，理解自己的情绪，和自己内心沟通。&lt;/p&gt;
&lt;p&gt;&lt;img alt="遇到未知的自己" src="http://img3.douban.com/lpic/s3403254.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/2340100/"&gt;豆瓣链接&lt;/a&gt; /
&lt;a href="http://www.amazon.cn/%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1-%E5%BC%A0%E5%BE%B7%E8%8A%AC/dp/B009WNRMM0/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1426319187&amp;amp;sr=1-1&amp;amp;keywords=%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1"&gt;Kindle 版本购买链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面我写的倒不是什么读后感，而是我自己去解决自己焦虑和压力的一个探寻过程，希望对你有帮助。&lt;/p&gt;
&lt;h2&gt;不完美&lt;/h2&gt;
&lt;p&gt;最近一年来，我生活和工作状态持续处于亚健康状态。表现出来的状况是：工作上对产出的成绩不满意，
对自己不够自信，追寻的目标（创业）变得模糊和不可量化；生活受到影响，开始陷入到哪里去的困惑。
很久没有兴奋的迎着早晨第一缕阳光蹦着下楼梯，人变得焦虑和烦躁。&lt;/p&gt;
&lt;p&gt;这种压抑，让我回忆起小时候周日晚上动画片的结尾曲，昏黄、萧瑟，似乎一切都走向终结。
哈，好在我不是那么消极的人，我热爱生活，期望创造价值，渴望别人的认同，
我不愿意自己长期陷入这种低潮。&lt;/p&gt;
&lt;p&gt;我做了一些尝试和挣扎：给自己添加束缚（变成一个“工作日素食者”），计划自己工作和生活（践行 GTD），
意识到自己情绪抖动并尝试控制自己的情绪。
针对能力上面不足，我也去阅读了彼得德鲁克的系列丛书，柯维的「高效能人士的七个习惯」。
这些措施的确帮助了我，我觉得自己比以前更强大。
但是始终没有彻底解决我的问题，无法治愈我内心的恐惧和压抑。&lt;/p&gt;
&lt;p&gt;我意识到：我在焦虑，继而恐惧、自卑，害怕面对未知，更害怕面对不完美的自己。&lt;/p&gt;
&lt;h2&gt;求解&lt;/h2&gt;
&lt;p&gt;周围能提供帮助的人不多，好在有互联网。第一个药丸在知乎，我直接搜索了关键词「自我」和「自卑」。
知乎关于认识自己有几个相当不错的问答，从中得到的观点有下列几个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;真正的进步不是那么焦虑的自我怀疑，而是带着自我接纳体会进步的喜悦 &lt;a href="http://www.zhihu.com/question/22063688/answer/20499104"&gt;via&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们的一生就不断地在优越感和自卑之间切换 &lt;a href="http://zhi.hu/YTzH"&gt;via&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中有若干个回答有提到「遇到未知的自己」，我也对这本书略有耳闻，于是从亚马逊上购买了，
没想到仅仅花了花了几个小时就一口气读完，很久没有这么舒畅的读完一本书了。&lt;/p&gt;
&lt;h2&gt;身体、情绪、思想&lt;/h2&gt;
&lt;p&gt;从书中收获最大的一点，就是和自己的内心进行沟通：通过运动来提高自己和身体的合一；
通过臣服来客观认同理解自己的情绪；通过冥想来和自己的潜意识沟通，了解自己的内心，
增强对自己和外部的觉察能力。&lt;/p&gt;
&lt;p&gt;认识自己的一个重要途径是回溯，重新和过去的自己沟通。这种感觉很奇妙，
似乎在看另外一个生命。他慢慢长大，人生起伏，自信自卑，受到家庭的教育，
被师长激励，选择新的挑战，遇到新的困难和低谷，他的优柔寡断，他的努力和堕落，
他受到的爱护和痛苦。&lt;/p&gt;
&lt;p&gt;到哪里去？这个问题我依然没有找到很好的答案，虽然有「爱、喜悦、和平」这个大一的概念，
但实在不够落地，就像「内圣外王」一样，太过于笼统。&lt;/p&gt;
&lt;p&gt;即便到哪里去没有一个明确地答案，但是当和自己的内心的达成一致，能够坦然面对自己的不完美，
未来的不确定之后，不管往哪里走，都不是在原地转动。&lt;/p&gt;
&lt;p&gt;现在我学会了运动，每周两次 5km 跑步，跑步时候感觉自己释放恐惧，追逐目标。
还在学会如何臣服自己的情绪，面对未知做的决策即便会不安和恐惧，也不至于影响自己太久。&lt;/p&gt;
&lt;h2&gt;糟粕&lt;/h2&gt;
&lt;p&gt;这本书里面有几段鸡汤文，什么「水知道答案」，女主回忆自己诞生过程而泪流满面，
显得很鬼扯。作为工程师的我，对这些内容表示质疑。&lt;/p&gt;
&lt;h2&gt;End&lt;/h2&gt;
&lt;p&gt;这本书不完美，但是它在一个合适的时间点给了我启发和帮助。我很感谢它，如果你有和我类似的困惑，建议去读一下。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2015/03/real-self/"&gt;http://blog.log4d.com/2015/03/real-self/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 14 Mar 2015 14:38:39 +0800</pubDate><guid>tag:blog.log4d.com,2015-03-14:2015/03/real-self/</guid><category>读书笔记</category></item><item><title>《项目管理修炼之道》笔记</title><link>http://blog.log4d.com/2014/08/manage-it/</link><description>&lt;p&gt;&lt;img alt="项目管理修炼之道" src="http://img3.douban.com/lpic/s6089513.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;随着团队规模的变大，成员之间合作的模式逐渐由单打独斗变成协作开发。
这时候会遇到很多意想不到的问题，项目管理的重要性也就显现出来了。
&lt;a href="http://book.douban.com/subject/4058336/"&gt;项目管理修炼之道&lt;/a&gt;
是一本讲技术类项目管理方法和实践的书。
从业者可以从这本书获得了有益的指导。
我在 Kindle 上面翻了好几遍，感觉受益匪浅，就把读书笔记拿出来供大家参考。&lt;/p&gt;
&lt;h2&gt;1、内容&lt;/h2&gt;
&lt;p&gt;核心内容是项目管理的生命周期和每个阶段的交付物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目章程&lt;/li&gt;
&lt;li&gt;日程规划&lt;/li&gt;
&lt;li&gt;开发（控制节奏）&lt;/li&gt;
&lt;li&gt;结束项目，项目回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何和投资者沟通&lt;/li&gt;
&lt;li&gt;管理会议&lt;/li&gt;
&lt;li&gt;控制项目节奏&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;2、关键字&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;项目定义：一个独特的任务或是系统化的流程，其目的是创建新的产品或服务，
产品和服务交付完成标志着项目的结束。项目都有风险，并且受制于有限的资源。&lt;/li&gt;
&lt;li&gt;关键（章程）&lt;ul&gt;
&lt;li&gt;驱动因素：功能集合、发布时间、缺陷等级，只能有一个&lt;/li&gt;
&lt;li&gt;约束：环境、流程、人力资源、预算等，决定了规模&lt;/li&gt;
&lt;li&gt;浮动因素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;规划：带有项目发布条件的项目计划&lt;ul&gt;
&lt;li&gt;日程安排：对工作项目的有序描述&lt;/li&gt;
&lt;li&gt;发布条件：S.M.A.R.T.，需要一起协商&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仪表盘&lt;ul&gt;
&lt;li&gt;定性或者定量的方式，将结果公布出来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保持项目节奏的方法&lt;ul&gt;
&lt;li&gt;快速开发&lt;ul&gt;
&lt;li&gt;持续集成&lt;/li&gt;
&lt;li&gt;自动冒烟测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能拆分和日程排期&lt;ul&gt;
&lt;li&gt;按功能实现，而非架构&lt;/li&gt;
&lt;li&gt;优先实现高价值功能&lt;/li&gt;
&lt;li&gt;通过用户故事、角色和场景来定义需求&lt;/li&gt;
&lt;li&gt;分离需求和 GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;质量控制&lt;ul&gt;
&lt;li&gt;复查：Code Review，结对编程&lt;/li&gt;
&lt;li&gt;重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目成员的角色构成&lt;ul&gt;
&lt;li&gt;项目经理&lt;/li&gt;
&lt;li&gt;架构师&lt;/li&gt;
&lt;li&gt;开发人员&lt;/li&gt;
&lt;li&gt;测试人员&lt;/li&gt;
&lt;li&gt;业务分析师&lt;/li&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3、我的问题和部分解答&lt;/h2&gt;
&lt;p&gt;Q：项目经理的职责是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;监控项目进度，牢记里程碑验收条件。保障项目按需求交付。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q：如何成为优秀的项目经理？&lt;/p&gt;
&lt;p&gt;项目经理需要下面这些技能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;倾听&lt;/li&gt;
&lt;li&gt;谈判技巧&lt;/li&gt;
&lt;li&gt;协作和表达技能&lt;/li&gt;
&lt;li&gt;目标导向&lt;/li&gt;
&lt;li&gt;真诚，尊重&lt;/li&gt;
&lt;li&gt;信息不足下进行决策能力&lt;/li&gt;
&lt;li&gt;解决问题的技巧&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现问题能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理解产品的生命周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;认识自己技术的不足&lt;/li&gt;
&lt;li&gt;能够安排日程&lt;/li&gt;
&lt;li&gt;能够估算任务，并指导其他人完成任务估算&lt;/li&gt;
&lt;li&gt;指导如何管理风险，评估项目状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q：用何种生命周期组织项目？&lt;/p&gt;
&lt;p&gt;互联网项目看中发布时间和功能集合，适合用迭代式的生命周期。&lt;/p&gt;
&lt;p&gt;Q：如何安排项目日程？&lt;/p&gt;
&lt;p&gt;细化日程，让成员自省讨论，&lt;strong&gt;基于可交付物&lt;/strong&gt; 的日程规划。
注意，这里的日程和具体的时间安排没有关系，而是处理任务之间的依赖关系。&lt;/p&gt;
&lt;p&gt;Q：如何估算日程中每个任务&lt;/p&gt;
&lt;p&gt;书中给了一个方法：使用日期范围，但问题是，在小团队工作时候，
可能整个项目周期也就 1 个月，如果按日期范围估计，就比较难评估了。&lt;/p&gt;
&lt;p&gt;还有一个方法是使用「1、2、3、5、8、13、21、34、55、89」这样的方式来拆解估算任务。&lt;/p&gt;
&lt;p&gt;每个任务可以拆解成小石子（不超过 2 天的任务）。&lt;/p&gt;
&lt;p&gt;还有一个 tip 是使用波浪式规划，即不在一开始时候规划全部。在进行的过程中调整日程。
以 2 周或者 4 周的长度规划，太长了就更容易出错，对预测能力要求太高。&lt;/p&gt;
&lt;p&gt;项目经理目标是&lt;strong&gt;按驱动因素完成既定需求，而不是给一个漂亮的甘特图&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;关于估算日程的三条忠告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;绝对不要提供确定的项目结束日期&lt;/li&gt;
&lt;li&gt;任务越小，估算起来越容易&lt;/li&gt;
&lt;li&gt;寻求估算的准确性，而不是精确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q：前期延迟了，后期能追赶么？&lt;/p&gt;
&lt;p&gt;不能，强行安排的话，是一个日程安排游戏。但是从 Deadline 意识来说，需要对成员达成 Deadline 意识。&lt;/p&gt;
&lt;p&gt;Q：如何创建优秀团队？&lt;/p&gt;
&lt;p&gt;招对的人，激励个人，形成团队凝聚力。
团队发展分成 5 个时期：组建、激荡、规范、表现、终止。&lt;/p&gt;
&lt;p&gt;Q：如何估算日程安排里面的时间？&lt;/p&gt;
&lt;p&gt;参见上面所说「1、2、3、5、8、13」和小石子。&lt;/p&gt;
&lt;p&gt;Q：如何对项目的模块进行拆分？&lt;/p&gt;
&lt;p&gt;书中没有过多提及，我从自己经验得出的答案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原则：拆解成耦合度低，可以并发进行的子任务，互不依赖&lt;/li&gt;
&lt;li&gt;每个拆分出来的子任务，是可以被描述，并且其产出是可量化的&lt;/li&gt;
&lt;li&gt;如果子任务之间，有相互依赖点，需要在早期就约定好接口和交付时间点&lt;/li&gt;
&lt;li&gt;如果一个模块 A 很大（比如超过 4 周开发时间），
那应该团队作战以这个模块为开发目标，将模块 A 拆成多个子任务，然后并发进行。
而不是模块 A、模块 B 并发进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：如何保持项目节奏，避免发生延期？&lt;/p&gt;
&lt;p&gt;参见上面的「关键词」中「项目节奏」部分。&lt;/p&gt;
&lt;p&gt;Q：如何管理工程（多个项目），并且在里面进行协调？&lt;/p&gt;
&lt;p&gt;多个项目，但是&lt;strong&gt;使用一个发布计划&lt;/strong&gt;（类比前端、后台、移动端）。
并一起制定好各个项目的计划。如果基于敏捷开发，问题可以被简化，
因为每条线都是随时可以发布的状态。如果不行，那就组织里程碑的发布计划。&lt;/p&gt;
&lt;p&gt;需要管理各个子项目的项目经理，并且创建统一的日程表。&lt;/p&gt;
&lt;p&gt;Q：团队里面有执行迟缓，不听从决策的人员，怎么办？&lt;/p&gt;
&lt;p&gt;这个问题其实是管理问题，而不是项目管理问题。
书中并没有合适答案，我自身感想是这几方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弄清楚为什么不听从决策，需要明确项目的发布目标&lt;/li&gt;
&lt;li&gt;从精神、物质上面进行激励&lt;/li&gt;
&lt;li&gt;直白的进行沟通，向对方请求帮助&lt;/li&gt;
&lt;li&gt;从自身寻找问题，提高自身沟通能力和专业技能能力&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/08/manage-it/"&gt;http://blog.log4d.com/2014/08/manage-it/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 31 Aug 2014 20:12:06 +0800</pubDate><guid>tag:blog.log4d.com,2014-08-31:2014/08/manage-it/</guid><category>项目管理</category></item><item><title>加班那点事儿</title><link>http://blog.log4d.com/2014/08/work-overtime/</link><description>&lt;p&gt;前段时间，一个好基友告诉我，他换了份工作，去了一家用户数据表现堪称吓人的创业公司去了。其中有一个细节引起了我的注意：他们在实行 996 的上班制度。即 9 点钟上班，9 点钟下班，一周工作 6 天。&lt;/p&gt;
&lt;p&gt;同样实行这种制度的还有阿里的来往团队。当年（其实就是去年）在抢占移动端 IM 入口时候，马云都使用了红包政策，来往的工程师在高压之下，也实行 996 了制度。
我问过阿里的朋友，他们表示，整体加班情况的确比较多。我追问了一下加班效率，证实了我的一个猜想，有些个人是晚上加班没事干，尤其有些测试工程师，白天没活干，晚上活多，还经常等到 9 点之后才有事情。这个现象也许不是普遍的，但的确存在。&lt;/p&gt;
&lt;p&gt;我自己是反感加班的，曾经面到一个开发工程师，表示工作三年来，加班时常为 0h。当时有点被这种表述惊讶了一下，然后我认为他是在标榜自己工作效率高。
这种表述也反映出他作为工程师，认为加班是一个负面的表现。
的确，一个团队再如何厉害，也不可能标榜他们是靠加班来获得核心竞争力的。知识劳动者又依靠劳动密集来获得产出。
雷布斯说过「你不要用战术上的勤奋掩盖战略上的懒惰」，在我看来，靠加班提高产出就属于战术上的勤奋。&lt;/p&gt;
&lt;p&gt;从个人工作效率上来看，工作时长和产出并不是线性的。连续工作十几个小时，甚至可能将平均效率降低，有科学实验表明，连续注意力集中在 1.5h 为好，过长时间会造成注意力降低。
另外，过多工作时间把人累的和土狗一样，长期以往，工作会挤占了太多生活空间，生活本身也会变得紧张压抑，搞不好又一个程序猿过劳死。要完成既定目标有很多种办法，而增长时间工作时间一定不是最有效的那种。&lt;/p&gt;
&lt;p&gt;我也特别讨厌所谓工作到凌晨三点的做法（除非特殊项目需要），我理解的加班是挤占掉个人娱乐、学习时间，投入到具体目标的实现上面去。而不是挤占休息时间，即便加班，也需要保持充分的休息，否则加个屁班，浑浑噩噩的，一点产出都没有。&lt;/p&gt;
&lt;p&gt;我所在的团队并不提倡加班文化，虽然老板自己工作到很晚，但是从来没有在制度或任务安排上要求某某某加班。从个人生活和健康工作角度上，我觉得她还是挺关爱下属的。&lt;/p&gt;
&lt;p&gt;但是（此处话锋一转），互联网变化速度太快，资本市场的青睐也是有固定的时间周期，特定项目的开发需要阶段性冲刺。毕竟机会对每个团队来说，都是转瞬即逝，有时候要抢占位置，或者短期内冲刺出成绩，比如说蘑菇街 3 个月上线商品购物平台，又或者淘宝双 11 活动。都需要在固定时间点之前完成必须做到的目标。这时候，战略的调整的同时，通过投入时间的增大也可以降低风险，争取更多的机会。
从团队需求角度来看，这种情况下面的加班不可避免。&lt;/p&gt;
&lt;p&gt;还有一种被迫的情况是在系统不稳定和特殊意外事件发生时候，比如线上出现问题，需要有人立刻去解决。
说到这个话题，我就会想起我的同事小云姐（对他甚是怀念），系统遇到问题时候都会第一个冲上去解决问题，不但当场处理掉问题，在事后对问题的 Review 和处理也是推动力极强，真是不可多得的好员工。
一般来说，这类突发被迫的情况不应该是常态，作为后台工程师，需要在平时就做好预案，处理各类突发情况，做好高可用、容错、故障转移、故障降级等预备方案。而不是出了问题大家都忙起来。但突发的情况毕竟不能完全避免。当年世界格局稍微风吹草动，Twitter 就可能搁浅大鲸鱼，这时候，就也可能需要通过加班进行解决。&lt;/p&gt;
&lt;p&gt;加班到底该不该，问题的本质，应该是这个加班有没有意义，是否对团队有贡献。
从目标导向的角度来看，没有设定产出或者无贡献的加班。如果老板哪天说，「不管你干什么，都必须留下来加班」，那就是该跟他说拜拜的时候了。&lt;/p&gt;
&lt;p&gt;从员工自身的角度来看这个事情，需要意识到作为团队的成员，不应该固守自己的一亩三分田，而应该考虑在团队需要的地方提高贡献度。Facebook 的工程师的高自由度，亚马逊内部称之为 SDE（Someone Do Everythind）的文化，都说明在给予工程师自由平等透明时候，需要工程师自身意识到目标设立和全局思考的重要性。&lt;/p&gt;
&lt;p&gt;加班的洋文叫做 work overtime，即正常的 work time 之外的工作时间。那可以思考一下，一个知识工作者，在一个 24h 需要对外服务的行业里，严格定义 work time，到底是对团队有益的，还是对团队不利？&lt;/p&gt;
&lt;p&gt;说完这段话，我是有点惭愧的，似乎站在了周扒皮或资本家的角度来看待加班这点事。站在雇员的角度看，虽然短期痛苦一些，但是提高了对团队的贡献度，提高团队竞争力，让组织可以活得更健康，对双方的成长都是有利的。&lt;/p&gt;
&lt;p&gt;我反对无意义的加班，加班是为了不加班，加班是为了目标冲刺。&lt;/p&gt;
&lt;p&gt;嗯，文章开头中提到的好基友，在朋友圈表示，最近鸡血打的有点满，做产品设计如何开心云云，这种状态就是非常棒的状态。在竞争激烈的互联网行业，如何理性激发团队战斗力，是一件难做但是必须做好的事情。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/08/work-overtime/"&gt;http://blog.log4d.com/2014/08/work-overtime/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 30 Aug 2014 17:39:19 +0800</pubDate><guid>tag:blog.log4d.com,2014-08-30:2014/08/work-overtime/</guid><category>程序人生</category></item><item><title>痛快活</title><link>http://blog.log4d.com/2014/08/life-with-pain/</link><description>&lt;p&gt;上个月回家，在亲戚家里和侄子聊天，他刚从大学毕业，在家人的帮助下面找了算是对口的工作，对工作之后的状态有一些茫然，看不到前途和未来，我问了一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你平时是怎么面对困难和挑战的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;犹豫了一会儿，他告诉我：「大部分时间都是逃避掉困难」。&lt;/p&gt;
&lt;p&gt;这个问题反而让我自己开始思考：面对困难的时候，为什么更倾向于逃避，而不是挑战和面对？&lt;/p&gt;
&lt;h2&gt;困难和逃避&lt;/h2&gt;
&lt;p&gt;想要一点点对这个问题抽丝剥茧，要做的第一步就是，来定义「困难」和「挑战」。这两个词都意味着，面临的事情可能超出处理者当前的能力范畴。比如让一个游泳初学者去横渡长江，让一个厨师学徒工去做满汉全席，让一个幼儿去思索人生的意义，或者让一个工程师去管理一个技术团队。&lt;/p&gt;
&lt;p&gt;逃避可以让当事人避免处理不擅长的事情，不会面临各种碰壁，不会带来灾难，不会给自己带来痛苦，不会在结果不优秀时候受到嘲笑和讥讽。
另外，从技术和实施的角度看，面临不了解或不擅长的领域和事情，也会有无从下手的困苦。&lt;/p&gt;
&lt;p&gt;「好人不长寿，王八活千年」这句谚语也标榜着这种逃避态度。枪打出头鸟，所以只要保持自己低调和保守，不接受挑战，即可以安安稳稳了么？&lt;/p&gt;
&lt;h2&gt;野心和痛苦&lt;/h2&gt;
&lt;p&gt;我发现，在井陉任务管理时候，给予的任务往往会高于执行者的当前能力一点点。原因有二。&lt;/p&gt;
&lt;p&gt;第一，个人所在的组织在发展，面临的挑战一定高于当前的组织能力上限，而这个挑战就会分摊到每个人身上。&lt;/p&gt;
&lt;p&gt;如果所在的团队在挑战更高的目标，那在里面的员工如何能置身事外？除非加入的团队是没有进取的意愿，或者是铁饭碗（垄断企业）。&lt;/p&gt;
&lt;p&gt;第二，个人也需要发展，团队管理者需要考虑到每个成员自身的发展，而不能仅仅给予在当前能力范围的工作。从短期效率上来看，当然是熟悉和在能力范围内的工作可以更快速稳定完成，风险比较小。但是从长期来看，团队的新人能力无法得到提升。整个团队的发展受到限制。&lt;/p&gt;
&lt;p&gt;所以，只要所处的组织是在发展的，每个人都会有比当前能力要求高的挑战。不接受的人就会被其他成长更快的人超越，甚至是取代。上学时候，我们就知道：「学习如逆水行舟，不进则退」。不是自己不进步，而是别人跑的太快。学校如此，社会更是如此。安于现状，不思考变化和成长的人，会被淘汰的越来越快。&lt;/p&gt;
&lt;p&gt;除了外部的要求，从当事人内心自发产生的欲望是更有价值的。Nothing is impossible for a willing heart，这就是我们所说的驱动力，驱动力的强弱和方向，直接决定一个人事业生涯的发展高度和速度。&lt;/p&gt;
&lt;p&gt;我个人是不喜欢「逃离北上广」这种论调的（自然环境的因素另当别论）。在压力和挑战下面，更应当激发自身的潜力、梦想和野心。即便是逃离到二线、三线城市，仅仅是将这种个体之前进步速率的差异值降低而已。如果思想是保守和逃避的，到哪里都是一样的。&lt;/p&gt;
&lt;p&gt;活着就需要面对挑战，挑战是痛苦的，成长又是快乐的。所以，痛快活。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/08/life-with-pain/"&gt;http://blog.log4d.com/2014/08/life-with-pain/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Mon, 11 Aug 2014 21:07:29 +0800</pubDate><guid>tag:blog.log4d.com,2014-08-11:2014/08/life-with-pain/</guid><category>感悟</category></item><item><title>在 Raspberry Pi 上使用 AirPlay</title><link>http://blog.log4d.com/2014/07/raspberrypi-airplay/</link><description>&lt;p&gt;早在去年时候，我就发现有个叫做 &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; 的玩意，
已经忘了是从那里得知这个东西。这个卡片大小的电路板是可以运行
Debian 的主机，提供了一个发挥自己想象的平台。13 年 &lt;a href="http://geekon.geekstack.org/"&gt;南京极客行动&lt;/a&gt;
时候，Michael 好像还拿了一个板子参加比赛。&lt;/p&gt;
&lt;p&gt;&lt;img alt="RaspberryPi.jpg" src="http://upload-log4d.qiniudn.com/2014/07/RaspberryPi.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我对这个东西充满了兴趣，仅售 $39 的主机，小巧的机身，
可以充分发挥自己的想象力：离线下载，动作片播放器，家庭分享中心，
给侄子学习编程~想到这些可以发挥自己的创造力，
就迫不及待的要去采购并去尝试。&lt;/p&gt;
&lt;p&gt;不过我还是理智的压抑住自己的情感，手头老是有更重要的事情要去做，实在不能再给自己多找一个精力分散的方向。
于是，我这么一压抑，就压抑了一年。&lt;/p&gt;
&lt;p&gt;后来在 InnoSpae 看到 &lt;a href="http://segmentfault.com/"&gt;SegmentFault&lt;/a&gt; 的姜尚用 &lt;a href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt;
写了一个播放超级玛丽音乐的程序，又让我重新燃烧起使用硬件创造一些小玩意的热情。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4f42dcf03f067e12fe5c156e2af1373b.image.538x354.jpg" src="http://upload-log4d.qiniudn.com/2014/07/4f42dcf03f067e12fe5c156e2af1373b.image.538x354.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;碰巧的是，现在有一个非常适合的场景需要这样的工具：前段时间，团队在优化发布流程，也就是将工程师写好的代码发布到正式环境的过程。其中有一个重要环节是需要需求方对提出的功能进行验证。而需求方往往验证的不及时，就需要一个方法来通知需求方。使用 QQ 群效果不好，喊又太累，就想了一个歪主意，在办公室播放音乐。&lt;/p&gt;
&lt;p&gt;简而言之，就是用 Raspberry Pi 播放音乐。几个方案确定之后，发现用 AirPlay 的方式最适合我们：每个人都有控制内容的权利；方案使用方便，一个苹果手机即可；内容来源多，豆瓣、网易、虾米都可以播放。&lt;/p&gt;
&lt;p&gt;分分钟搞定这个方案，一个需要 5 个步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从淘宝买 RaspBerry Pi、无线网卡、SD 卡。&lt;/li&gt;
&lt;li&gt;从 &lt;a href="http://www.raspberrypi.org/downloads/"&gt;Raspberry Pi Download&lt;/a&gt; 搞一个 Raspbian，然后 &lt;code&gt;dd&lt;/code&gt; 到 SD 卡，看官方文档操作，很详细（Mac 需要考虑使用高速写入 &lt;code&gt;/dev/rdisk1&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;SSH 登录到 &lt;code&gt;pi@192.168.1.x&lt;/code&gt;，&lt;code&gt;git clone https://github.com/juhovh/shairplay.git&lt;/code&gt; 然后阅读 &lt;a href="https://github.com/juhovh/shairplay"&gt;Shairplay&lt;/a&gt; 文档安装&lt;/li&gt;
&lt;li&gt;运行 Shairplay &lt;code&gt;shairplay -a 3DAir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;同一个&lt;/strong&gt; 局域网连着的手机播放音乐，从底向上拉 iPhone 菜单，就会发现多了一个 AirPlay 标记「3DAir」，点击即可播放。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2014-07-15 19.43.16.jpg" src="http://upload-log4d.qiniudn.com/2014/07/2014-07-15%2019.43.16.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2014-07-16 19.25.33.png" src="http://upload-log4d.qiniudn.com/2014/07/2014-07-16%2019.25.33.png" /&gt;&lt;/p&gt;
&lt;p&gt;哈哈，以后办公室开 Party，周末关怀，生日会什么的，再不不用担心放音乐问题了~&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/07/raspberrypi-airplay/"&gt;http://blog.log4d.com/2014/07/raspberrypi-airplay/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 23 Jul 2014 23:19:50 +0800</pubDate><guid>tag:blog.log4d.com,2014-07-23:2014/07/raspberrypi-airplay/</guid><category>硬件</category><category>RaspberryPi</category></item><item><title>读《如何高效学习》</title><link>http://blog.log4d.com/2014/04/lean-more-study-less/</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/25783654/"&gt;Learn More Study Less（如何高效学习）&lt;/a&gt;
讲的是作者斯科特·扬如何快速学习的方法和技巧。&lt;/p&gt;
&lt;p&gt;我在 Kindle 上面阅读了这本书，并用书中的方法学习这本书，顺便做了一些笔记。&lt;/p&gt;


&lt;h2&gt;A. 目的&lt;/h2&gt;
&lt;p&gt;学习「整体性学习」方法，从而快速学习并且将学到的知识更高效合理的利用起来。&lt;/p&gt;
&lt;p&gt;（所谓聪明，就是指学得更快，而且信息组织非常适合完成自己的目标）。&lt;/p&gt;
&lt;h2&gt;B. 整体性学习的定义&lt;/h2&gt;
&lt;p&gt;知识并非孤立，学习任何知识（概念、定义、公式、问题、观念、理论等）都需要联系。&lt;/p&gt;
&lt;h2&gt;C. 整体性学习的策略&lt;/h2&gt;
&lt;h3&gt;1. 关键元素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立结构（某个领域内，紧密联系的知识），让其中的知识尽可能多的联系。&lt;ul&gt;
&lt;li&gt;通用结构：感知结构（视觉、嗅觉、听觉、味觉、触觉）&lt;/li&gt;
&lt;li&gt;关系结构（群体关系等）&lt;/li&gt;
&lt;li&gt;基础数学结构&lt;/li&gt;
&lt;li&gt;时间结构（@alswl 自己横向扩展想到的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用模型（类似于知识框架和体系以及其他存储方式）&lt;/li&gt;
&lt;li&gt;高速公路（在不同的结构之间进行联系，激发创造力）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 5 个学习的步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取&lt;ul&gt;
&lt;li&gt;关键：简化、容量、速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理解&lt;/li&gt;
&lt;li&gt;拓展&lt;ul&gt;
&lt;li&gt;深度拓展：知识的深度，虽花费时间但有效&lt;/li&gt;
&lt;li&gt;横向拓展：知识的周边，有相关性的拓展，需要借助模型&lt;/li&gt;
&lt;li&gt;纵向拓展：跨结构的知识，比喻和内在化是一种手段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;纠错&lt;/li&gt;
&lt;li&gt;应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（@alswl 可以想到软件开发中的需求获取、需求分析、需求挖掘、测试、
开发这些对应的另外一个软件开发结构中的联系）&lt;/p&gt;
&lt;h3&gt;3. 5 种信息的类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随意信息：死记硬背，联想法、挂钩法、压缩法&lt;/li&gt;
&lt;li&gt;观点信息：存在争议的信息，需要检索信息&lt;/li&gt;
&lt;li&gt;过程信息：多操作就能掌握&lt;/li&gt;
&lt;li&gt;具体信息：通过感官进行联系（医学）&lt;/li&gt;
&lt;li&gt;抽象信息：对知识进行简化、抽象和纠错（化学、计算机）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 快速学习的技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取知识&lt;ul&gt;
&lt;li&gt;快速阅读：指读法，积极阅读（观点是什么？怎么记住？怎么拓展和运用），一次学会&lt;/li&gt;
&lt;li&gt;笔记流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;联系观点&lt;ul&gt;
&lt;li&gt;比喻&lt;/li&gt;
&lt;li&gt;内在化：赋予知识情感&lt;/li&gt;
&lt;li&gt;图表法：流程图、概念图和图像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随意信息的处理&lt;ul&gt;
&lt;li&gt;联想法&lt;/li&gt;
&lt;li&gt;挂钩法：创造对应和夸张的记忆场景&lt;/li&gt;
&lt;li&gt;信息压缩法：口诀，笔记压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;知识拓展&lt;ul&gt;
&lt;li&gt;实际应用&lt;/li&gt;
&lt;li&gt;模型纠错&lt;/li&gt;
&lt;li&gt;以项目为目的的学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增加能量储备：运动、睡眠、饮食、饮水&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;D. @alswl 拓展&lt;/h2&gt;
&lt;p&gt;哈，文中提到了《春风化雨》这部电影，我记得上次《七周七语言》也提到了它，
决定找个时间去看看了。&lt;/p&gt;
&lt;p&gt;更广泛的能力定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发现问题的能力&lt;/li&gt;
&lt;li&gt;学习的能力&lt;/li&gt;
&lt;li&gt;时间管理的能力&lt;/li&gt;
&lt;li&gt;沟通协作的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以立刻开始做起来的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指读法&lt;/li&gt;
&lt;li&gt;将这个学习方法用来学 &lt;a href="http://book.douban.com/subject/5977975/"&gt;数学那些事儿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;睡眠、饮食&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/04/lean-more-study-less/"&gt;http://blog.log4d.com/2014/04/lean-more-study-less/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 13 Apr 2014 11:42:47 +0800</pubDate><guid>tag:blog.log4d.com,2014-04-13:2014/04/lean-more-study-less/</guid><category>学海无涯</category><category>读书笔记</category></item><item><title>hiredis 源码学习</title><link>http://blog.log4d.com/2014/03/hiredis/</link><description>&lt;p&gt;前段时间学习 Redis 时候，听到 hiredis 的大名，正好也在做异步的学习，就找来代码学习一下。
我几乎不太会 C，仅限于最简单的语法，完全没有在生产环境中写过，
所以先看个 Client 简单代码，下次看 Memcached 代码应该会更顺畅一些。&lt;/p&gt;
&lt;p&gt;Hiredis 是用 C 写的 Redis 客户端，对 Redis 协议进行了简单的封装，
同时提供了同步和异步的两种 API。Hiredis 的代码位于
&lt;a href="https://github.com/redis/hiredis"&gt;https://github.com/redis/hiredis&lt;/a&gt;。&lt;/p&gt;


&lt;h2&gt;一分钟使用入门&lt;/h2&gt;
&lt;p&gt;同步 API 的调用方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;redisContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redisConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redisCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SET foo %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PING: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;freeReplyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;redisFree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redis ae 异步 API 的调用方法，使用 Redis 自己的 ae 事件库，
至于为什么 Redis 没有使用 libevent 或者 libev，可以参考
&lt;a href="http://groups.google.com/group/redis-db/browse_thread/thread/b52814e9ef15b8d0/"&gt;Reason&lt;/a&gt;，
&lt;a href="http://blog.csdn.net/archimedes_zht/article/details/6909074"&gt;中文翻译&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;connectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connected...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;disconnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Disconnected...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;privdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;redisReply&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;argv[%s]: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;privdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;redisAsyncDisconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redisAsyncConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aeCreateEventLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;redisAeAttach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisAsyncSetConnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;connectCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisAsyncSetDisconnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;disconnectCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;redisAsyncCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;end-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GET key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Libev 异步 API 调用，因为 &lt;code&gt;adapters/*.h&lt;/code&gt; 封装的好，所以几乎和 ae 调用一致：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;connectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connected...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;disconnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Disconnected...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;privdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;redisReply&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;argv[%s]: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;privdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Disconnect after receiving the reply to GET */&lt;/span&gt;
    &lt;span class="n"&gt;redisAsyncDisconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;redisAsyncContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redisAsyncConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisLibevAttach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EV_DEFAULT_&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisAsyncSetConnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;connectCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisAsyncSetDisconnectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;disconnectCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;redisAsyncCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;end-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GET key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hiredis 还支持使用 libevent，我就不列出来了。&lt;/p&gt;
&lt;p&gt;详细的使用 example 可以看
&lt;a href="https://github.com/redis/hiredis/tree/master/examples"&gt;https://github.com/redis/hiredis/tree/master/examples&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;主要结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;redisReply&lt;/li&gt;
&lt;li&gt;redisReader&lt;/li&gt;
&lt;li&gt;redisContext&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;流程&lt;/h2&gt;
&lt;h3&gt;同步连接&lt;/h3&gt;
&lt;p&gt;同步连接的代码在 &lt;code&gt;hiredis.c&lt;/code&gt; 和 &lt;code&gt;net.c&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redisConnect&lt;/code&gt; / &lt;code&gt;redisConnectWithTimeout&lt;/code&gt; / &lt;code&gt;redisConnectNonBlock&lt;/code&gt; 都调用了
&lt;code&gt;net.c&lt;/code&gt; 里面的 &lt;code&gt;redisContextConnectTcp&lt;/code&gt;。使用 &lt;code&gt;fcntl(fd, F_SETFL, flags)&lt;/code&gt;
设置是否阻塞连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt; 即 Socket 非阻塞模式，但仍然是同步的哦。&lt;/p&gt;
&lt;p&gt;事实上，无论阻塞还是非阻塞，hiredis 都会使用非阻塞（poll）来
&lt;code&gt;connect&lt;/code&gt; 连接服务器，会返回 -1，并且 &lt;code&gt;errno&lt;/code&gt;
为 &lt;code&gt;EINPROGRESS&lt;/code&gt;，这是非阻塞模式正常的表现。
为什么阻塞模式也会强制使用非阻塞的 &lt;code&gt;poll&lt;/code&gt; 连接？其实是为了能够支持 timeout 功能。
hiredis 在连接成功之后，按照之前需求重新设定为阻塞或者非阻塞模式。&lt;/p&gt;
&lt;p&gt;关于如何设计超时功能，可以参考 &lt;a href="http://blog.csdn.net/ast_224/article/details/2957294"&gt;http://blog.csdn.net/ast_224/article/details/2957294&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;命令&lt;/h3&gt;
&lt;p&gt;使用 va_list 解决变参问题（C 也支持变长参数，被惊呆了，我果然是 C 盲啊）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;redisFormatCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;va_list&lt;/span&gt; &lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;va_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;redisvCommand&lt;/code&gt; 用来执行阻塞Redis 命令，它会调用 &lt;code&gt;__redisBlockForReply&lt;/code&gt;，
内部调用 &lt;code&gt;redisBufferWrite&lt;/code&gt; 从 socket 写 buffer，然后同步等待，从
&lt;code&gt;redisBufferRead&lt;/code&gt; 读数据，用 &lt;code&gt;redisGetReplyFromReader&lt;/code&gt; 解析返回数据。&lt;/p&gt;
&lt;h3&gt;异步连接&lt;/h3&gt;
&lt;p&gt;异步调用的代码在 &lt;code&gt;async.c&lt;/code&gt; 中，我先看 ae 库。&lt;/p&gt;
&lt;p&gt;重要的结构是 &lt;code&gt;redisAsyncContext&lt;/code&gt; 和 &lt;code&gt;redisAeEvents&lt;/code&gt;，前者重要的方法是注册回调函数：
&lt;code&gt;addRead&lt;/code&gt; / &lt;code&gt;delRead&lt;/code&gt; / &lt;code&gt;addWrite&lt;/code&gt; / &lt;code&gt;delWrite&lt;/code&gt;，后者是用来存放 loop / fd / event stream
的。&lt;/p&gt;
&lt;p&gt;异步连接时候，仍然使用 &lt;code&gt;redisContextConnectTcp&lt;/code&gt; 来发起到服务器的非阻塞连接。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;aeCreateEventLoop&lt;/code&gt; 创建一个事件循环，然后使用 &lt;code&gt;redisAeAttach&lt;/code&gt; 给
&lt;code&gt;context&lt;/code&gt; 注册事件，比如说 &lt;code&gt;aeCreateFileEvent(loop,e-&amp;gt;fd,AE_READABLE,redisAeReadEvent,e)&lt;/code&gt;
就注册了一个 &lt;code&gt;read&lt;/code&gt; 事件，并将 callback 调用设置到 &lt;code&gt;redisAeReadEvent&lt;/code&gt;，
&lt;code&gt;redisAeReadEvent&lt;/code&gt; 再将这个事件托管给 &lt;code&gt;redisAsyncHandleRead&lt;/code&gt;（定义在 async.c 里面，
被三个 event 库调用）。&lt;/p&gt;
&lt;p&gt;所以，hiredis 通过 adapter 的封装，屏蔽了 ae / libevent / libev 的 API 差异，
从而可以灵活的选择。据说 ae 是从两个 libevent 库重写过来的，可是我觉得 ae
的风格和 libev 比较像，而 libevent 的风格比较好理解。&lt;/p&gt;
&lt;p&gt;如果拿这段代码的复杂度和 Tornado 的 IOLoop 进行对比，真实感觉 Tornado 那段 API
封装太人性化了，C 的代码写起来好复杂，系统 API、资源控制、错误控制都挺麻烦。&lt;/p&gt;
&lt;p&gt;Redis ae 事件库的分析可以参考 &lt;a href="http://my.oschina.net/u/917596/blog/161077#OSC_h4_6"&gt;http://my.oschina.net/u/917596/blog/161077#OSC_h4_6&lt;/a&gt;。
Libevent 的一个简单教程 &lt;a href="http://www.wangafu.net/~nickm/libevent-book/01_intro.html"&gt;http://www.wangafu.net/~nickm/libevent-book/01_intro.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;关于 C&lt;/h2&gt;
&lt;p&gt;作为 C 渣的我，勉强读完 hiredis，感觉那点 C 基础完全不够用，
稍微将学习过程中疑惑的地方罗列一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFDEF&lt;/code&gt; 使用，可以防止重复导入同一个头文件定义，这里有一个详细的解释
&lt;a href="http://faculty.cs.niu.edu/~mcmahon/CS241/c241man/node90.html"&gt;http://faculty.cs.niu.edu/~mcmahon/CS241/c241man/node90.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__cplusplus&lt;/code&gt;: C++ 里面定义了这个变量，而 C 没有定义，所以当 C++ 编译器识别
source 时候，通过这个加上 &lt;code&gt;ifdef&lt;/code&gt; 来使用 &lt;code&gt;extern&lt;/code&gt; 编译 C 代码。&lt;/li&gt;
&lt;li&gt;long long: long 只能存放 32 位，long long 可以存放 64 位长度，即 0 - 2^64-1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c-&amp;gt;flags |= REDIS_BLOCK&lt;/code&gt; / &lt;code&gt;c-&amp;gt;flags &amp;amp;= ~REDIS_BLOCK;&lt;/code&gt; 简洁的位操作。&lt;/li&gt;
&lt;li&gt;sds（simple dynamic string）是 Redis 自己实现的 C String 字符串结构。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((void)fd)&lt;/code&gt; 好像是将 fd 指针转成无类型的指针，不知道有什么用处。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/03/hiredis/"&gt;http://blog.log4d.com/2014/03/hiredis/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 30 Mar 2014 15:41:43 +0800</pubDate><guid>tag:blog.log4d.com,2014-03-30:2014/03/hiredis/</guid><category>C</category><category>Redis</category><category>hiredis</category></item><item><title>Java 运行参数调整</title><link>http://blog.log4d.com/2014/03/java-options/</link><description>&lt;p&gt;JVM 在线上运行的时候，可以调整一些运行参数，查看参数帮助如下：&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;java -h&lt;/code&gt; 可以看到 Java 运行可调整的参数。
运行 &lt;code&gt;java -X&lt;/code&gt; 可以查看 Java 支持的额外参数。
注意一些参数的默认开启在 JDK6 和 JDK7 之间会有差异，甚至在 JDK7 的不同 update
也会有差异，运行 &lt;code&gt;java -XX:+PrintFlagsFinal&lt;/code&gt; 查看默认的参数配置。&lt;/p&gt;
&lt;p&gt;参考：
&lt;a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html"&gt;Java HotSpot VM Options&lt;/a&gt;
&lt;a href="http://stas-blogspot.blogspot.com/2011/07/most-complete-list-of-xx-options-for.html"&gt;The most complete list of -XX options for Java JVM &lt;/a&gt;
&lt;a href="http://docs.oracle.com/cd/E13209_01/wlcp/wlss30/configwlss/jvmgc.html"&gt; Tuning JVM Garbage Collection for Production Deployments &lt;/a&gt;
&lt;a href="http://www.jvmer.com/jvm-xx-参数介绍/"&gt;JVM -XX: 参数介绍&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;以下是一些经验调整：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;d64&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;运行在&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="s-Atom"&gt;位数据模式下&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;server&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;选择&lt;/span&gt; &lt;span class="s-Atom"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;VM&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;Xms1024m&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;初始堆大小，直接固定到&lt;/span&gt; &lt;span class="nv"&gt;Xmx&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;Xmx1024m&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;最大堆大小，根据服务器性能和请求量调整，太大了会导致&lt;/span&gt; &lt;span class="nv"&gt;GC&lt;/span&gt; &lt;span class="s-Atom"&gt;时间太长&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;DoEscapeAnalysis&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;支持逃逸分析（将局部对象实例存储在栈上）&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s-Atom"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;iteye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;473355&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseTLAB&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="s-Atom"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;local&lt;/span&gt; &lt;span class="s-Atom"&gt;object&lt;/span&gt; &lt;span class="s-Atom"&gt;allocation&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;使用本地线程实例存储，可以减少堆共享锁的竞争&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;RelaxAccessControlCheck&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Relax&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;access&lt;/span&gt; &lt;span class="s-Atom"&gt;control&lt;/span&gt; &lt;span class="s-Atom"&gt;checks&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;verifier&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;JDK7&lt;/span&gt; &lt;span class="s-Atom"&gt;默认不开启&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;AggressiveOpts&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Enable&lt;/span&gt; &lt;span class="s-Atom"&gt;aggressive&lt;/span&gt; &lt;span class="s-Atom"&gt;optimizations&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;see&lt;/span&gt; &lt;span class="s-Atom"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;cpp&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;启用最新&lt;/span&gt; &lt;span class="nv"&gt;JVM&lt;/span&gt; &lt;span class="s-Atom"&gt;调优成果&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseBiasedLocking&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Enable&lt;/span&gt; &lt;span class="s-Atom"&gt;biased&lt;/span&gt; &lt;span class="s-Atom"&gt;locking&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;JVM&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;偏向锁（建议去了解一下轻量级锁和偏向锁）&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;优化单线程程序下面锁资源速度，不适合多线程（所以到底&lt;/span&gt; &lt;span class="s-Atom"&gt;+/-&lt;/span&gt; &lt;span class="s-Atom"&gt;我存疑）&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s-Atom"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;iteye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;518066&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseFastAccessorMethods&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="s-Atom"&gt;fast&lt;/span&gt; &lt;span class="s-Atom"&gt;method&lt;/span&gt; &lt;span class="s-Atom"&gt;entry&lt;/span&gt; &lt;span class="s-Atom"&gt;code&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;accessor&lt;/span&gt; &lt;span class="s-Atom"&gt;methods&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;优化&lt;/span&gt; &lt;span class="s-Atom"&gt;get&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;set&lt;/span&gt; &lt;span class="s-Atom"&gt;方法&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;ThreadStackSize&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Thread&lt;/span&gt; &lt;span class="nv"&gt;Stack&lt;/span&gt; &lt;span class="nv"&gt;Size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Kbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;经验值&lt;/span&gt; &lt;span class="m"&gt;4096&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseLargePages&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="s-Atom"&gt;large&lt;/span&gt; &lt;span class="s-Atom"&gt;page&lt;/span&gt; &lt;span class="s-Atom"&gt;memory&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;大内存分页&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseStringCache&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Enables&lt;/span&gt; &lt;span class="s-Atom"&gt;caching&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;commonly&lt;/span&gt; &lt;span class="s-Atom"&gt;allocated&lt;/span&gt; &lt;span class="s-Atom"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;启用缓存常用的字符串&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;UseCompressedStrings&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;Strings&lt;/span&gt; &lt;span class="s-Atom"&gt;which&lt;/span&gt; &lt;span class="s-Atom"&gt;can&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt; &lt;span class="s-Atom"&gt;represented&lt;/span&gt; &lt;span class="s-Atom"&gt;as&lt;/span&gt; &lt;span class="s-Atom"&gt;pure&lt;/span&gt; &lt;span class="nv"&gt;ASCII&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Introduced&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Java&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="nv"&gt;Update&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="nv"&gt;Performance&lt;/span&gt; &lt;span class="nv"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;降低内存消耗，浪费一点&lt;/span&gt; &lt;span class="nv"&gt;CPU&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s-Atom"&gt;stackoverflow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;questions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;8833385&lt;/span&gt;&lt;span class="o"&gt;/is-&lt;/span&gt;&lt;span class="s-Atom"&gt;support&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;for&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;compressed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;being&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;dropped&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:+&lt;/span&gt;&lt;span class="nv"&gt;OptimizeStringConcat&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Optimize&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt; &lt;span class="s-Atom"&gt;concatenation&lt;/span&gt; &lt;span class="s-Atom"&gt;operations&lt;/span&gt; &lt;span class="s-Atom"&gt;where&lt;/span&gt; &lt;span class="s-Atom"&gt;possible&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Introduced&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Java&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="nv"&gt;Update&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;优化字符串连接，对模板渲染操作应该会很有意义&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;XX&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;MaxPermSize&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Maximum&lt;/span&gt; &lt;span class="s-Atom"&gt;size&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;permanent&lt;/span&gt; &lt;span class="nf"&gt;generation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;经验值&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="s-Atom"&gt;m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/03/java-options/"&gt;http://blog.log4d.com/2014/03/java-options/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 22 Mar 2014 18:31:55 +0800</pubDate><guid>tag:blog.log4d.com,2014-03-22:2014/03/java-options/</guid><category>Java</category><category>JVM</category></item><item><title>Redis 到底有多快[译文]</title><link>http://blog.log4d.com/2014/02/redis-benchmarks/</link><description>&lt;p&gt;原文地址 &lt;a href="http://redis.io/topics/benchmarks"&gt;http://redis.io/topics/benchmarks&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;拖了一个半月的稿子~&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Redis 自带了一个叫 &lt;code&gt;redis-benchmark&lt;/code&gt; 的工具来模拟 N 个客户端同时发出 M 个请求。
（类似于 Apache &lt;code&gt;ab&lt;/code&gt; 程序）。你可以使用 &lt;code&gt;redis-benchmark -h&lt;/code&gt; 来查看基准参数。&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;以下参数被支持：&lt;/span&gt;

    &lt;span class="nb"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="na"&gt;-benchmark&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="na"&gt;-h&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="na"&gt;-p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;port&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="na"&gt;-c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="na"&gt;-n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="na"&gt;-k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

     -h &lt;span class="nt"&gt;&amp;lt;hostname&amp;gt;&lt;/span&gt;      Server hostname (default 127.0.0.1)
     -p &lt;span class="nt"&gt;&amp;lt;port&amp;gt;&lt;/span&gt;          Server port (default 6379)
     -s &lt;span class="nt"&gt;&amp;lt;socket&amp;gt;&lt;/span&gt;        Server socket (overrides host and port)
     -c &lt;span class="nt"&gt;&amp;lt;clients&amp;gt;&lt;/span&gt;       Number of parallel connections (default 50)
     -n &lt;span class="nt"&gt;&amp;lt;requests&amp;gt;&lt;/span&gt;      Total number of requests (default 10000)
     -d &lt;span class="nt"&gt;&amp;lt;size&amp;gt;&lt;/span&gt;          Data size of SET/GET value in bytes (default 2)
     -k &lt;span class="nt"&gt;&amp;lt;boolean&amp;gt;&lt;/span&gt;       1=keep alive 0=reconnect (default 1)
     -r &lt;span class="nt"&gt;&amp;lt;keyspacelen&amp;gt;&lt;/span&gt;   Use random keys for SET/GET/INCR, random values for SADD
      Using this option the benchmark will get/set keys
      in the form mykey_rand:000000012456 instead of constant
      keys, the &lt;span class="nt"&gt;&amp;lt;keyspacelen&amp;gt;&lt;/span&gt; argument determines the max
      number of values for the random number. For instance
      if set to 10 only rand:000000000000 - rand:000000000009
      range will be allowed.
     -P &lt;span class="nt"&gt;&amp;lt;numreq&amp;gt;&lt;/span&gt;        Pipeline &lt;span class="nt"&gt;&amp;lt;numreq&amp;gt;&lt;/span&gt; requests. Default 1 (no pipeline).
     -q                 Quiet. Just show query/sec values
     --csv              Output in CSV format
     -l                 Loop. Run the tests forever
     -t &lt;span class="nt"&gt;&amp;lt;tests&amp;gt;&lt;/span&gt;         Only run the comma separated list of tests. The test
                        names are the same as the ones produced as output.
     -I                 Idle mode. Just open N idle connections and wait.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你需要在基准测试之前启动一个 Redis 实例。一般这样启动测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个工具使用起来非常方便，同时你可以使用自己的基准测试工具，
不过开始基准测试时候，我们需要注意一些细节。&lt;/p&gt;
&lt;h2&gt;只运行一些测试用例的子集&lt;/h2&gt;
&lt;p&gt;你不必每次都运行 redis-benchmark 默认的所有测试。
使用 &lt;code&gt;-t&lt;/code&gt; 参数可以选择你需要运行的测试用例，比如下面的范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;74239.05&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;79239.30&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的测试中，我们只运行了 SET 和 LPUSH 命令，
并且运行在安静模式中（使用 &lt;code&gt;-q&lt;/code&gt; 参数）。&lt;/p&gt;
&lt;p&gt;也可以直接指定命令来直接运行，比如下面的范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis.call(&amp;#39;set&amp;#39;,&amp;#39;foo&amp;#39;,&amp;#39;bar&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;69881.20&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;选择测试键的范围大小&lt;/h2&gt;
&lt;p&gt;默认情况下面，基准测试使用单一的 key。在一个基于内存的数据库里，
单一 key 测试和真实情况下面不会有巨大变化。当然，使用一个大的 key 范围空间，
可以模拟现实情况下面的缓存不命中情况。&lt;/p&gt;
&lt;p&gt;这时候我们可以使用 &lt;code&gt;-r&lt;/code&gt; 命令。比如，假设我们想设置 10 万随机 key
连续 SET 100 万次，我们可以使用下列的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="n"&gt;flushall&lt;/span&gt;
&lt;span class="n"&gt;OK&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;SET&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;13.86&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;99.76&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;72144.87&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="n"&gt;dbsize&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;99993&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 pipelining&lt;/h2&gt;
&lt;p&gt;默认情况下，每个客户端都是在一个请求完成之后才发送下一个请求
（benchmark 会模拟 50 个客户端除非使用 &lt;code&gt;-c&lt;/code&gt; 指定特别的数量），
这意味着服务器几乎是按顺序读取每个客户端的命令。Also RTT is payed as well.&lt;/p&gt;
&lt;p&gt;真实世界会更复杂，Redis 支持
&lt;a href="pipelining"&gt;/topics/pipelining&lt;/a&gt;，使得可以一次性执行多条命令成为可能。
Redis pipelining 可以提高服务器的 TPS。&lt;/p&gt;
&lt;p&gt;下面这个案例是在 Macbook air 11" 上使用 pipelining 组织
16 条命令的测试范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;403063.28&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;508388.41&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记得在多条命令需要处理时候使用 pipelining。&lt;/p&gt;
&lt;h2&gt;陷阱和错误的认识&lt;/h2&gt;
&lt;p&gt;第一点是显而易见的：基准测试的黄金准则是使用相同的标准。
用相同的任务量测试不同版本的 Redis，或者用相同的参数测试测试不同版本 Redis。
如果把 Redis 和其他工具测试，那就需要小心功能细节差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 是一个服务器：所有的命令都包含网络或 IPC 消耗。这意味着和它和 SQLite，
Berkeley DB， Tokyo/Kyoto Cabinet 等比较起来无意义，
因为大部分的消耗都在网络协议上面。&lt;/li&gt;
&lt;li&gt;Redis 的大部分常用命令都有确认返回。有些数据存储系统则没有（比如 MongoDB
的写操作没有返回确认）。把 Redis 和其他单向调用命令存储系统比较意义不大。&lt;/li&gt;
&lt;li&gt;简单的循环操作 Redis 其实不是对 Redis 进行基准测试，而是测试你的网络（或者
IPC）延迟。想要真正测试 Redis，需要使用多个连接（比如 redis-benchmark)，
或者使用 pipelining 来聚合多个命令，另外还可以采用多线程或多进程。&lt;/li&gt;
&lt;li&gt;Redis 是一个内存数据库，同时提供一些可选的持久化功能。
如果你想和一个持久化服务器（MySQL, PostgreSQL 等等） 对比的话，
那你需要考虑启用 AOF 和适当的 fsync 策略。&lt;/li&gt;
&lt;li&gt;Redis 是单线程服务。它并没有设计为多 CPU 进行优化。如果想要从多核获取好处，
那就考虑启用多个实例吧。将单实例 Redis 和多线程数据库对比是不公平的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个普遍的误解是 redis-benchmark 特意让基准测试看起来更好，
所表现出来的数据像是人造的，而不是真实产品下面的。&lt;/p&gt;
&lt;p&gt;Redis-benchmark 程序可以简单快捷的对给定硬件条件下面的机器计算出性能参数。
但是，通常情况下面这并不是 Redis 服务器可以达到的最大吞吐量。
事实上，使用 pipelining 和更快的客户端（hiredis）可以达到更大的吞吐量。
redis-benchmark 默认情况下面仅仅使用并发来提高吞吐量（创建多条连接）。
它并没有使用 pipelining 或者其他并行技术（仅仅多条连接，而不是多线程）。&lt;/p&gt;
&lt;p&gt;如果想使用 pipelining 模式来进行基准测试（了达到更高吞吐量），可以使用 &lt;code&gt;-P&lt;/code&gt;
参数。这种方案的确可以提高性能，有很多使用 Redis 的应用在生产环境中这样做。&lt;/p&gt;
&lt;p&gt;最后，基准测试需要使用相同的操作和数据来对比，如果这些不一样，
那么基准测试是无意义的。&lt;/p&gt;
&lt;p&gt;比如，Redis 和 memcached 可以在单线程模式下面对比 GET/SET 操作。
两者都是内存数据库，协议也基本相同，甚至把多个请求合并为一条请求的方式也类似
（pipelining）。在使用相同数量的连接后，这个对比是很有意义的。&lt;/p&gt;
&lt;p&gt;下面这个很不错例子是在 Redis（antirez）和 memcached（dormando）测试的。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://antirez.com/post/redis-memcached-benchmark.html"&gt;antirez 1 - On Redis, Memcached, Speed, Benchmarks and The Toilet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dormando.livejournal.com/525147.html"&gt;dormando - Redis VS Memcached (slightly better bench)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://antirez.com/post/update-on-memcached-redis-benchmark.html"&gt;antirez 2 - An update on the Memcached/Redis benchmark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以发现相同条件下面最终结果是两者差别不大。请注意最终测试时候，
两者都经过了充分优化。&lt;/p&gt;
&lt;p&gt;最后，当特别高性能的服务器在基准测试时候（比如 Redis、memcached 这类），
很难让服务器性能充分发挥，通常情况下，客户端回事瓶颈限制而不是服务器端。
在这种情况下面，客户端（比如 benchmark 程序自身）需要优化，或者使用多实例，
从而能达到最大的吞吐量。&lt;/p&gt;
&lt;h2&gt;影响 Redis 性能的因素&lt;/h2&gt;
&lt;p&gt;有几个因素直接决定 Redis 的性能。它们能够改变基准测试的结果，
所以我们必须注意到它们。一般情况下，Redis 默认参数已经可以提供足够的性能，
不需要调优。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络带宽和延迟通常是最大短板。建议在基准测试之前使用
ping 来检查服务端到客户端的延迟。根据带宽，可以计算出最大吞吐量。
比如将 4 KB 的字符串塞入 Redis，吞吐量是 100000 q/s，那么实际需要 3.2 Gbits/s
的带宽，所以需要 10 GBits/s 网络连接， 1 Gbits/s 是不够的。
在很多线上服务中，Redis 吞吐会先被网络带宽限制住，而不是 CPU。
为了达到高吞吐量突破 TCP/IP 限制，最后采用 10 Gbits/s 的网卡，
或者多个 1 Gbits/s 网卡。&lt;/li&gt;
&lt;li&gt;CPU 是另外一个重要的影响因素，由于是单线程模型，Redis 更喜欢大缓存快速 CPU，
而不是多核。这种场景下面，比较推荐 Intel CPU。AMD CPU 可能只有 Intel CPU
的一半性能（通过对 Nehalem EP/Westmere EP/Sandy 平台的对比）。
当其他条件相当时候，CPU 就成了 redis-benchmark 的限制因素。&lt;/li&gt;
&lt;li&gt;在小对象存取时候，内存速度和带宽看上去不是很重要，但是对大对象（&amp;gt; 10 KB），
它就变得重要起来。不过通常情况下面，倒不至于为了优化 Redis 而购买更高性能的内存模块。&lt;/li&gt;
&lt;li&gt;Redis 在 VM 上会变慢。虚拟化对普通操作会有额外的消耗，Redis
对系统调用和网络终端不会有太多的 overhead。建议把 Redis 运行在物理机器上，
特别是当你很在意延迟时候。在最先进的虚拟化设备（VMWare）上面，redis-benchmark
的测试结果比物理机器上慢了一倍，很多 CPU 时间被消费在系统调用和中断上面。&lt;/li&gt;
&lt;li&gt;如果服务器和客户端都运行在同一个机器上面，那么 TCP/IP loopback 和 unix domain sockets
都可以使用。对 Linux 来说，使用 unix socket 可以比 TCP/IP loopback 快 50%。
默认 redis-benchmark 是使用 TCP/IP loopback。&lt;/li&gt;
&lt;li&gt;当大量使用 pipelining 时候，unix domain sockets 的优势就不那么明显了。&lt;/li&gt;
&lt;li&gt;当使用网络连接时，并且以太网网数据包在 1500 bytes 以下时，
将多条命令包装成 pipelining 可以大大提高效率。事实上，处理 10 bytes，100 bytes，
1000 bytes 的请求时候，吞吐量是差不多的，详细可以见下图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Data size impact" src="https://github.com/dspezia/redis-doc/raw/client_command/topics/Data_size.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在多核 CPU 服务器上面，Redis 的性能还依赖 NUMA 配置和 处理器绑定位置。
最明显的影响是 redis-benchmark 会随机使用 CPU 内核。为了获得精准的结果，
需要使用固定处理器工具（在 Linux 上可以使用 taskset 或 numactl）。
最有效的办法是将客户端和服务端分离到两个不同的 CPU 来高校使用三级缓存。
这里有一些使用 4 KB 数据 SET 的基准测试，针对三种 CPU（AMD Istanbul,
Intel Nehalem EX， 和 Intel Westmere）使用不同的配置。请注意，
这不是针对 CPU 的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="NUMA chart" src="https://github.com/dspezia/redis-doc/raw/6374a07f93e867353e5e946c1e39a573dfc83f6c/topics/NUMA_chart.gif" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在高配置下面，客户端的连接数也是一个重要的因素。得益于 epoll/kqueue，
Redis 的事件循环具有相当可扩展性。Redis 已经在超过 60000 连接下面基准测试过，
仍然可以维持 50000 q/s。一条经验法则是，30000 的连接数只有 100 连接的一半吞吐量。
下面有一个关于连接数和吞吐量的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="connections chart" src="https://github.com/dspezia/redis-doc/raw/system_info/topics/Connections_chart.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在高配置下面，可以通过调优 NIC 来获得更高性能。最高性能在绑定 Rx/Tx 队列和
CPU 内核下面才能达到，还需要开启 RPS（网卡中断负载均衡）。更多信息可以在
&lt;a href="https://groups.google.com/forum/#!msg/redis-db/gUhc19gnYgc/BruTPCOroiMJ"&gt;thread&lt;/a&gt;
。Jumbo frames 还可以在大对象使用时候获得更高性能。&lt;/li&gt;
&lt;li&gt;在不同平台下面，Redis 可以被编译成不同的内存分配方式（libc malloc, jemalloc,
tcmalloc），他们在不同速度、连续和非连续片段下会有不一样的表现。
如果你不是自己编译的 Redis，可以使用 INFO 命令来检查内存分配方式。
请注意，大部分基准测试不会长时间运行来感知不同分配模式下面的差异，
只能通过生产环境下面的 Redis 实例来查看。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他需要注意的点&lt;/h2&gt;
&lt;p&gt;任何基准测试的一个重要目标是获得可重现的结果，这样才能将此和其他测试进行对比。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个好的实践是尽可能在隔离的硬件上面测试。如果没法实现，那就需要检测
benchmark 没有受其他服务器活动影响。&lt;/li&gt;
&lt;li&gt;有些配置（桌面环境和笔记本，有些服务器也会）会使用可变的 CPU 分配策略。
这种策略可以在 OS 层面配置。有些 CPU 型号相对其他能更好的调整 CPU 负载。
为了达到可重现的测试结果，最好在做基准测试时候设定 CPU 到最高使用限制。&lt;/li&gt;
&lt;li&gt;一个重要因素是配置尽可能大内存，千万不要使用 SWAP。注意 32 位和 64
位 Redis 有不同的内存限制。&lt;/li&gt;
&lt;li&gt;如果你计划在基准测试时候使用 RDB 或 AOF，请注意不要让系统同时有其他 I/O 操作。
避免将 RDB 或 AOF 文件放到 NAS 或 NFS 共享或其他依赖网络的存储设备上面（比如
Amazon EC2 上 的 EBS）。&lt;/li&gt;
&lt;li&gt;将 Redis 日志级别设置到 warning 或者 notice。避免将日志放到远程文件系统。&lt;/li&gt;
&lt;li&gt;避免使用检测工具，它们会影响基准测试结果。使用 INFO 来查看服务器状态没问题，
但是使用 MONITOR 将大大影响测试准确度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;不同云主机和物理机器上的基准测试结果&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;这些测试模拟了 50 客户端和 200w 请求。&lt;/li&gt;
&lt;li&gt;使用了 Redis 2.6.14。&lt;/li&gt;
&lt;li&gt;使用了 loopback 网卡。&lt;/li&gt;
&lt;li&gt;key 的范围是 100 w。&lt;/li&gt;
&lt;li&gt;同时测试了 有 pipelining 和没有的情况（16 条命令使用 pipelining）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Intel(R) Xeon(R) CPU E5520  @ 2.27GHz (with pipelining)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;552028.75&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;707463.75&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;767459.75&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;770119.38&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Intel(R) Xeon(R) CPU E5520  @ 2.27GHz (without pipelining)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;122556.53&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;123601.76&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;136752.14&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;132424.03&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Linode 2048 instance (with pipelining)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;195503.42&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;250187.64&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;230547.55&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;250815.16&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Linode 2048 instance (without pipelining)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lpop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;35001.75&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;37481.26&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;36968.58&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;35186.49&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更多使用 pipeline 的测试&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;SET&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;100007&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.88&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;58.50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.17&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.58&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.90&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;114293.71&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;1.23&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;43.12&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;96.82&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;98.62&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;81234.77&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;INCR&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;100018&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;1.46&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;32.32&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;96.67&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.14&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.83&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.88&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.89&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.96&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;68458.59&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;LPUSH&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;100004&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;1.14&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;62.27&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.74&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.86&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.89&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.93&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.96&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;208&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;88109.25&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;

&lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="n"&gt;LPOP&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt;
  &lt;span class="mi"&gt;100001&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;1.39&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
  &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="mf"&gt;54.83&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;97.34&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.96&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;99.96&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;208&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;
&lt;span class="mf"&gt;71994.96&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：包大小从 256 到 1024 或者 4096 bytes 不会改变结果的量级
（但是到 1024 bytes 后，GETs 操作会变慢）。同样的，50 到 256 客户端的测试结果相同。
10 个客户端时候，吞吐量会变小（译者按：总量到不了最大吞吐量）。&lt;/p&gt;
&lt;p&gt;不同机器可以获的不一样的结果，下面是 &lt;em&gt;Intel T5500 1.66 GHz 在 Linux 2.6&lt;/em&gt;
下面的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;53684.38&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;45497.73&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;INCR:&lt;/span&gt; &lt;span class="mf"&gt;39370.47&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;34803.41&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;37367.20&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一个是 64 位 Xeon L5420 2.5 GHz 的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="nl"&gt;PING:&lt;/span&gt; &lt;span class="mf"&gt;111731.84&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;108114.59&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;98717.67&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;INCR:&lt;/span&gt; &lt;span class="mf"&gt;95241.91&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;104712.05&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;93722.59&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;高性能硬件下面的基准测试&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Redis &lt;strong&gt;2.4.2&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;默认连接数，数据包大小 256 bytes。&lt;/li&gt;
&lt;li&gt;Linux 是 &lt;em&gt;SLES10 SP3 2.6.16.60-0.54.5-smp&lt;/em&gt;，CPU 是 2 x &lt;em&gt;Intel X5670 @ 2.93 GHz&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;固定 CPU，但是使用不同 CPU 内核。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 unix domain socket：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;numactl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="n"&gt;PING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;200803.22&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;PING:&lt;/span&gt; &lt;span class="mf"&gt;200803.22&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;MSET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;78064.01&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;198412.69&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;198019.80&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;INCR:&lt;/span&gt; &lt;span class="mf"&gt;200400.80&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;200000.00&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;198019.80&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SADD:&lt;/span&gt; &lt;span class="mf"&gt;203665.98&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SPOP:&lt;/span&gt; &lt;span class="mf"&gt;200803.22&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LPUSH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="n"&gt;LRANGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;200000.00&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;42123.00&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;15015.02&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;10159.50&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7548.31&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 TCP loopback：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;numactl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="n"&gt;PING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;145137.88&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;PING:&lt;/span&gt; &lt;span class="mf"&gt;144717.80&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;MSET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;65487.89&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SET:&lt;/span&gt; &lt;span class="mf"&gt;142653.36&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;GET:&lt;/span&gt; &lt;span class="mf"&gt;142450.14&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;INCR:&lt;/span&gt; &lt;span class="mf"&gt;143061.52&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPUSH:&lt;/span&gt; &lt;span class="mf"&gt;144092.22&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;LPOP:&lt;/span&gt; &lt;span class="mf"&gt;142247.52&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SADD:&lt;/span&gt; &lt;span class="mf"&gt;144717.80&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="nl"&gt;SPOP:&lt;/span&gt; &lt;span class="mf"&gt;143678.17&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LPUSH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="n"&gt;LRANGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;143061.52&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;29577.05&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;10431.88&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7010.66&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;LRANGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5296.61&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/02/redis-benchmarks/"&gt;http://blog.log4d.com/2014/02/redis-benchmarks/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 23 Feb 2014 22:38:00 +0800</pubDate><guid>tag:blog.log4d.com,2014-02-23:2014/02/redis-benchmarks/</guid><category>性能</category><category>Redis</category><category>benchmark</category><category>译文</category></item><item><title>从 SVN 到 Git，找回丢失的历史</title><link>http://blog.log4d.com/2014/01/renamed-svn-to-git/</link><description>&lt;p&gt;前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题：
有一个小伙伴使用 git-svn 做 &lt;code&gt;rename&lt;/code&gt; 操作时候，将一个目录 &lt;code&gt;svn mv&lt;/code&gt; 了，
导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言，
历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 找出丢失之前的版本，列出丢失目录上层的操作记录。&lt;/span&gt;
&lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//log4d.com/trunk/apps/ios/ | less&lt;/span&gt;

&lt;span class="cp"&gt;# 将重命名之前的版本拷贝到一个临时目录&lt;/span&gt;
&lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost&lt;/span&gt;

&lt;span class="cp"&gt;# 准备现有代码到 Git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami&lt;/span&gt;

&lt;span class="cp"&gt;# 修改 .git/config 来加入丢失的历史数据 Remote&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;svn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;svn-lost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//log4d.com&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nami_lost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remotes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lost&lt;/span&gt;

&lt;span class="cp"&gt;# 并抓取 Remote 内容&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;

&lt;span class="cp"&gt;# Rebase 新代码到恢复过来的历史记录上&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rebase&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;committer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中注意的是手动添加一个 &lt;code&gt;svn-remote&lt;/code&gt; 地址为历史数据副本地址。
还有就是 &lt;code&gt;rebase&lt;/code&gt; 时候参数 &lt;code&gt;--committer-date-is-author-date&lt;/code&gt;
可以保证 &lt;code&gt;rebase&lt;/code&gt; 不会造成提交时间被修改，方便回溯。&lt;/p&gt;
&lt;p&gt;整整搞了一天，说出来都是泪，希望看到的人用不到，搜到的人用得到。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2014/01/renamed-svn-to-git/"&gt;http://blog.log4d.com/2014/01/renamed-svn-to-git/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate><guid>tag:blog.log4d.com,2014-01-21:2014/01/renamed-svn-to-git/</guid><category>软件开发和项目管理</category><category>SVN</category><category>Git</category></item><item><title>Goodbye 2013, Hello 2014</title><link>http://blog.log4d.com/2013/12/2013/</link><description>&lt;p&gt;2013 年末，我给自己制定了几个年度目标：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;离梦想更近一步&lt;/p&gt;
&lt;p&gt;找一个靠谱的姑娘，我感觉她需要我，我也需要她了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成为一个为百万用户级别提供技术支撑的人物，要能独当一面&lt;/li&gt;
&lt;li&gt;帮助网站进行性能优化&lt;/li&gt;
&lt;li&gt;制定规则，平衡猥琐实现和优雅&lt;/li&gt;
&lt;li&gt;继续写博客，分享积累 + 翻译文章&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;关于感情&lt;/h2&gt;
&lt;p&gt;先来谈谈感情，我和她在一起一年半了，虽然偶尔有小摩擦，但总体上面还是非常幸福的。
找到一个能产生共鸣，生活兴趣相近，相互欣赏的人太难了。一定会珍惜的。&lt;/p&gt;


&lt;h2&gt;关于工作&lt;/h2&gt;
&lt;p&gt;再谈谈协作，相当艰辛的跨过了去年年末的痛苦挣扎，然后看待事物和进行平衡选择时候
就没那么痛苦了。我的一大问题就是，从小认为人或事都可以非黑即白，这种决定性的判断，
会让我在处理事情时候，失去对重心的控制，有可能花费大量时间在细枝末节的地方。
2013 年初时候，我甚至想一度放弃，而熬过来之后，工作就又变得非常开心，
现在可以包容别人的不同意见，尝试寻找相同共性（虽然处理的能力还不够）。&lt;/p&gt;
&lt;p&gt;也许是因为从小不够出色，所以工作之后在自己擅长的领域，反而变得异常强势和绝对，
这一点近来控制的不错，但是还可以做的更好。&lt;/p&gt;
&lt;h2&gt;关于技术&lt;/h2&gt;
&lt;p&gt;技术方面，似乎没有学习什么特别的语言、框架、类库之类的。不过我现在对 IO 模型，
资源限制，缓存的策略，性能侦查，运维有了更多的认识。去年夸下海口，要在 2013
年做到 &lt;code&gt;成为一个为百万用户级别提供技术支撑的人物，要能独当一面&lt;/code&gt;，
恩，觉得这个目标没那么遥不可及了（好吧，其实就是没达到）。&lt;/p&gt;
&lt;p&gt;今年博客写的文章很少，只有 10 篇，还有一半是翻译的文章，只能托词说工作太忙了。
不过明年应该会好起来，因为在公司每周都有一次 Tech Share，我可以把新姿势
一并整理到博客来。&lt;/p&gt;
&lt;p&gt;业余时间做了一个项目，上线后效果不甚理想，不过也是投入了很大心血，Github
上面的 Commit 有一半都来自于它。&lt;/p&gt;
&lt;p&gt;&lt;img alt="http://upload.log4d.com/2014/01/github_contributions.png" src="http://upload.log4d.com/2014/01/github_contributions.png" /&gt;&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;桌上足球技术小成，千年老三，状态好了也能杀到第二，第一名是前阿里桌球第一交椅。&lt;/p&gt;
&lt;p&gt;读书 20 本，其中五星评价 33%，读书墙在 &lt;a href="http://www.yuedudna.com/users/2834372/book/2013"&gt;http://www.yuedudna.com/users/2834372/book/2013&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上海城市暴走大约 7-8 次，期间找到了女票，还遇到其他一些技术男，比如「机械唯物主义」。&lt;/p&gt;
&lt;p&gt;公司参加了 PyCon2013 分享。&lt;/p&gt;
&lt;p&gt;对互联网产品的思考只停留在纸面了，受教于公司 PM SM，感谢。&lt;/p&gt;
&lt;p&gt;购入 Retina Macbook Pro，Kindle，受益匪浅。&lt;/p&gt;
&lt;p&gt;总的来说，2013 我很幸福，但是还不够强，2014，我要达成这些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让她开心、幸福&lt;/li&gt;
&lt;li&gt;实施几个可以长期支撑堆糖核心业务的系统，让系统更健壮，产品给用户带来更多价值&lt;/li&gt;
&lt;li&gt;把我的想法和同事交流，推动更高效的团队协作，个体都很强，所以团队应该更强&lt;/li&gt;
&lt;li&gt;出去旅行至少一次&lt;/li&gt;
&lt;li&gt;每个月把思考和收获写成博客&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/12/2013/"&gt;http://blog.log4d.com/2013/12/2013/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 31 Dec 2013 23:55:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-12-31:2013/12/2013/</guid></item><item><title>Linux 程序员的 Mac 安装记录</title><link>http://blog.log4d.com/2013/12/mac/</link><description>&lt;p&gt;作为一个 Linux 的老用户，我再一次验证了那句老话「Linux 用户有钱就换 Mac」。
前段时间，托朋友从香港购入一台 rMBP，下面就是我的 Mac 使用安装记录。&lt;/p&gt;
&lt;h2&gt;Brew&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://brew.sh/"&gt;Brew&lt;/a&gt; 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac
的编译配置以及 Patch，可以方便的安装开发工具。&lt;/p&gt;
&lt;p&gt;安装 Brew：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我安装的 Brew 包：&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ack&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;highlight&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;aria2&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dos2unix&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;privoxy&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nmap&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;iotop&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;htop&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tinyproxy&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;multitail&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cliclick&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;readline&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;reattach&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;macvim&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sshfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Brew cask&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/phinze/homebrew-cask"&gt;Brew cask&lt;/a&gt; 是类似 Brew 的管理工具，
直接提供 dmg 级别的二进制包，（Brew 是不带源码，只有对应项目所在的 URL）。&lt;/p&gt;
&lt;p&gt;Brew cask 安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="n"&gt;phinze&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;homebrew&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我通过 Brew cask 安装的软件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mplayerx&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;appcleaner&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bartender&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;alfred&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bettertouchtool&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;qq&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;slate&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;omnigraffle&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ide&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cask&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dradio&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;按键配置&lt;/h2&gt;
&lt;p&gt;作为 &lt;a href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt; 的用户，我实在是受不了 Mac
默认的按键控制，太渣。在两天狂搜之后，尝试了 Divvy / BetterTouchToll
这些按键控制软件之后，还是觉得按键不够自由，直到我发现了
&lt;a href="https://github.com/jigish/slate"&gt;Slate&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Slate 可以管理几乎所有按键，并进行 窗口/Workspace/Shell 控制，配合
&lt;a href="https://github.com/BlueM/cliclick"&gt;Cliclick&lt;/a&gt; 可以完全完成桌面控制。&lt;/p&gt;
&lt;p&gt;下面是我配置的 &lt;code&gt;.slate&lt;/code&gt; 文件：&lt;/p&gt;
&lt;p&gt;详细代码可以参见 &lt;a href="https://github.com/alswl/.oOo."&gt;alswl/.oOo.&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# This is the default .slate file.
# If no ~/.slate file exists this is the file that will be used.

config defaultToCurrentScreen true
config nudgePercentOf screenSize
config resizePercentOf screenSize

# Alias
alias mouse_left shell path:~/ &amp;#39;/usr/local/bin/cliclick m:640,400 &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh&amp;#39;
alias mouse_right shell path:~/ &amp;#39;/usr/local/bin/cliclick m:1920,400 &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh&amp;#39;

alias mouse_iTerm shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh iTerm&amp;#39;
alias mouse_Firefox shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh Firefox&amp;#39;
alias mouse_Google_Chrome shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh Google_Chrome&amp;#39;
alias mouse_QQ shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh QQ&amp;#39;
alias mouse_MacVim shell path:~/ &amp;#39;/Users/alswl/dev/myproject/.oOo./local/bin/mouse_restore.sh MacVim&amp;#39;

# Resize Bindings
#bind right:alt       resize +10% +0
#bind left:alt        resize -10% +0
#bind up:alt          resize +0   -10%
#bind down:alt        resize +0   +10%
#bind right:ctrl;alt  resize -10% +0 bottom-right
#bind left:ctrl;alt   resize +10% +0 bottom-right
#bind up:ctrl;alt     resize +0   +10% bottom-right
#bind down:ctrl;alt   resize +0   -10% bottom-right

# Push Bindings
#bind right:ctrl;cmd  push right bar-resize:screenSizeX/3
#bind left:ctrl;cmd   push left  bar-resize:screenSizeX/3
#bind up:ctrl;cmd     push up    bar-resize:screenSizeY/2
#bind down:ctrl;cmd   push down  bar-resize:screenSizeY/2

# Nudge Bindings
#bind right:shift;alt nudge +10% +0
#bind left:shift;alt  nudge -10% +0
#bind up:shift;alt    nudge +0   -10%
#bind down:shift;alt  nudge +0   +10%

# Throw Bindings
bind 1:ctrl;alt         throw 0 resize
bind 2:ctrl;alt         throw 1 resize
#bind 3:ctrl;alt         throw 2 resize
#bind right:ctrl;alt;cmd throw right resize
#bind left:ctrl;alt;cmd  throw left  resize
#bind up:ctrl;alt;cmd    throw up    resize
#bind down:ctrl;alt;cmd  throw down  resize

# Focus Bindings
bind `:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_iTerm&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;iTerm&amp;#39;
bind 1:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_Firefox&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;Firefox&amp;#39;
bind 2:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_Google_Chrome&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;Google Chrome&amp;#39;
bind 3:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_QQ&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;QQ&amp;#39;
bind q:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_MacVim&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus &amp;#39;MacVim&amp;#39;
bind h:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_left&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus left
bind l:alt     sequence &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;mouse_right&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; focus right
#bind up:cmd       focus up
#bind down:cmd     focus down
bind k:alt   focus behind
bind j:alt focus behind

# Window Hints
#bind esc:cmd hint

# Toogle Application
#bind `:alt toggle &amp;#39;iTerm&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中用到的鼠标位置记忆脚本是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;## Save&lt;/span&gt;
&lt;span class="c"&gt;# get current postion, save to last&lt;/span&gt;
&lt;span class="nv"&gt;CURRENT_WINDOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;iTerm
&lt;span class="o"&gt;[&lt;/span&gt; -f /tmp/SLATE_M_CURR &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;CURRENT_WINDOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /tmp/SLATE_M_CURR&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c"&gt;# save now pos&lt;/span&gt;

&lt;span class="nv"&gt;NOW_POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/usr/local/bin/cliclick p | /usr/bin/awk &lt;span class="s1"&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$NOW_POS&lt;/span&gt; &amp;gt; /tmp/SLATE_M_&lt;span class="nv"&gt;$CURRENT_WINDOW&lt;/span&gt;

&lt;span class="c"&gt;## Restore&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;# get wanted position&lt;/span&gt;
        &lt;span class="nv"&gt;POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500,400
        &lt;span class="o"&gt;[&lt;/span&gt; -f /tmp/SLATE_M_&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /tmp/SLATE_M_&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

        &lt;span class="c"&gt;# restore postion&lt;/span&gt;
        /usr/local/bin/cliclick m:&lt;span class="nv"&gt;$POS&lt;/span&gt;

        &lt;span class="c"&gt;#LAST_WINDOW=iTerm&lt;/span&gt;
        &lt;span class="c"&gt;#[ -f /tmp/SLATE_M_LAST_WINDOW ] &amp;amp;&amp;amp; LAST_WINDOW=`cat /tmp/SLATE_M_LAST_WINDOW`&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &amp;gt; /tmp/SLATE_M_CURR
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/12/mac/"&gt;http://blog.log4d.com/2013/12/mac/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 08 Dec 2013 15:44:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-12-08:2013/12/mac/</guid><category>技术达人</category><category>Mac</category></item><item><title>Postfix 基本配置[译文]</title><link>http://blog.log4d.com/2013/11/postfix-basic-configuration/</link><description>&lt;p&gt;原文地址：&lt;a href="http://www.postfix.org/BASIC_CONFIGURATION_README.html#syntax"&gt;Postfix Basic Configuration &lt;/a&gt;。
有少许编译。&lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件 &lt;a href="http://www.postfix.org/postconf.5.html"&gt;main.cf&lt;/a&gt; 有数百个配置参数，
幸运的是，所有参数都有合理的默认配置项。
大部分时候，只需要配置两三个参数即可。&lt;/p&gt;
&lt;p&gt;安装 Postfix 的方法可以参见 &lt;a href="http://www.postfix.org/INSTALL.html"&gt;安装方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;特殊场景用途的配置方式，如邮件中枢，防火墙，拨号环境客户端的说明可以在
&lt;a href="http://www.postfix.org/STANDARD_CONFIGURATION_README.html"&gt;标准配置说明&lt;/a&gt; 里面查看。&lt;/p&gt;


&lt;h2&gt;Postfix 配置语法&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件默认在 &lt;code&gt;/etc/postfix&lt;/code&gt;。主力配置文件是 &lt;a href="http://www.postfix.org/postconf.5.html"&gt;main.cf&lt;/a&gt; 和
&lt;a href="http://www.postfix.org/master.5.html"&gt;master.cf&lt;/a&gt;。用户权限必须是 root 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; 配置语法有两个要点：不用引号，可以使用 &lt;code&gt;$&lt;/code&gt; 来引用参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 定义一个参数&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="cp"&gt;# 引用一个已有参数&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;other_parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引用参数时候，可以再定义之前先引用（Postfix 使用延迟计算技术）。&lt;/p&gt;
&lt;p&gt;Postfix 使用数据文件来控制接入权限。详情请看 &lt;a href="http://www.postfix.org/DATABASE_README.html"&gt;DATABASE 介绍&lt;/a&gt;，一般这样配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;virtual_alias_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 &lt;code&gt;main.cf&lt;/code&gt; 或者 &lt;code&gt;master.cf&lt;/code&gt; 之后，需要 &lt;code&gt;postfix reload&lt;/code&gt; 重新载入配置文件。&lt;/p&gt;
&lt;h2&gt;配置对外发送域名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#myorigin"&gt;myorigin&lt;/a&gt; 参数指定邮件中显示的发送域名，默认使用当前机器名 &lt;code&gt;$myhostname&lt;/code&gt;。
一般来说，我们会把 &lt;code&gt;myorigin&lt;/code&gt; 设置成顶级域名 &lt;code&gt;$mydomain&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myorigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user@$myhostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myorigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probably&lt;/span&gt; &lt;span class="n"&gt;desirable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user@$mydomain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置接收域名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mydestination&lt;/a&gt; 参数配置了本地直接接收的域名，而不会再对外发送。&lt;/p&gt;
&lt;p&gt;这个参数可以使用文件配置，也可以使用 &lt;code&gt;type:table&lt;/code&gt;，比如 hash / btree / ldap
/ mysql 等等。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# 默认配置&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;

&lt;span class="cp"&gt;# 对整个域名生效&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;

&lt;span class="cp"&gt;# 对多个 DNS 域名生效&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt; 
        &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置允许从哪些地方接收&lt;/h2&gt;
&lt;p&gt;默认情况下面，Postfix 仅发送信任网络的邮件。信任网络配置在 &lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mynetworks&lt;/a&gt; 参数中。&lt;/p&gt;
&lt;p&gt;范例（使用下列任意一个）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subnet&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;subnetworks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mf"&gt;168.100.189.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以这样配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mynetworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;168.100.189.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置允许发送到的域名&lt;/h2&gt;
&lt;p&gt;默认情况下，非信任网络仅仅被允许从发送邮件到特定域名。默认值是
&lt;a href="http://www.postfix.org/postconf.5.html#mynetworks"&gt;mydestination&lt;/a&gt; 下面的所有域名（包括子域名）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydestination&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;strangers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relay_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;subdomains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置递送方式：直接或间接&lt;/h2&gt;
&lt;p&gt;默认情况下，Postfix 会直接递送邮件到因特网。有时候你的服务器在防火墙后面或者
无法直接连接互联网，那就需要将邮件递送到另外一个 &lt;a href="http://www.postfix.org/postconf.5.html#relayhost"&gt;relay host&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="n"&gt;delivery&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;mydomain&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;relayhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tld&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="n"&gt;mailhub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置报告错误&lt;/h2&gt;
&lt;p&gt;可以通过配置 &lt;a href="http://www.postfix.org/aliases.5.html"&gt;aliases&lt;/a&gt; 来将错误报告邮件转发给其他人。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;aliases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;postmaster:&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;
    &lt;span class="nl"&gt;root:&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下面，只会报告严重错误（资源错误和软件错误）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;notify_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他错误还有：bounce 拒收 / 2bounce 错误报告拒收 / delay 延迟 / policy 策略未通过
/ protocol 协议错误 / resouce 资源错误 / software 软件错误&lt;/p&gt;
&lt;h2&gt;代理/NAT 配置&lt;/h2&gt;
&lt;p&gt;有时候需要通过代理或者 NAT 连接互联网。参考 &lt;a href="http://www.postfix.org/postconf.5.html#proxy_interfaces"&gt;proxy_interfaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;proxy_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2.3.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NAT&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Postfix 日志分布情况&lt;/h2&gt;
&lt;p&gt;日志路径配置在 &lt;code&gt;/etc/syslog.conf&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syslog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;                                    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;                                  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;maillog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建议经常这样做日志审核：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# postfix check&lt;/span&gt;
&lt;span class="c"&gt;# egrep &amp;#39;(reject|warning|error|fatal|panic):&amp;#39; /some/log/file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在 chorooted 状态下运行 Postfix&lt;/h2&gt;
&lt;p&gt;初学者就不用管这个了。&lt;/p&gt;
&lt;h2&gt;配置机器名&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#myhostname"&gt;myhostname&lt;/a&gt; 手工指定了 FQDN。它被其他好几个域名相关的地方引用。&lt;/p&gt;
&lt;p&gt;一般来说，如果指定了 &lt;code&gt;mydomain&lt;/code&gt;，就会自动通过它生成 &lt;code&gt;myhostname&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置域名&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href="http://www.postfix.org/postconf.5.html#mydomain"&gt;mydomain&lt;/a&gt; 配置，这个参数被很多地方引用。&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;
    &lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置网络地址&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postfix.org/postconf.5.html#inet_interfaces"&gt;inet_interfaces&lt;/a&gt; 配置监听网络。&lt;/p&gt;
&lt;p&gt;默认配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多个虚拟邮件服务器配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tld&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Postfix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inet_interfaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Postfix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，这项参数配置完之后需要重启。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/11/postfix-basic-configuration/"&gt;http://blog.log4d.com/2013/11/postfix-basic-configuration/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 09 Nov 2013 14:59:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-11-09:2013/11/postfix-basic-configuration/</guid><category>Linuxer</category><category>Postfix</category></item><item><title>在 Python 中使用 GDB 来调试[译文]</title><link>http://blog.log4d.com/2013/11/python-gdb/</link><description>&lt;p&gt;大约一年前，我接触了 Java 中的 &lt;a href="http://kenai.com/projects/btrace"&gt;Btrace&lt;/a&gt;
能够不停机查看线上 JVM 运行情况的特性让我艳羡不已。
另外还有强悍的 jStack 和 jConsole 来进行运行期侦测，JVM 的工业级强度果然不是盖的。&lt;/p&gt;
&lt;p&gt;当时公司技术方面也遇到了一些瓶颈，一部分原因是 CPython 本身的 IO 模型问题，
另一方面也和早期代码写的极不工整脱不了关系。万般无奈之下，我们用
Jython 推翻重做了主要业务，效果立竿见影，但同时也把真实问题给规避掉了。&lt;/p&gt;
&lt;p&gt;在这之后我们在 JVM 的领导下，走上了康庄大道。但我心中始终还有一个梗，
就是想对性能遇到瓶颈的 Python Process 进行线上侦测。
这篇文章就是开始的第一步。&lt;/p&gt;
&lt;p&gt;PS:这篇文章理论上是可行的，但是在我机器（Ubuntu 12.04 / 系统自带 Python）
无法正常执行，会爆出 &lt;code&gt;unable to read python frame information&lt;/code&gt;
的问题。解决方法我会在下篇文章中写出。这里只是单纯翻译一下原文。&lt;/p&gt;
&lt;p&gt;原文可以移步 &lt;a href="https://wiki.python.org/moin/DebuggingWithGdb"&gt;https://wiki.python.org/moin/DebuggingWithGdb&lt;/a&gt;。&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;有一些类型的 bugs 很难使用 Python 直接进行 debug，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段错误（无法被捕捉的 Python 异常）&lt;/li&gt;
&lt;li&gt;卡住的进程（这种情况下面没法使用 &lt;code&gt;pdb&lt;/code&gt; 来进行跟踪）&lt;/li&gt;
&lt;li&gt;控制之外的后台处理 daemon 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些情况下，你可以使用尝试使用 &lt;code&gt;gdb&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;需要在系统安装 &lt;code&gt;gdb&lt;/code&gt; 和 Python debug 扩展。
Python debug 扩展包含了一些 debug 命令，并且添加了一些 Python 特定的命令到 &lt;code&gt;gdb&lt;/code&gt;。
在主流的 Linux 发行版中，你可以轻松的安装他们：&lt;/p&gt;
&lt;p&gt;Fedora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debuginfo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubunt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一些老系统上面，也一样可以使用 &lt;code&gt;gdb&lt;/code&gt;，具体看文章末尾。&lt;/p&gt;
&lt;h2&gt;使用 &lt;code&gt;GDB&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;有两种可行的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始就使用 &lt;code&gt;gdb&lt;/code&gt; 来启动应用&lt;/li&gt;
&lt;li&gt;连接到一个已经运行的 Python 进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 下面启动 Python 同样有两种方式：&lt;/p&gt;
&lt;p&gt;交互式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt;
&lt;span class="nx"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="na"&gt;-ex&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;programname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的话，它会一直运行直到退出、段错误、或者人为的停止（使用 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;如果进程已经开始运行，你可以通过 PID 来接入它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;调试进程&lt;/h2&gt;
&lt;p&gt;如果你的程序段错误了， &lt;code&gt;gdb&lt;/code&gt; 会自动暂停程序，这样你可以切换到 &lt;code&gt;gdb&lt;/code&gt;
命令行来检查状态。你也可以人为地使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停程序运行。&lt;/p&gt;
&lt;p&gt;查看 &lt;a href="https://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;EasierPythonDebugging&lt;/a&gt;
获得 &lt;code&gt;gdb&lt;/code&gt; 里面的 Python 命令列表。&lt;/p&gt;
&lt;h2&gt;查看 C 调用栈&lt;/h2&gt;
&lt;p&gt;如果你在 debug 段错误，你最想做的可能就是查看 C 调用栈。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gdb&lt;/code&gt; 的命令行里面，只要运行一下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;bt&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3b705&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002a95b3ce8e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;abort&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;so&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mh"&gt;0x00000000004c164f&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;posix_abort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;noargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;posixmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7158&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000489fac&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;call_function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pp_stack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x7fbffff110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oparg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3531&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mh"&gt;0x0000000000485fc2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;PyEval_EvalFrame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x66ccd8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2163&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运气好的话，你可以直接看到问题出现在什么地方。如果它提供的信息不能直接帮你解决问题，
你可以尝试继续追踪调用栈。
调式的结果取决于 debug 信息的有效程度。&lt;/p&gt;
&lt;h2&gt;查看 Python 调用栈&lt;/h2&gt;
&lt;p&gt;如果你安装了 Python 扩展，你可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以获取熟悉的 Python 源代码。&lt;/p&gt;
&lt;h2&gt;对挂住的进程开刀&lt;/h2&gt;
&lt;p&gt;如果一个进程看上去挂住了，他可能在等待什么东西（比如锁、IO 等等）。
也有可能在拼命的跑循环。连接上这个进程，然后检查调用栈也许可以帮上忙。&lt;/p&gt;
&lt;p&gt;如果进程在疯狂循环，你可以先让它运行一会，使用 &lt;code&gt;cont&lt;/code&gt; 命令，
然后使用 &lt;code&gt;Ctrl+C&lt;/code&gt; 来暂停，并且打印出调用栈。&lt;/p&gt;
&lt;p&gt;如果一些线程卡住了，下面的命令可能会帮上忙：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;
  &lt;span class="n"&gt;Id&lt;/span&gt;   &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt;         &lt;span class="n"&gt;Frame&lt;/span&gt;
  &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa29feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17914&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NotificationThr&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa03fcb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17913&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QProcessManager&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa1bffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17909&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;31&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa31ffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17907&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa3fdfb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17906&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QInotifyFileSys&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;29&lt;/span&gt;   &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa481cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17905&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QFileInfoGather&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa508db40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17883&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;QThread&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa5cebb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17882&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa660cb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17881&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xabdffb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17876&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gdbus&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xac7b7b40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17875&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dconf worker&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xb7d876c0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17863&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt; &lt;span class="mh"&gt;0xb7fdd424&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__kernel_vsyscall&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当前运行的线程被标记为 &lt;code&gt;*&lt;/code&gt;，要查看 Python 代码运行到哪里，使用 &lt;code&gt;py-list&lt;/code&gt; 查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="mi"&gt;2025&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="mi"&gt;2026&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darwin&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Spyder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2027&lt;/span&gt;            &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="mi"&gt;2028&lt;/span&gt;                         &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_external_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;2029&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2030&lt;/span&gt;        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2031&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="mi"&gt;2032&lt;/span&gt;
&lt;span class="mi"&gt;2033&lt;/span&gt;
&lt;span class="mi"&gt;2034&lt;/span&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__remove_temp_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2035&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;osp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMP_SESSION_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有进程的 Python 代码位置，可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
 &lt;span class="mi"&gt;204&lt;/span&gt;        &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;205&lt;/span&gt;
 &lt;span class="mi"&gt;206&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;207&lt;/span&gt;            &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;dup() -&amp;gt; socket object&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa0bfdb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17911&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0xa13feb40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;17910&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;197&lt;/span&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_delegate_methods&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;198&lt;/span&gt;                &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mi"&gt;199&lt;/span&gt;        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_realsocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
 &lt;span class="mi"&gt;200&lt;/span&gt;
 &lt;span class="mi"&gt;201&lt;/span&gt;        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="mi"&gt;203&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_socketobject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock"&gt;https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;老系统上的 GDB&lt;/h2&gt;
&lt;p&gt;有时候你需要在老系统上面安装 &lt;code&gt;gdb&lt;/code&gt;，这时候你可能需要下列信息：&lt;/p&gt;
&lt;h3&gt;GDB Macros&lt;/h3&gt;
&lt;p&gt;一些随着 Python 发布的 GDB 脚本可以用来调试 Python 进程。
你可以把 Python 源码里面的 &lt;code&gt;Misc/gdbinit&lt;/code&gt;  拷贝到 &lt;code&gt;~/.gdbinit&lt;/code&gt;，
或者从 &lt;a href="http://svn.python.org/view/python/branches/release27-maint/Misc/gdbinit?view=log"&gt;Subversion&lt;/a&gt;
来拷贝他们。请注意你的 Python，确保使用正确的代码版本，否则有些功能可能无法工作。&lt;/p&gt;
&lt;p&gt;请注意有些新的 GDB 命令只有在 debug 需要的库存在才能正常工作。&lt;/p&gt;
&lt;p&gt;这个脚本在 Ubuntu 上面的 gcc 4.5.2 工作时，会爆出错误
&lt;code&gt;No symbol "co" in current context.&lt;/code&gt;，是因为 &lt;code&gt;call_function&lt;/code&gt; 在
&lt;a href="https://wiki.python.org/moin/EvalFrameEx"&gt;PyEval_EvalFrameEx&lt;/a&gt; 和
&lt;a href="https://wiki.python.org/moin/EvalCodeEx"&gt;PyEval_EvalCodeEx&lt;/a&gt; 之间。
重新使用 &lt;code&gt;make "CFLAGS=-g -fno-inline -fno-strict-aliasing"&lt;/code&gt;
编译 Python 可以解决这个问题。&lt;/p&gt;
&lt;h3&gt;使用 Python Stack Traces GDB 脚本&lt;/h3&gt;
&lt;p&gt;在 gdb 命令行里，可以这样查看 Python stack trace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，可以获取一列 stack frame 的 Python 变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pystackv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多 gdbinit 里面没定义的有用的脚本可以在这里找到：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros"&gt;http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/11/python-gdb/"&gt;http://blog.log4d.com/2013/11/python-gdb/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Fri, 01 Nov 2013 01:11:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-11-01:2013/11/python-gdb/</guid><category>Python</category><category>GDB</category><category>译文</category></item><item><title>15 分钟学会 R 语言[译文]</title><link>http://blog.log4d.com/2013/10/r-tutorial/</link><description>&lt;p&gt;仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 &lt;a href="http://learnxinyminutes.com/"&gt;Learn X in Y minuts&lt;/a&gt; 就是我经常光顾的站点。&lt;/p&gt;
&lt;p&gt;前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。&lt;/p&gt;
&lt;p&gt;Learn X in Y minuts 的源码托管在 &lt;a href="https://github.com/adambard/learnxinyminutes-docs"&gt;Github&lt;/a&gt;。
小柒被我逼着把这篇 &lt;a href="http://learnxinyminutes.com/docs/r/"&gt;R 语言教程&lt;/a&gt;
翻译到 &lt;a href="http://learnxinyminutes.com/docs/zh-cn/r-cn/"&gt;R 语言教程中文版&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 &lt;code&gt;R&lt;/code&gt; 命令。&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 评论以 # 开始&lt;/span&gt;

&lt;span class="c"&gt;# R 语言原生不支持 多行注释&lt;/span&gt;
&lt;span class="c"&gt;# 但是你可以像这样来多行注释&lt;/span&gt;

&lt;span class="c"&gt;# 在窗口里按回车键可以执行一条命令&lt;/span&gt;


&lt;span class="c"&gt;###################################################################&lt;/span&gt;
&lt;span class="c"&gt;# 不用懂编程就可以开始动手了&lt;/span&gt;
&lt;span class="c"&gt;###################################################################&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# 浏览内建的数据集&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 北美主要河流的长度（数据集）&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c"&gt;# 在工作空间中查看「河流」是否出现&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 撇一眼数据集&lt;/span&gt;
&lt;span class="c"&gt;# 735 320 325 392 524 450&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 我们测量了多少条河流？&lt;/span&gt;
&lt;span class="c"&gt;# 141&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#  135.0   310.0   425.0   591.2   680.0  3710.0&lt;/span&gt;
&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 茎叶图（一种类似于直方图的展现形式）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is 2 digit(s) to the right of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 4&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 011223334555566667778888899900001111223333344455555666688888999&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 111222333445566779001233344567&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000112233578012234468&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 045790018&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 04507&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 1471&lt;/span&gt;
&lt;span class="c"&gt;#  14 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  16 | 7&lt;/span&gt;
&lt;span class="c"&gt;#  18 | 9&lt;/span&gt;
&lt;span class="c"&gt;#  20 |&lt;/span&gt;
&lt;span class="c"&gt;#  22 | 25&lt;/span&gt;
&lt;span class="c"&gt;#  24 | 3&lt;/span&gt;
&lt;span class="c"&gt;#  26 |&lt;/span&gt;
&lt;span class="c"&gt;#  28 |&lt;/span&gt;
&lt;span class="c"&gt;#  30 |&lt;/span&gt;
&lt;span class="c"&gt;#  32 |&lt;/span&gt;
&lt;span class="c"&gt;#  34 |&lt;/span&gt;
&lt;span class="c"&gt;#  36 | 1&lt;/span&gt;


&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# 查看数据集的方式既不是标准形式，也不是取log后的结果! 看起来，是钟形曲线形式的基本数据集&lt;/span&gt;

&lt;span class="c"&gt;#  The decimal point is 1 digit(s) to the left of the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  48 | 1&lt;/span&gt;
&lt;span class="c"&gt;#  50 |&lt;/span&gt;
&lt;span class="c"&gt;#  52 | 15578&lt;/span&gt;
&lt;span class="c"&gt;#  54 | 44571222466689&lt;/span&gt;
&lt;span class="c"&gt;#  56 | 023334677000124455789&lt;/span&gt;
&lt;span class="c"&gt;#  58 | 00122366666999933445777&lt;/span&gt;
&lt;span class="c"&gt;#  60 | 122445567800133459&lt;/span&gt;
&lt;span class="c"&gt;#  62 | 112666799035&lt;/span&gt;
&lt;span class="c"&gt;#  64 | 00011334581257889&lt;/span&gt;
&lt;span class="c"&gt;#  66 | 003683579&lt;/span&gt;
&lt;span class="c"&gt;#  68 | 0019156&lt;/span&gt;
&lt;span class="c"&gt;#  70 | 079357&lt;/span&gt;
&lt;span class="c"&gt;#  72 | 89&lt;/span&gt;
&lt;span class="c"&gt;#  74 | 84&lt;/span&gt;
&lt;span class="c"&gt;#  76 | 56&lt;/span&gt;
&lt;span class="c"&gt;#  78 | 4&lt;/span&gt;
&lt;span class="c"&gt;#  80 |&lt;/span&gt;
&lt;span class="c"&gt;#  82 | 2&lt;/span&gt;


&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 试试用这些参数画画 （译者注：给 river 做统计频数直方图，包含了这些参数：数据源，颜色，边框，空格）&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rivers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#你还可以做更多式样的绘图&lt;/span&gt;

&lt;span class="c"&gt;# 还有其他一些简单的数据集可以被用来加载。R 语言包括了大量这种 data()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：参数为（数据源，颜色，线条宽度，X 轴名称，标题）&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#333333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of important discoveries per year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# 除了按照默认的年份排序，我们还可以排序来发现特征&lt;/span&gt;
&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2&lt;/span&gt;
&lt;span class="c"&gt;# [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3&lt;/span&gt;
&lt;span class="c"&gt;# [51]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4&lt;/span&gt;
&lt;span class="c"&gt;# [76]  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  8  9 10 12&lt;/span&gt;

&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：茎叶图（数据，放大系数）&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  The decimal point is at the |&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#   0 | 000000000&lt;/span&gt;
&lt;span class="c"&gt;#   1 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   2 | 00000000000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   3 | 00000000000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   4 | 000000000000&lt;/span&gt;
&lt;span class="c"&gt;#   5 | 0000000&lt;/span&gt;
&lt;span class="c"&gt;#   6 | 000000&lt;/span&gt;
&lt;span class="c"&gt;#   7 | 0000&lt;/span&gt;
&lt;span class="c"&gt;#   8 | 0&lt;/span&gt;
&lt;span class="c"&gt;#   9 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  10 | 0&lt;/span&gt;
&lt;span class="c"&gt;#  11 |&lt;/span&gt;
&lt;span class="c"&gt;#  12 | 0&lt;/span&gt;

&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 12&lt;/span&gt;

&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discoveries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.&lt;/span&gt;
&lt;span class="c"&gt;#    0.0     2.0     3.0     3.1     4.0    12.0&lt;/span&gt;




&lt;span class="c"&gt;#基本的统计学操作也不需要任何编程知识&lt;/span&gt;

&lt;span class="c"&gt;#随机生成数据&lt;/span&gt;
&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;6.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# 译者注：runif 产生随机数，round 四舍五入&lt;/span&gt;
&lt;span class="c"&gt;# 1 4 6 1 4 6 4&lt;/span&gt;

&lt;span class="c"&gt;# 你输出的结果会和我们给出的不同，除非我们设置了相同的随机种子 random.seed(31337)&lt;/span&gt;


&lt;span class="c"&gt;#从标准高斯函数中随机生成 9 次&lt;/span&gt;
&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# [1]  0.07528471  1.03499859  1.34809556 -0.82356087  0.61638975 -1.88757271&lt;/span&gt;
&lt;span class="c"&gt;# [7] -0.59975593  0.57629164  1.08455362&lt;/span&gt;









&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 基础编程&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 数值&lt;/span&gt;

&lt;span class="c"&gt;#“数值”指的是双精度的浮点数&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;5e4&lt;/span&gt; &lt;span class="c"&gt;# 50000             # 用科学技术法方便的处理极大值、极小值或者可变的量级&lt;/span&gt;
&lt;span class="mf"&gt;6.02e23&lt;/span&gt; &lt;span class="c"&gt;# 阿伏伽德罗常数#&lt;/span&gt;
&lt;span class="mf"&gt;1.6e-35&lt;/span&gt; &lt;span class="c"&gt;# 布朗克长度&lt;/span&gt;

&lt;span class="c"&gt;# 长整数并用 L 结尾&lt;/span&gt;
&lt;span class="il"&gt;5L&lt;/span&gt;  &lt;span class="c"&gt;# 5&lt;/span&gt;
&lt;span class="c"&gt;#输出5L&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;5L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;integer&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 可以自己试一试？用 class() 函数获取更多信息&lt;/span&gt;
&lt;span class="c"&gt;# 事实上，你可以找一些文件查阅 `xyz` 以及xyz的差别&lt;/span&gt;
&lt;span class="c"&gt;# `xyz` 用来查看源码实现，?xyz 用来看帮助&lt;/span&gt;

&lt;span class="c"&gt;# 算法&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="c"&gt;# 76&lt;/span&gt;
&lt;span class="mf"&gt;53.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="c"&gt;# 49.2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;
&lt;span class="il"&gt;3L&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="c"&gt;# 0.75&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c"&gt;# 1&lt;/span&gt;

&lt;span class="c"&gt;# 特殊数值类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;     # 在以下场景中会用到 integrate( dnorm(x), 3, Inf ) -- 消除 Z 轴数据&lt;/span&gt;

&lt;span class="c"&gt;# 但要注意，NaN 并不是唯一的特殊数值类型……&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 看上面&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# NULL&lt;/span&gt;


&lt;span class="c"&gt;# 简单列表&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 6 8 7 5 3 0 9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gimmel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dalet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;he&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Zoro&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# FALSE FALSE FALSE FALSE&lt;/span&gt;

&lt;span class="c"&gt;# 一些优雅的内置功能&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="c"&gt;# 5  6  7  8  9 10 11 12 13 14 15&lt;/span&gt;

&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#  [1]     0  1337  2674  4011  5348  6685  8022  9359 10696 12033 13370 14707&lt;/span&gt;
&lt;span class="c"&gt;# [13] 16044 17381 18718 20055 21392 22729 24066 25403 26740 28077 29414 30751&lt;/span&gt;

&lt;span class="n"&gt;letters&lt;/span&gt;
&lt;span class="c"&gt;#  [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; &amp;quot;e&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;i&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;m&amp;quot; &amp;quot;n&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;q&amp;quot; &amp;quot;r&amp;quot; &amp;quot;s&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [20] &amp;quot;t&amp;quot; &amp;quot;u&amp;quot; &amp;quot;v&amp;quot; &amp;quot;w&amp;quot; &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abb&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Jan&amp;quot; &amp;quot;Feb&amp;quot; &amp;quot;Mar&amp;quot; &amp;quot;Apr&amp;quot; &amp;quot;May&amp;quot; &amp;quot;Jun&amp;quot; &amp;quot;Jul&amp;quot; &amp;quot;Aug&amp;quot; &amp;quot;Sep&amp;quot; &amp;quot;Oct&amp;quot; &amp;quot;Nov&amp;quot; &amp;quot;Dec&amp;quot;&lt;/span&gt;


&lt;span class="c"&gt;# Access the n&amp;#39;th element of a list with list.name[n] or sometimes list.name[[n]]&lt;/span&gt;
&lt;span class="c"&gt;# 使用 list.name[n] 来访问第 n 个列表元素，有时候需要使用 list.name[[n]]&lt;/span&gt;
&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;r&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LETTERS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;M&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;September&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# 7&lt;/span&gt;



&lt;span class="c"&gt;# 字符串&lt;/span&gt;

&lt;span class="c"&gt;# 字符串和字符在 R 语言中没有区别&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;Horatio&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Horatio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;character&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;multis &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ø&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fortuna multis dat nimis, nulli satis.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;Fortøna møltis dat nimis, nølli satis.&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 逻辑值&lt;/span&gt;

&lt;span class="c"&gt;# 布尔值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 和我们预想的一样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;    &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;   &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;  &lt;span class="c"&gt;# FALSE&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;   &lt;span class="c"&gt;# TRUE&lt;/span&gt;
&lt;span class="c"&gt;# 缺失数据（NA）也是逻辑值&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;logical&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#定义NA为逻辑型&lt;/span&gt;



&lt;span class="c"&gt;# 因子&lt;/span&gt;
&lt;span class="c"&gt;# 因子是为数据分类排序设计的（像是排序小朋友们的年级或性别）&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;female&amp;quot; &amp;quot;male&amp;quot;   &amp;quot;NA&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;#  female female male   NA     female&lt;/span&gt;
&lt;span class="c"&gt;# Levels: female male NA&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 自然以及引产导致的不育症&lt;/span&gt;
&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infert&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;education&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# &amp;quot;0-5yrs&amp;quot;  &amp;quot;6-11yrs&amp;quot; &amp;quot;12+ yrs&amp;quot;&lt;/span&gt;



&lt;span class="c"&gt;# 变量&lt;/span&gt;

&lt;span class="c"&gt;# 有许多种方式用来赋值&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;# 这样可以&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# 更推荐这样&lt;/span&gt;
&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="c"&gt;# 这样可行，但是很怪&lt;/span&gt;

&lt;span class="c"&gt;#我们还可以使用强制转型&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 1&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;quot;5&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 循环&lt;/span&gt;

&lt;span class="c"&gt;# for 循环语句&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# while 循环&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 记住，在 R 语言中 for / while 循环都很慢&lt;/span&gt;
&lt;span class="c"&gt;# 建议使用 apply()（我们一会介绍）来错做一串数据（比如一列或者一行数据）&lt;/span&gt;

&lt;span class="c"&gt;# IF/ELSE&lt;/span&gt;

&lt;span class="c"&gt;# 再来看这些优雅的标准&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Noooo! This is blatantly illogical!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# [1] &amp;quot;Huzzah! It worked!&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 函数&lt;/span&gt;

&lt;span class="c"&gt;# 定义如下&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#add in a bit of (controlled) noise&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 和其他 R 语言函数一样调用&lt;/span&gt;
&lt;span class="n"&gt;jiggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 5±ε. 使用 set.seed(2716057) 后， jiggle(5)==5.005043&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 数据容器：vectors, matrices, data frames, and arrays&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 单维度&lt;/span&gt;
&lt;span class="c"&gt;# 你可以将目前我们学习到的任何类型矢量化，只要它们拥有相同的类型&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="c"&gt;#  8  9 10 11&lt;/span&gt;
&lt;span class="c"&gt;# 矢量的类型是这一组数据元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# If you vectorize items of different classes, weird coercions happen&lt;/span&gt;
&lt;span class="c"&gt;#如果你强制的将不同类型数值矢量化，会出现特殊值&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;dog&amp;quot;  &amp;quot;TRUE&amp;quot; &amp;quot;4&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#我们这样来取内部数据，（R 的下标索引顺序 1 开始）&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="c"&gt;# 我们可以根据条件查找特定数据&lt;/span&gt;
&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 3&lt;/span&gt;
&lt;span class="c"&gt;# 抓取矢量中第一个和最后一个字符&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="c"&gt;#如果下标溢出或不存会得到 NA&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# NA&lt;/span&gt;
&lt;span class="c"&gt;# 你可以使用 length() 获取矢量的长度&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;

&lt;span class="c"&gt;# 你可以直接操作矢量或者矢量的子集&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c"&gt;# 16 20 24 28&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="c"&gt;# 25 30&lt;/span&gt;
&lt;span class="c"&gt;# 这里有许多内置的函数，来表现向量&lt;/span&gt;
&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 9.5&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1.666667&lt;/span&gt;
&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 1.290994&lt;/span&gt;
&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 11&lt;/span&gt;
&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 8&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 38&lt;/span&gt;

&lt;span class="c"&gt;# 二维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;#你可以为同样类型的变量建立矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# 和 vector 不一样的是，一个矩阵的类型真的是 「matrix」，而不是内部元素的类型&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# =&amp;gt; &amp;quot;matrix&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# 访问第一行的字符&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c"&gt;# 1 4&lt;/span&gt;
&lt;span class="c"&gt;# 操作第一行数据&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 3 6 9&lt;/span&gt;
&lt;span class="c"&gt;# 访问一个特定数据&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c"&gt;# 6&lt;/span&gt;
&lt;span class="c"&gt;# 转置整个矩阵（译者注：变成 2 行 3 列）&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    4    5    6&lt;/span&gt;

&lt;span class="c"&gt;# 使用 cbind() 函数把两个矩阵按列合并，形成新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat2&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,] &amp;quot;1&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [2,] &amp;quot;2&amp;quot;  &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [3,] &amp;quot;3&amp;quot;  &amp;quot;bird&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# [4,] &amp;quot;4&amp;quot;  &amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# matrix&lt;/span&gt;
&lt;span class="c"&gt;# Again, note what happened!&lt;/span&gt;
&lt;span class="c"&gt;# 注意&lt;/span&gt;
&lt;span class="c"&gt;# 因为矩阵内部元素必须包含同样的类型&lt;/span&gt;
&lt;span class="c"&gt;# 所以现在每一个元素都转化成字符串&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="c"&gt;# 按行合并两个向量，建立新的矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mat3&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    2    4    5&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    6    7    0    4&lt;/span&gt;
&lt;span class="c"&gt;# 哈哈，数据类型都一样的，没有发生强制转换，生活真美好&lt;/span&gt;

&lt;span class="c"&gt;# 二维(不同的元素类型)&lt;/span&gt;

&lt;span class="c"&gt;# 利用 data frame 可以将不同类型数据放在一起&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bird&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;species&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 给数据列命名&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;data.frame&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#   number species&lt;/span&gt;
&lt;span class="c"&gt;# 1      5     dog&lt;/span&gt;
&lt;span class="c"&gt;# 2      2     cat&lt;/span&gt;
&lt;span class="c"&gt;# 3      1    bird&lt;/span&gt;
&lt;span class="c"&gt;# 4      4     dog&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;# &amp;quot;factor&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# data.frame() 会将字符向量转换为 factor 向量&lt;/span&gt;

&lt;span class="c"&gt;# 有很多精妙的方法来获取 data frame 的子数据集&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 5 2 1 4&lt;/span&gt;

&lt;span class="c"&gt;# 多维（相同元素类型）&lt;/span&gt;

&lt;span class="c"&gt;# 使用 arry 创造一个 n 维的表格&lt;/span&gt;
&lt;span class="c"&gt;# You can make a two-dimensional table (sort of like a matrix)&lt;/span&gt;
&lt;span class="c"&gt;# 你可以建立一个 2 维表格（有点像矩阵）&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2] [,3] [,4]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4    8    3&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5    9    6&lt;/span&gt;
&lt;span class="c"&gt;#你也可以利用数组建立一个三维的矩阵&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;847&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# , , 1&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    2    8&lt;/span&gt;
&lt;span class="c"&gt;# [2,]  300    9&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    4    0&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# , , 2&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    5   66&lt;/span&gt;
&lt;span class="c"&gt;# [2,]   60    7&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    0  847&lt;/span&gt;

&lt;span class="c"&gt;#列表（多维的，不同类型的）&lt;/span&gt;

&lt;span class="c"&gt;# R语言有列表的形式&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# 随机&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;

&lt;span class="c"&gt;# You can get items in the list like so&lt;/span&gt;
&lt;span class="c"&gt;# 你可以这样获得列表的元素&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="c"&gt;# You can subset list items like vectors&lt;/span&gt;
&lt;span class="c"&gt;# 你也可以和矢量一样获取他们的子集&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# apply()函数家族&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 还记得 mat 么？&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    1    4&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    2    5&lt;/span&gt;
&lt;span class="c"&gt;# [3,]    3    6&lt;/span&gt;
&lt;span class="c"&gt;# Use apply(X, MARGIN, FUN) to apply function FUN to a matrix X&lt;/span&gt;
&lt;span class="c"&gt;# 使用(X, MARGIN, FUN)将函数 FUN 应用到矩阵 X 的行 (MAR = 1) 或者 列 (MAR = 2)&lt;/span&gt;
&lt;span class="c"&gt;# That is, R does FUN to each row (or column) of X, much faster than a&lt;/span&gt;
&lt;span class="c"&gt;# R 在 X 的每一行/列使用 FUN，比循环要快很多&lt;/span&gt;
&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;# [1,]    3   15&lt;/span&gt;
&lt;span class="c"&gt;# [2,]    7   19&lt;/span&gt;
&lt;span class="c"&gt;# [3,]   11   23&lt;/span&gt;
&lt;span class="c"&gt;# 还有其他家族函数 ?lapply, ?sapply&lt;/span&gt;

&lt;span class="c"&gt;# 不要被吓到，虽然许多人在此都被搞混&lt;/span&gt;
&lt;span class="c"&gt;# plyr 程序包的作用是用来改进 apply() 函数家族&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;plyr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;plyr&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 载入数据&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# &amp;quot;pets.csv&amp;quot; 是网上的一个文本&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://learnxinyminutes.com/docs/pets.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 前两行&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 最后一行&lt;/span&gt;

&lt;span class="c"&gt;# 以 .csv 格式来保存数据集或者矩阵&lt;/span&gt;
&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pets2.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 保存到新的文件 pets2.csv&lt;/span&gt;
&lt;span class="c"&gt;# set working directory with setwd(), look it up with getwd()&lt;/span&gt;
&lt;span class="c"&gt;# 使用 setwd() 改变工作目录，使用 getwd() 查看当前工作目录&lt;/span&gt;

&lt;span class="c"&gt;# 尝试使用 ?read.csv 和 ?write.csv 来查看更多信息&lt;/span&gt;

&lt;span class="c"&gt;#########################&lt;/span&gt;
&lt;span class="c"&gt;# 画图&lt;/span&gt;
&lt;span class="c"&gt;#########################&lt;/span&gt;

&lt;span class="c"&gt;# 散点图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fake data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：横轴 list1$time，纵轴 wlist1$price，标题 fake data&lt;/span&gt;
&lt;span class="c"&gt;# 回归图&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：线性模型，数据集为list1，以价格对时间做相关分析模型&lt;/span&gt;
&lt;span class="n"&gt;linearModel&lt;/span&gt; &lt;span class="c"&gt;# 拟合结果&lt;/span&gt;
&lt;span class="c"&gt;# 将拟合结果展示在图上，颜色设为红色&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 也可以获取各种各样漂亮的分析图&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linearModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 直方图&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpois&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;thistle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 译者注：统计频数直方图&lt;/span&gt;

&lt;span class="c"&gt;# 柱状图&lt;/span&gt;
&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# 可以尝试着使用 ggplot2 程序包来美化图片&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ggplot2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;获得 R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;a href="http://www.r-project.org/"&gt;http://www.r-project.org/&lt;/a&gt; 获得安装包和图形化界面&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rstudio.com/ide/"&gt;RStudio&lt;/a&gt; 是另一个图形化界面&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/10/r-tutorial/"&gt;http://blog.log4d.com/2013/10/r-tutorial/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 29 Oct 2013 22:32:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-10-29:2013/10/r-tutorial/</guid><category>综合技术</category><category>R</category><category>译文</category></item><item><title>读《大规模Web服务开发技术》</title><link>http://blog.log4d.com/2013/06/web-technology/</link><description>&lt;p&gt;年前看了这本书《大规模Web服务开发技术》，当时给的评价是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法，
在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。&lt;/p&gt;
&lt;p&gt;&lt;img alt="大规模Web服务开发技术" src="http://img3.douban.com/lpic/s6818566.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《大规模Web服务开发技术》@豆瓣： &lt;a href="http://book.douban.com/subject/6758780/"&gt;http://book.douban.com/subject/6758780/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;规模&lt;/h2&gt;
&lt;p&gt;小规模 / 大规模 /
超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便&lt;/p&gt;
&lt;h2&gt;内存、磁盘、负载&lt;/h2&gt;
&lt;p&gt;内存快，磁盘慢，ＩＯ 速度的差异&lt;/p&gt;
&lt;h2&gt;数据分布式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用局部分布式，热数据独立出来。&lt;/li&gt;
&lt;li&gt;Partition 分布式，按模块分割数据。&lt;/li&gt;
&lt;li&gt;按 ID 分割，比如 a-g, h-z&lt;/li&gt;
&lt;li&gt;按访问类型，一般请求 / feed / 图像（#毒药计划的原理）&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;索引&lt;/h2&gt;
&lt;p&gt;索引，B 树（是一颗平衡树，log n 速度查找，顺序读取，插入，删除） / Ｂ+
树（节点只保存子节点指针，叶子保存数据）&lt;/p&gt;
&lt;p&gt;使用 MySQL 索引的语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where&lt;/li&gt;
&lt;li&gt;order by&lt;/li&gt;
&lt;li&gt;group by&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个查询时候要使用复合索引，每次查询只会走单一一个索引。&lt;/p&gt;
&lt;h2&gt;算法&lt;/h2&gt;
&lt;p&gt;感受算法 log n, 线性的差距。&lt;/p&gt;
&lt;h3&gt;字符匹配&lt;/h3&gt;
&lt;p&gt;正则到 Trie&lt;/p&gt;
&lt;h3&gt;贝叶斯匹配&lt;/h3&gt;
&lt;h3&gt;全文搜索&lt;/h3&gt;
&lt;p&gt;逆向索引&lt;/p&gt;
&lt;h2&gt;基础设施&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云 / 自己构建&lt;/li&gt;
&lt;li&gt;评估服务器性能极限&lt;/li&gt;
&lt;li&gt;负载跟踪：平均负载 / 内存 / CPU 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;冗余&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web 服务器冗余&lt;/li&gt;
&lt;li&gt;DB 冗余&lt;/li&gt;
&lt;li&gt;存储系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;维稳&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能增加 / 内存泄漏&lt;/li&gt;
&lt;li&gt;特定 URL 的地雷，资源循环&lt;/li&gt;
&lt;li&gt;访问暴增&lt;/li&gt;
&lt;li&gt;数据量增加&lt;/li&gt;
&lt;li&gt;外部 API 稳定（新浪等）&lt;/li&gt;
&lt;li&gt;硬件故障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;对策&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保持余量， 在 70% 极限内运行&lt;/li&gt;
&lt;li&gt;异常时候的自动重启 / 自动中止耗时查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;虚拟化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解除物理限制&lt;/li&gt;
&lt;li&gt;软件层面主机控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 寻找瓶颈&lt;/h2&gt;
&lt;p&gt;调优的意义：「找出负载原因并去除」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看平均负载&lt;/li&gt;
&lt;li&gt;top / uptime&lt;/li&gt;
&lt;li&gt;确认 CPU、 I/O 瓶颈&lt;/li&gt;
&lt;li&gt;sar / vmstat 检查交换区状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外： 负载&lt;/h2&gt;
&lt;p&gt;负载的含义：等待 CPU / IO 资源的进程数。 知道了负载还要知道如何看 CPU
还是 IO 负载。&lt;/p&gt;
&lt;h2&gt;番外：sar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sar-P ALL&lt;/li&gt;
&lt;li&gt;sar -u&lt;/li&gt;
&lt;li&gt;sar -q&lt;/li&gt;
&lt;li&gt;sar -r&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;番外：Henata 的选择&lt;/h2&gt;
&lt;p&gt;队列系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/TheSchwartz"&gt;TheSchwartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gearman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DB 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key Value： memcached / &lt;a href="/TokyoTyrant"&gt;TokyoTyrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MyISAM / InnoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MogileFS&lt;/li&gt;
&lt;li&gt;NFS&lt;/li&gt;
&lt;li&gt;WebDAV&lt;/li&gt;
&lt;li&gt;DRBD&lt;/li&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓存系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squid&lt;/li&gt;
&lt;li&gt;Vanish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/06/web-technology/"&gt;http://blog.log4d.com/2013/06/web-technology/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 29 Jun 2013 00:17:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-06-29:2013/06/web-technology/</guid><category>综合技术</category><category>读书笔记</category></item><item><title>Arch，再见</title><link>http://blog.log4d.com/2013/04/buy-arch/</link><description>&lt;p&gt;&lt;img alt="Arch" src="http://upload-log4d.qiniudn.com/2013/04/archlinux-logo-dark-1200dpi_.png" /&gt;&lt;/p&gt;
&lt;p&gt;Arch 是我真正使用的第一款 Linux 发行版，大约使用了三年，
现在的这个 VPS 跑的系统也是 Arch。
然而随着时间变化，我从最早的天天更新狂，到一周、一个月、三个月和不主动更新。
彻底从从不折腾会死星人变成了一个尽量避免变更的老用户。&lt;/p&gt;


&lt;p&gt;Arch 很适合作为第二个（第一个是新手使用的 Ubuntu），它的哲学 KISS 非常优雅，
Keep It Simple And Stupid。基于这原则，它将 Linux 内部的使用、运维细节都展现出来。
毫不夸张的说，被 Arch 折腾几年，就能胜任 Linux SA 的角色了（笑）。&lt;/p&gt;
&lt;p&gt;可是这种深入带来的学习成本也很高，需要不停地跟着 Arch 社区的变化而变化。
每次更新之前需要先阅读官方升级指南，搞不好就升级给挂了。
而且 Arch 社区升级激进得有些可怕。rc.d 升级 systemctl 时候，我还能撑住，
MySQL 转 MariaDB 时候，我也还凑合，但是当我安装一个 privoxy 导致 pacman
崩溃，进而不能安装程序时候，我失去了耐心。&lt;/p&gt;
&lt;p&gt;想来也是，我已过折腾系统的年龄，不会给手机刷机 ROM，
而是安安本本的使用没越狱的 iPhone。越发觉得时间和精力是有限的，
需要把它们用到「正经」的地方。我对 Linux 宗教般的膜拜，也逐渐消失，
等下次 MBP 发布我就考虑出手，哈哈。&lt;/p&gt;
&lt;p&gt;我曾经的签名中鲜亮的标着「ArchLinux / Python / Vim」，现在要把 ArchLinux 改成
Linuxer 了。
昨晚装了 Ubuntu 12.10，我不喜欢 Ubuntu，只是图它简单省事，社区支持丰富。
在装完之后就卸掉了几十个系统自带的应用，然后把 Awesome 桌面迁移到 Debian 环境。&lt;/p&gt;
&lt;p&gt;再见，ArchLinux，我会永远感谢你的。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/04/buy-arch/"&gt;http://blog.log4d.com/2013/04/buy-arch/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sat, 13 Apr 2013 22:04:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-04-13:2013/04/buy-arch/</guid><category>Linuxer</category><category>ArchLinux</category></item><item><title>读《人件》</title><link>http://blog.log4d.com/2013/04/peopleware/</link><description>&lt;p&gt;事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要，
还是通过语言/工具来约束人重要」。
我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。
如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。
并不是静态编译和工具检查就能搞定了。&lt;/p&gt;
&lt;p&gt;我愤愤的在 QQ 对话框中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学
后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量
现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="人件" src="http://img3.douban.com/lpic/s1299961.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;人件已经绝版，只能在找线上版，我花了两个星期把它读完。
书中给了我一部分答案，另外还有一些意外的收获。&lt;/p&gt;


&lt;p&gt;《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。&lt;/p&gt;
&lt;p&gt;《人件》@豆瓣： &lt;a href="http://book.douban.com/subject/1108725/"&gt;http://book.douban.com/subject/1108725/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《人件》在线阅读地址： &lt;a href="http://book.zi5.me/books/read/2206"&gt;http://book.zi5.me/books/read/2206&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。&lt;/p&gt;
&lt;h2&gt;以人为本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;技术人员转成项目经理经理之后，往往继续用工程化思维管理人员，
认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 &lt;strong&gt;有效&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作，
而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。
错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错，
会让团队成员失去创造的勇气。
我相信这也是为什么 Facebook 早期会践行「Break it Down」。&lt;/p&gt;
&lt;h2&gt;何不双赢&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;西班牙人的理论坚持认为地球上只有一个固定数量的价值，
因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。
而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命，
而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。
他们从海上运回大量的黄金，
他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我坚信公司和员工并不是对立面的，双赢才是正确的路线。
大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。
前提就是对产品有认同感，对公司有归属感。&lt;/p&gt;
&lt;h2&gt;最好和最坏&lt;/h2&gt;
&lt;p&gt;作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛，
分析出以下数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成绩最好与成绩最差的人之间的绩效比率是10 : 1。&lt;/li&gt;
&lt;li&gt;最好选手成绩大约是中等成绩选手成绩的2.5倍。&lt;/li&gt;
&lt;li&gt;成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.aqee.net/"&gt;外刊 IT 评论&lt;/a&gt;的
&lt;a href="http://www.aqee.net/why-programmers-are-not-paid-in-proportion-to-their-productivity/"&gt;为什么程序员的工作效率跟他们的工资不成比例&lt;/a&gt; 一文中也提供一些数据支持。&lt;/p&gt;
&lt;p&gt;我离最好还有很长的距离，但是我相信个人能力是可以提升的，
并且在个人能力上面的投资汇报比极高。&lt;/p&gt;
&lt;h2&gt;高效工作的秘诀&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进入顺流：咦？怎么时间过得这么快？！&lt;/li&gt;
&lt;li&gt;邮件比电话更不容易打乱人的思绪&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;团队的力量&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;团结起来，工作的更高效更开心&lt;/li&gt;
&lt;li&gt;有目标的团队，1 + 1 &amp;gt; 2&lt;/li&gt;
&lt;li&gt;为一个共同的目标走到一起&lt;/li&gt;
&lt;li&gt;优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队&lt;/li&gt;
&lt;li&gt;优秀的团队往往是带有个性的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;《人人都是产品经理》中当时讲了一个愿景（Vison）问题，
我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。&lt;/p&gt;
&lt;h2&gt;烂团队的苗头&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;防范团队成员&lt;/li&gt;
&lt;li&gt;官僚作风&lt;/li&gt;
&lt;li&gt;不挨在一起工作（空间上）&lt;/li&gt;
&lt;li&gt;某个成员的职责被分割多份&lt;/li&gt;
&lt;li&gt;对产品质量要求降低&lt;/li&gt;
&lt;li&gt;无意义的截止日期（不可能达到的目标）&lt;/li&gt;
&lt;li&gt;结党营私&lt;/li&gt;
&lt;li&gt;加班&lt;/li&gt;
&lt;li&gt;绩效考核 / 目标奖励 &lt;/li&gt;
&lt;li&gt;早期时候人员超编&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里和上文的愿景问题是对应的，无论是强制加班还是通过考核回报激励，
都不是激发人的创造力和战斗力的好方法。老大们应该学会画饼，画大饼。
另外，管理团队果然好难：做的事情必须靠谱，才能吸引到人才；
需要能管理好有个性的人才（比如伞哥这样的）； 在中国大环境下，还要不错的物质回报。&lt;/p&gt;
&lt;h2&gt;经营好团队&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;崇拜高质量：因为市场和用户需要高质量的产品&lt;/li&gt;
&lt;li&gt;通过里程碑的方式管理任务，提高士气&lt;/li&gt;
&lt;li&gt;崇拜精英&lt;/li&gt;
&lt;li&gt;允许和鼓励异端：异端代表创新和进化，没有异端就会种群灭亡&lt;/li&gt;
&lt;li&gt;给予自由度：对成员信任，而不是纯粹服从权威工作&lt;/li&gt;
&lt;li&gt;交流，唤醒那些有潜力的巨人（唤醒了才能将脑力劳动能力发挥到极限）&lt;/li&gt;
&lt;li&gt;内部竞争和培养&lt;/li&gt;
&lt;li&gt;管理层自身的学习，公司自身定位的不断改变&lt;/li&gt;
&lt;li&gt;将公司内部建设出社区文化（我觉得就是公司团队文化建设嘛）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我有一个观点是工程质量决定产品质量，产品质量决定整个团队。
质量的一个标准是：&lt;strong&gt;我以此为荣&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;工作是一种乐趣&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将混乱重建成秩序是有趣的&lt;/li&gt;
&lt;li&gt;敢于用小项目来做尝试&lt;/li&gt;
&lt;li&gt;组织竞赛游戏&lt;/li&gt;
&lt;li&gt;团队头脑风暴&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这本这么老的书居然提到团队竞争游戏，和 Facebook 的 Hackday 异曲同工啊。
再为这种乐趣补充一点：将公司的成果分享到开源社区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员需要做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;界定自己工作，成为主人翁&lt;/li&gt;
&lt;li&gt;促使自己成长为多面手，而不是单纯某个职位&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;给了成员足够的自由度，那么就会有相应的风险，需要对他们进行监测，
另外招人时候就需要找靠谱的人，这也是为什么 Facebook / Google / 早期百度对招人要求极其严格。&lt;/p&gt;
&lt;h2&gt;流程改进&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CMM 是标准，是标准的话就一定不是对于个体的最优情况&lt;/li&gt;
&lt;li&gt;CMM 自身也在改进，说明上一个版本的 CMM 不是最优&lt;/li&gt;
&lt;li&gt;流程的目标是：提高质量 / 提高生产力 / 减少风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;读后感&lt;/h2&gt;
&lt;p&gt;发挥个人的能力才是最关键的，要点在于信任、自由、乐趣。原则是 Pull 而不是 Push。&lt;/p&gt;
&lt;p&gt;我会继续学习和思考这些原则，因为总有一天我也会面临这样的挑战。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/04/peopleware/"&gt;http://blog.log4d.com/2013/04/peopleware/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-04-10:2013/04/peopleware/</guid><category>软件开发和项目管理</category><category>创业</category><category>读书笔记</category></item><item><title>读《打造 Facebook》</title><link>http://blog.log4d.com/2013/02/facebook/</link><description>&lt;p&gt;感谢好基友 &lt;a href="http://weibo.com/idao"&gt;@daodao&lt;/a&gt; 送了我这本《&lt;a href="http://book.douban.com/subject/20471120/"&gt;打造 Facebook&lt;/a&gt;》，
年前一直忙，最近腾出两个晚上，把这本很火的书看完了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="http://img3.douban.com/lpic/s24581301.jpg" /&gt;&lt;/p&gt;


&lt;p&gt;第一次听见王淮这个名字，其实是在知乎上面，
当时有一个问题 &lt;a href="http://www.zhihu.com/question/20239975"&gt;Facebook 早期员工王淮在职期间有什么成就？&lt;/a&gt;。
之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。&lt;/p&gt;
&lt;p&gt;书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。&lt;/p&gt;
&lt;p&gt;============================== 我是分割线 ============================== &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facebook 招人标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对公司的忠诚，是文化认同的附属品&lt;/li&gt;
&lt;li&gt;技术面试 2.5 / 系统设计 1 / 文化面试 0.5&lt;/li&gt;
&lt;li&gt;5 个程度的面试打分&lt;/li&gt;
&lt;li&gt;高标准人才，喜欢挑战和完成艰巨任务&lt;/li&gt;
&lt;li&gt;慢招人，快炒鱿鱼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新兵训练营&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局认识 / 工具和框架 / 运营商业模式 / 选组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程师入职不区分方向&lt;/li&gt;
&lt;li&gt;导师&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑客文化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习 / 再创造&lt;/li&gt;
&lt;li&gt;Done is better than perfect / Code wins arguments&lt;/li&gt;
&lt;li&gt;工程师参与构思、设计、实现&lt;/li&gt;
&lt;li&gt;很少有「这样子一定成功」，「我们来试试吧」，通过数据反馈&lt;/li&gt;
&lt;li&gt;工程师主导产品开发&lt;/li&gt;
&lt;li&gt;跨部门回忆，由工程师汇报进度&lt;/li&gt;
&lt;li&gt;开发准则：迅速开发、进行监测 / 坦然对待不确定性 / 不追求极致，不断发布到达目标&lt;/li&gt;
&lt;li&gt;工具文化&lt;/li&gt;
&lt;li&gt;换职位，Hack a month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;王淮转管理岗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facebook 开发流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描绘远景、设置目标&lt;ul&gt;
&lt;li&gt;SMART：详细、可度量、有难度、现实的、有期限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优先级和时间分配（6-2-2：预期任务-品质改良-有风险任务）&lt;ul&gt;
&lt;li&gt;120% 难度任务 / 任务段分片进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跨团队沟通 / 通知&lt;/li&gt;
&lt;li&gt;设计产品&lt;ul&gt;
&lt;li&gt;衡量指标：时间、预算、质量&lt;/li&gt;
&lt;li&gt;3 倍目标经验&lt;/li&gt;
&lt;li&gt;早期快速迭代变成多方面参与的流程控制&lt;/li&gt;
&lt;li&gt;前期评估优缺点和风险&lt;/li&gt;
&lt;li&gt;不重复造轮子，拥抱开源&lt;/li&gt;
&lt;li&gt;一些理念：不要过度设计、越简单越好、自己就是用户、好用流畅、不追求完美、最基本质量线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定责任人，定期碰头，了解进度，汇总报告&lt;/li&gt;
&lt;li&gt;发布产品，监测数据（系统状态，用户反馈，报警系统）&lt;ul&gt;
&lt;li&gt;问题事件分析：发生了什么，影响多大，问题原因，发生过程，如何避免&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考核激励&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;王淮做天使&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本书谈不上经典，也不是全文干货，但仍然能从一些章节中获取有用的信息，
推荐一读。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="http://blog.log4d.com/2013/02/facebook/"&gt;http://blog.log4d.com/2013/02/facebook/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Mon, 25 Feb 2013 00:51:00 +0800</pubDate><guid>tag:blog.log4d.com,2013-02-25:2013/02/facebook/</guid><category>学海无涯</category><category>创业</category><category>读书笔记</category></item></channel></rss>
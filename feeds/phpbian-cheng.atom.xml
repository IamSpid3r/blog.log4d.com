<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="/" rel="alternate"></link><link href="/feeds/phpbian-cheng.atom.xml" rel="self"></link><id>/</id><updated>2010-08-22T00:00:00+08:00</updated><entry><title>AzaAjaxChat笔记-实现</title><link href="/2010/08/azaajaxchat-notes-implementation/" rel="alternate"></link><updated>2010-08-22T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-08-22:2010/08/azaajaxchat-notes-implementation/</id><summary type="html">&lt;p&gt;唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是Turtial，问题有针对性，内容枯燥，路人可以直接忽略~&lt;/p&gt;
&lt;h3&gt;一、Comet服务器推技术&lt;/h3&gt;
&lt;p&gt;Comet推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的Web产品中应用的非常多，比如GMail。Co
met的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile
的流（streaming）方式，具体两种实现方式可以参考&lt;a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/"&gt;Comet：基于 HTTP
长连接的"服务器推"技术&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我计划把这个技术引入，成为一个亮点，第二种Comet实现方式过于复杂（GMail使用的就是这种），我就尝试第一种。我在测试环境测试了基于 AJAX 的长轮询
（long-polling）方式。这种方式说白了就是在Ajax获取返回数据时候，在状态吗为4（数据传输完成）情况随后进行下次查询。进行循环的查询。&lt;/p&gt;
&lt;p&gt;这种Long-polling的轮询方式有点伪Comet。相对于常见的定时查询，不同点是将"查询-&amp;gt;返回-&amp;gt;再查询"中间的一段断开时间进行重连接。最后因为技术
实现和开发时间，我决定放弃了Comet的实现。&lt;/p&gt;
&lt;p&gt;PS：一个系统应该不仅仅是技术的堆积，也应该考虑其他的一些因素，是否有确实需求，开发效率问题。虽然我做了一些前期准备，最终还是没有加入Comet，蛮可惜的。&lt;/p&gt;
&lt;h4&gt;相关链接：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.javaeye.com/topic/652949"&gt;一步一步打造WebIM（1） - .net - dotnet - JavaEye论坛 &lt;/a&gt;（.net使用IHttpAsyncHandler的实现）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ued.sohu.com/article/118/comment-page-1"&gt;Comet--"服务器推"技术 - 搜狐UED&lt;/a&gt;（搜狐UED团队的一个小介绍）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二、用户状态的处理&lt;/h3&gt;
&lt;p&gt;开发时候遇到一个逻辑问题，具体描述如下："一个用户登录长时间不活动（比如直接关闭浏览器），系统需要判定此用户为离线。"按照一般设计思路，这个动作应该由后台每
过一段时间自动（比如说5分钟）触发一次，如果用Java或.net实现，会考虑设计一个后台运行的进程进行管理。而现在用的PHP，我查了一下，似乎没有找到相应的
解决办法。&lt;/p&gt;
&lt;p&gt;我尝试在系统中设定一个页面每隔几分钟触发一个动作，放置在index.php页面中，但是感觉这个设计有点鸡肋。&lt;/p&gt;
&lt;p&gt;这个问题困惑我很久，最后参考了&lt;a href="https://blueimp.net/ajax/"&gt;AJAX Chat&lt;/a&gt;的源码，它的思路是在一个新用户上线时候，进行检测所
有用户距离上次其活动的时间来判定每个用户的离线状态。这个也不是最优想法（万一长时间没有用户登录怎么办？），但是比上面那个定时页面要好多了。&lt;/p&gt;
&lt;p&gt;如果有PHP达人看到这个，望不惜赐教。&lt;/p&gt;
&lt;h3&gt;三、RTMP&lt;/h3&gt;
&lt;p&gt;RTPM是一个流媒体传输的协议，我在AzaAjaxChat中用它进行视频聊天画面和音频传输。这块内容可以洋洋洒洒的写一大篇日志，我在这里只是简单罗列一下我用
到的相关内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real Time Messaging Protocol（实时消息传送协议协议)概述，实时消息传送协议是Adobe
Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的私有协议。它有三种变种： 1)工作在TCP之上的明文协议，使用端口1935；
2)RTMPT封装在HTTP请求之中，可穿越防火墙； 3)RTMPS类似RTMPT，但使用的是HTTPS连接；&lt;/p&gt;
&lt;p&gt;RTMP协议是被Flash用于对象，视频,音频的传输.该协议建立在TCP协议或者轮询 HTTP协议之上。&lt;/p&gt;
&lt;p&gt;RTMP协议就像一个用来装数据包的容器，这些数据可以是AMF格式的数据，也可以是FLV中的视/音频数据。一个单一的连接可以通过不同的通道传输多路网络流。
这些通道中的包都是按照固定大小的包传输的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我使用FMS作为RTPM容器，Adobe FMS（Flash Media Server）是一款能够提供出色的Flash
Video流媒体播放功能的服务器软件。&lt;/p&gt;
&lt;p&gt;FMS提供一个强大Script可定制脚本的服务器流媒体引擎，通过这个引擎，允许创建和交付面向互联网任何用户群体的交互媒体应用及服务。FMS还是Adobe公司
跨媒体解决方案中的一部分，针对诸如数据库连接访问、文件系统操作、服务访问等要求，可以同Adobe Flash Player与Adobe AIR一起来实现。&lt;/p&gt;
&lt;h3&gt;四、基于Flex的流媒体传输&lt;/h3&gt;
&lt;h4&gt;4.1 官方Sample-Stratus&lt;/h4&gt;
&lt;p&gt;AzaAjaxChat中最技术含量的地方在于语音视频聊天。Adobe官网在Flex子类中提供了一个Demo名叫&lt;a href="http://labs.a
dobe.com/technologies/stratus/samples/"&gt;Stratus&lt;/a&gt;，正是一个聊天系统。从教程上看，Adobe公司目前开放的Stratus是同时支
持视频和语音P2P的，同时，未来的FMS也可能会支持P2P。&lt;/p&gt;
&lt;p&gt;Adobe的某个专家博客还针对Stratus有一篇相当详细的讲解，原文在此&lt;a href="http://www.adobe.com/devnet/flashplayer/articles/rtmfp_stratus_app.html"&gt;Stratus service for developing end-to-
end applications using RTMFP in Flash Player 10 | Adobe Developer Connection&lt;/a&gt;，文中分析了
RTMFP（比RTMP更高阶的流媒体传输协议，支持P2P）和Stratus的相关核心代码。我本想把这篇文章翻译，完成10%之后，意外发现已经有人翻译了，地址
在此&lt;a href="http://snow
yrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;amp;sa=18
3740112"&gt;通过Stratus 服务器在Flash Player中使用RTMFP 开发 点对点应用(一) -- Windows Live&lt;/a&gt;，&lt;a href="http
://snowyrock.spaces.live.com/blog/cns!B8CBEB7169880B1D!1278.entry?_c=BlogPart"&gt;通过Stratus 服务器在Flash Player中使用RTMFP 开发 点对点应用（二） -- Windows Live&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;同时可以参考其他例子&lt;a href="http://www.cnblogs.com/beniao/archive/2009/04/28/1444159.html"&gt;FMS3系列(五)：通过FMS实现时时视频聊天（Flash|Flex） - Bēniaǒ成长笔记 -
博客园&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;4.2 AzaAjaxChat视频语音核心代码&lt;/h4&gt;
&lt;p&gt;下面是核心代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;protected&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;starChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//同时开始监听&lt;/span&gt;
    &lt;span class="nx"&gt;doReceive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//初始化一个网络连接 &lt;/span&gt;
    &lt;span class="nx"&gt;publicNc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NetConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//开始连接 &lt;/span&gt;
    &lt;span class="nx"&gt;publicNc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rtmpUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;//为这个连接添加事件,这个事件有返回连接状态 &lt;/span&gt;
    &lt;span class="nx"&gt;publicNc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NetStatusEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NET_STATUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;onPublishNetStatusHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nx"&gt;microphone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Microphone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMicrophone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCamera&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;没有开启摄像头或者没有安装摄像头&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoPublish&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;private function onPublishNetStatusHandler(event:NetStatusEvent):void {&lt;/p&gt;
&lt;p&gt;//根据连接返回的状态信息判断是滞连接成功&lt;/p&gt;
&lt;p&gt;if(event.info.code=="NetConnection.Connect.Success"){&lt;/p&gt;
&lt;p&gt;appMessage.text += "n发布连接建立成功";&lt;/p&gt;
&lt;p&gt;publicNs = new NetStream(publicNc);&lt;/p&gt;
&lt;p&gt;publicNs.attachAudio(microphone);&lt;/p&gt;
&lt;p&gt;publicNs.attachCamera(camera);&lt;/p&gt;
&lt;p&gt;publicNs.client = this;&lt;/p&gt;
&lt;p&gt;publicNs.publish(publicName,"live");&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private function doReceive():void {&lt;/p&gt;
&lt;p&gt;receiveNc = new NetConnection();&lt;/p&gt;
&lt;p&gt;//开始连接&lt;/p&gt;
&lt;p&gt;receiveNc.connect(rtmpUrl);&lt;/p&gt;
&lt;p&gt;//为这个连接添加事件,这个事件有返回连接状态&lt;/p&gt;
&lt;p&gt;receiveNc.addEventListener(NetStatusEvent.NET_STATUS,onReceiveNetStatusHandler
);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private function onReceiveNetStatusHandler(event:NetStatusEvent):void {&lt;/p&gt;
&lt;p&gt;//根据连接返回的状态信息判断是滞连接成功&lt;/p&gt;
&lt;p&gt;if(event.info.code=="NetConnection.Connect.Success"){&lt;/p&gt;
&lt;p&gt;appMessage.text += "n接受连接建立成功";&lt;/p&gt;
&lt;p&gt;receiveNs = new NetStream(publicNc);&lt;/p&gt;
&lt;p&gt;video = new Video();&lt;/p&gt;
&lt;p&gt;video.width = 230;&lt;/p&gt;
&lt;p&gt;video.height = 173;&lt;/p&gt;
&lt;p&gt;video.attachNetStream(receiveNs);&lt;/p&gt;
&lt;p&gt;this.videoReceive.addChild(video);&lt;/p&gt;
&lt;p&gt;receiveNs.play(receiveName,"live");&lt;/p&gt;
&lt;p&gt;} else {&lt;/p&gt;
&lt;p&gt;appMessage.text += "n" +　event.info.code;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h4&gt;4.3 管道NetConnection.connect()&lt;/h4&gt;
&lt;p&gt;Flex流媒体传输通过通道传输，在NetConnection之上建立连接，由于RTMP和FMS的存在，我们可以很方便的在网络流上写入和读取流媒体信息。Net
Connection.connect()支持FMS流媒体和本地文件，官方解释如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Flash Player 或 AIR AIR 应用程序和 Flash Media Server 应用程序之间创建双向连接,NetConnection
对象如同客户端与服务器之间的管道。&lt;/p&gt;
&lt;p&gt;如果未使用 Flash Media Server，请调用 NetConnection.connect()，以便从本地文件系统或 Web
服务器中播放视频和 MP3 文件。有关支持的编解码器和文件格式的信息，请参阅 &lt;a href="http://www.adobe.com/go/hardware_scaling_cn"&gt;http://www.adobe.com/go/hardware_scali
ng_cn&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;4.4&amp;amp;nbsp_place_holder; flash.net.NetConnection 上找不到属性 onBWDone&lt;/h4&gt;
&lt;p&gt;这个问题参考&lt;a href="http://blog.csdn.net/xiang08/archive/2009/07/13/4343551.aspx"&gt;在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。解决办法。 - Xiang -
CSDN博客&lt;/a&gt;，解决如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。&lt;/p&gt;
&lt;p&gt;_nc = new NetConnection();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;_n
c.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;_n
c.client = this;&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;_n
c.objectEncoding = ObjectEncoding.AMF0;&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;_n
c.connect("rtmp://localhost/oflaDemo");&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;首先添加_nc.client = this.&lt;/p&gt;
&lt;p&gt;然后新建一个方法：public function onBWDone():void{}&lt;/p&gt;
&lt;p&gt;问题解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;五、JavaScript和Flex的交互&lt;/h3&gt;
&lt;p&gt;页面上的Flex必须响应页面JavaScript的触发事件，Adboe在设计Flex时候，预留了相互调用的端口ExternalInterface，详情可以G
oogle之，类似代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;initParams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initParams&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;playSound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;playSound&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nJS无法调用Flash，请检查Flash环境&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这种调用方法存在着一个致命的问题：创建一个swf的Object，当对这个swf做隐藏/显示的时候(display:none,display:block)
的时候，swf的所有的注册的javascritp函数都会被干掉(ExternalInterface.addCall方法)。这个是Flex的一个BUG，现在也
还没有解决。&lt;/p&gt;
&lt;p&gt;相关讨论可以参见&lt;a href="http://rwl6813021.javaeye.com/blog/236344"&gt;Javascript无法访问Flex问题~ - rwl6813021 -
JavaEye技术网站&lt;/a&gt;，文中详细讨论了这个问题，并给出一个解决方案。&lt;/p&gt;
&lt;p&gt;有一个折中的方案：即通过LocationConnection(本地通讯,利用两个swf来进行交互)来处理，初始化一个调用的client
swf，负责调用被隐藏的swf中的方法，这样就避开了直接通过javascript调用被隐藏的swf中的方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//1：client 发送端:&lt;/span&gt;
&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nl"&gt;ucallswfconn:&lt;/span&gt;&lt;span class="n"&gt;LocalConnection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ucallswfconn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LocalConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//注册Javascritp方法，网页调用该flex的方法，通过该方法中转，调用另外一个flex的方法&lt;/span&gt;
    &lt;span class="n"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;selectCallControl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;flexSelectCallControl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;public function flexSelectCallControl(method:String,param:String):void {&lt;/p&gt;
&lt;p&gt;//Alert.show(method+param);&lt;/p&gt;
&lt;p&gt;//调用另外一端swf中的方法，参数：1:receiver端监听的服务名称 2:方法名称 3:参数
ucallswfconn.send("ucallexternconn",""+method,""+param);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//2：receiver 接收端：&lt;/p&gt;
&lt;p&gt;//add by polarbear, 2008.09.04, 本地通讯&lt;/p&gt;
&lt;p&gt;this.ucallexternConn = new LocalConnection();&lt;/p&gt;
&lt;p&gt;this.ucallexternConn.allowDomain("*");&lt;/p&gt;
&lt;p&gt;ucallexternConn.client = this;&lt;/p&gt;
&lt;p&gt;try {&lt;/p&gt;
&lt;p&gt;this.ucallexternConn.connect("ucallexternconn");&lt;/p&gt;
&lt;p&gt;} catch (error:ArgumentError) {&lt;/p&gt;
&lt;p&gt;trace("连接失败");&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;注意被调用的函数必须是public的。&lt;/p&gt;
&lt;p&gt;我使用这个方法并没有成功，最后我采用的是将视频画面直接放在界面上（很丑，不得已为之）。上文的解决方案只是给出一个思路，感兴趣的话可以自己试试。&lt;/p&gt;
&lt;h3&gt;六、Last&lt;/h3&gt;
&lt;p&gt;其实还有很多细节地方可以讲讲，我就不一一展开了。整理的文章就是这样，也没什么花样和娱乐，我都懒得加图片了~&lt;/p&gt;
&lt;p&gt;祝大家周末愉快，最近我睡眠很不好，每天6点就醒了，中午补个觉去……&lt;/p&gt;</summary><category term="AzaAjaxChat"></category><category term="Comet"></category><category term="Flex"></category><category term="FMS"></category><category term="JavaScript"></category><category term="RTMP"></category></entry><entry><title>AzaAjaxChat笔记-框架</title><link href="/2010/08/azaajaxchat-notes-frame/" rel="alternate"></link><updated>2010-08-12T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-08-12:2010/08/azaajaxchat-notes-frame/</id><summary type="html">&lt;p&gt;1个月没有动PHP了，新装的系统甚至还没有配置PHP环境，今天看到BooguNote上有一个boo是专门记录AzaAjaxChat开发时候遇到的问题和解决办
法。于是把一些东西整理记录一下。&lt;/p&gt;
&lt;h3&gt;1. 从ThinkPHP开始&lt;/h3&gt;
&lt;p&gt;最早的AzaAjaxChat是基于ThinkPHP的，我当时在OpenSouce上看到ThinkPHP的介绍，有很多优点，看的我很心动：MVC模型，Ajax
支持，详细的文档和案例，国人开发的框架。我作为一个PHP新人一下子就被他吸引住了，决定用ThinkPHP做框架。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2010/08/thinkphp.png" /&gt;&lt;/p&gt;
&lt;p&gt;随着系统开发的推进，我却感觉到一些不自在，遇到一些问题却找不好太好的解决办法。比如ThinkPHP的模块和分组两个概念，让我比较疑惑，花费了大量时间重组目录
结构，两种方法各有优劣，让我很难选择（有选择了反而难办了 ^_^）。&lt;/p&gt;
&lt;p&gt;最让我恼火的是相对目录带来的路径混乱，在JSP开发中，静态内容习惯性放在webcontent文件夹中，而ThinkPHP的CSS、图片、JS引用让我很疑惑，
要区分App的和Model的静态文件。&lt;/p&gt;
&lt;p&gt;在开发过程中，我也遇到过框架本身的Bug，让我对这个框架失去信心。在这里我没有贬低ThinkPHP或者ThinkPHP开发者的意思，他们的"大道至简、开发由
我"的理念很值得欣赏。只是作为初学者因为遇到的一些问题，带来了一定的开发难度，不得已放弃。&lt;/p&gt;
&lt;h3&gt;2. 选择CakePHP&lt;/h3&gt;
&lt;p&gt;在遇到数次挫折之后，我终于下定决心换框架。工作室之前有过一个项目是用CakePHP开发的，保存着一些资料，阿贵强烈推荐CakePHP。我Google了几篇框
架的评测文章后，考虑了一下AzaAjaxChat的规模，决定选择CakePHP。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload-log4d.qiniudn.com/2010/08/cakephp.png" /&gt;&lt;/p&gt;
&lt;p&gt;CakePHP的脚手架(Scaffold)功能让我眼前一亮，让我脱离了大量CRUD繁琐的操作。而Cake Bake可以方便的根据数据库生成php代码，减少那
些没有逻辑意义的代码。AzaAjaxChat的定位是毕业设计，不是强健的产品，不会苛求太高的用户体验和安全特性，所以这个功能帮了我很多忙。&lt;/p&gt;
&lt;p&gt;CakePHP能够处理关系型数据库之间的m-n关系，由于我的系统逻辑简单，并没复杂的多表操作，所以这里没有深究。从Cake
Baker的生成代码菜单上应该能够看出CakePHP还是能够处理一定的多表关联问题。&lt;/p&gt;
&lt;p&gt;CakePHP也不是那么十全十美，最麻烦的是文档少，我指的是中文文档，英文资源还是比较丰富的。其次是对Ajax的支持不如ThinkPHP那么原生，我一开始使
用JSON方案，后来使用XML方案实现Ajax数据序列化。&lt;/p&gt;
&lt;h3&gt;3. CakePHP &amp;amp; ThinkPHP&lt;/h3&gt;
&lt;p&gt;使用的框架最大的目的是提高效率，大幅度缩短工作时间，这两个框架都是为此而诞生的。我这里不说孰优孰劣，如果感兴趣，可以Google查看相关比较。这两个框架都使
用Ruby On Rails的Active
Record理念进行开发，CakePHP更是被称为PHP版的RuR，我在编码中期还特意去图书馆查阅了RuR的相关资料，的确是高效的Web开发模型。&lt;/p&gt;
&lt;p&gt;Active Record释义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ActiveRecord也属于ORM层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配
置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在答辩的PPT中写选择CakePHP的原因有三：一站式的MVC框架、约定优于配置、更少的代码，其实这也是RuR的优势。&lt;/p&gt;
&lt;h3&gt;4. 相关连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://plod.popoever.com/archives/001110.html"&gt;Plod: [翻译]十款PHP开发框架横向比较&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.chinaunix.net/tag.php?q=CakePHP"&gt;ChinaUnix一位网友写的CakePHP入门（我觉得比官方教材好上手）&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/zsj1029/blog/item/8fa55e19502e6e4e42a9ad8c.html"&gt;cakephp jquery ajax json_天知道_百度空间（CakePHP的Ajax操作方法）&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/thinkinginlamp/blog/category/cakephp%20%26%2347%3B%20zen
dframework/index/0"&gt;老王的技术手册_博客_cakephp / zendframework_百度空间（挺多CakePHP相关资料）&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-php-cake/"&gt;IBM developerWorks 中国 : 使用 CakePHP 快速打造 Web 站点（IBM的CakePHP教程）&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="AzaAjaxChat"></category><category term="CakePHP"></category><category term="ThinkPHP"></category></entry><entry><title>Cakephp的国际化和poEdit的使用</title><link href="/2010/06/cakephp-localization-internationalization-and-usage-of-poedit/" rel="alternate"></link><updated>2010-06-03T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-06-03:2010/06/cakephp-localization-internationalization-and-usage-of-poedit/</id><summary type="html">&lt;p&gt;原文出处：&lt;a href="http://newsn.net/20090525/472.html"&gt;在Cakephp中使用i18n本地化程序，并使用poedit编辑语言文件 |
程序如此灵动！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;alswl:
官方的帮助手册都没有这篇文章来的详细，太赞了。这篇文章不仅介绍了CakePHP的使用，更多的介绍了PoEdit的使用，图文并茂，着实详细，感谢原作者苏南。&lt;/p&gt;
&lt;p&gt;----- 以下为原文 -----&lt;/p&gt;
&lt;p&gt;Cakephp的很强大的i18n功能就是用来实现本地化和国际化的。他通过使用语言配置文件使得程序能够很好的适应变化进行本地化。通过新建locale/chi/
LC_MESSAGES/default.po文件，并指定语言选项为"chi"实现。本文中说的就是如何实现这个本地化过程，当然本文中的poedit并不是必须的
，但是他可以使得工作效率更高。&lt;/p&gt;
&lt;h2&gt;一、关于i18n和L10n&lt;/h2&gt;
&lt;p&gt;这2个东东其实头一次我看到的时候也是一头雾水，但是经过百度的一通搜索，得出的结论就是，不管是几个n，最终的目的就是实现程序本地化就好了，说白了，就是由很多的
语言配置文件，反正我是这么理解的。大家也可以去看看，&lt;a href="http://baik
e.baidu.com/view/372835.htm"&gt;http://baike.baidu.com/view/372835.htm&lt;/a&gt; 这里有很详细的说明。&lt;/p&gt;
&lt;h2&gt;二、在Cakephp里面，实现本地化的方法&lt;/h2&gt;
&lt;p&gt;目前为止，有2种配置方法。&lt;/p&gt;
&lt;h3&gt;2.1 方法一&lt;/h3&gt;
&lt;p&gt;在config/core.php中使用configure::write来制定语言文件。&lt;/p&gt;
&lt;p&gt;Configure::write('Config.language',"chi");&lt;/p&gt;
&lt;h3&gt;2.2 方法二&lt;/h3&gt;
&lt;p&gt;官方说明：&lt;a href="http://book.cakephp.org/view/162/Localizing-Your-Application"&gt;http://book.cakephp.org/view/162/Localizing-Your-
Application&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;貌似很复杂的说哦。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l10n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TestsController&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test_function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;L10n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;L10n&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;L10n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;.....&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.3 做上边设置改动后需要做的：&lt;/h3&gt;
&lt;p&gt;当然在上面做修改后，还需要修改对应的ctp文件等哦，&lt;/p&gt;
&lt;p&gt;所有的直接输出字符串，没有返回值的地方像这样：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__(``"english"``);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;间接输出字符串，有返回的地方：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__(``"english"``,``true``);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还有input要加个label来使他出现中文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;("english");echo $form-&amp;gt;input('name',array('label'=&amp;gt;&lt;/strong&gt;('name',true)));&lt;/p&gt;
&lt;h3&gt;2.4 最最重要的一步&lt;/h3&gt;
&lt;p&gt;就是要编辑这个文件了，locale/chi/LC_MESSAGES/default.po。中间的chi就是语言文件的标志位了。这个文件的格式也很简单，&lt;/p&gt;
&lt;p&gt;msgid "Chinese"&lt;/p&gt;
&lt;p&gt;msgstr "中国话"&lt;/p&gt;
&lt;p&gt;这个的简单重复就行了。&lt;/p&gt;
&lt;h2&gt;三、使用poedit&lt;/h2&gt;
&lt;p&gt;使用poedit不是必须的，但是可以使工作变得简单的多。官方网站是：&lt;a href="http://www.poedit.n
et/"&gt;http://www.poedit.net/&lt;/a&gt;&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;他的主要功用就是使得编辑语言配置文件更加方便和快捷。下面是使用poedit的一些简单的截图和说明。&lt;/p&gt;
&lt;h3&gt;3.1 头一次使用需要选择界面语言&lt;/h3&gt;
&lt;p&gt;&lt;img alt="poedit_01" src="http://upload-log4d.qiniudn.com/2010/06/poedit-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_02" src="http://upload-log4d.qiniudn.com/2010/06/poedit-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_03" src="http://upload-log4d.qiniudn.com/2010/06/poedit-03.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.2 新建一个配置文件，就是我们的目的文件po文件了&lt;/h3&gt;
&lt;p&gt;&lt;img alt="poedit_04" src="http://upload-log4d.qiniudn.com/2010/06/poedit-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_05" src="http://upload-log4d.qiniudn.com/2010/06/poedit-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;工程信息这里当然要选择好utf8格式了&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_06" src="http://upload-log4d.qiniudn.com/2010/06/poedit-06.png" /&gt;&lt;/p&gt;
&lt;p&gt;路径这里的基本路径填写cakephp的目录，当然这里居然没有浏览功能，真是崩溃。&lt;/p&gt;
&lt;p&gt;注意这里要通过下面的新建按钮新建一个名为"."的路径，这样的话，以后就可以搜索基本路径下面的子目录了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_07" src="http://upload-log4d.qiniudn.com/2010/06/poedit-07.png" /&gt;&lt;/p&gt;
&lt;p&gt;关键字选项卡里面要填上cakephp的标志性本地化函数"__"。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_08" src="http://upload-log4d.qiniudn.com/2010/06/poedit-08.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然上面那些选项卡设置好之后，还可以通过菜单类目=》设置调出来，从新设置。&lt;/p&gt;
&lt;h3&gt;3.3 点击那个小地球图标或者类目=》自源更新，开始自动扫描该翻译的文字了&lt;/h3&gt;
&lt;p&gt;&lt;img alt="poedit_09" src="http://upload-log4d.qiniudn.com/2010/06/poedit-09.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_10" src="http://upload-log4d.qiniudn.com/2010/06/poedit-10.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_11" src="http://upload-log4d.qiniudn.com/2010/06/poedit-11.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.4 但是这个时候，你可能会发现扫描出来的字段远远少于你需要的东东，原来这个软件不认识ctp文件。这个步骤的设置是让他能识别ctp文件设置。文件=&lt;/h3&gt;
&lt;p&gt;》首选=》解析器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本步骤参考了一个意大利程序员的博客文章，在此向他表示感谢先。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.luizz.it/119/cakephp/poedit-e-i-file-ctp"&gt;http://www.luizz.it/119/cakephp/poedit-e-i-file-
ctp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_12" src="http://upload-log4d.qiniudn.com/2010/06/poedit-12.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_13" src="http://upload-log4d.qiniudn.com/2010/06/poedit-13.png" /&gt;&lt;/p&gt;
&lt;p&gt;选中php，选择编辑，然后在第2行内输入ctp文件后缀，如下图，但是注意下图的设置是错误的!虽然上面的提示，是用逗号分隔，但是实践证明，用分号才是正确的选择
。这个很令人崩溃，大概是poedit的一个小bug吧。会出现错误提示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_14" src="http://upload-log4d.qiniudn.com/2010/06/poedit-14.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_14.5" src="http://upload-log4d.qiniudn.com/2010/06/poedit-145.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是如果用分号分隔的话，仍然会看到如下错误提示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_15" src="http://upload-" title="log4d.qiniudn.com/2010/06/poedit-15.png" /&gt;&amp;amp;nbsp_place_holder; 需要在下面的解析器命令下面增加个选项
-language=php，注意这里是两个中划线啊。所以这个步骤的要点就是下图所示了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_16" src="http://upload-log4d.qiniudn.com/2010/06/poedit-16.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.5 这里通过那个地球图标就可以找出所有需要翻译的字段了，当然这个操作的前提是你已经用__函数把所有的字段都标示好了。如果你按这个图标之前进行了部&lt;/h3&gt;
&lt;p&gt;分翻译，这个操作如果发现了新字句，这个软件会根据以前的翻译自己翻译字句的，并用棕色突出显示它自动翻译的词语。当然，一般都是不准确的。所以还是需要进行修改保存
操作的说。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poedit_17" src="http://upload-log4d.qiniudn.com/2010/06/poedit-17.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.6 如果这个时候你查看生成的po文件的时候，比自己手写的文件确实多些设置。&lt;/h3&gt;
&lt;p&gt;&lt;img alt="poedit_18" src="http://upload-log4d.qiniudn.com/2010/06/poedit-18.png" /&gt;&lt;/p&gt;</summary><category term="CakePHP"></category><category term="PoEdit"></category></entry><entry><title>CakePHP的全局变量</title><link href="/2010/05/cakephp-global-variables/" rel="alternate"></link><updated>2010-05-17T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-05-17:2010/05/cakephp-global-variables/</id><summary type="html">&lt;p&gt;毕业设计AzaAjaxChat 中有一个功能，记录当前在线用户，直观的看，用Application对象就可以解决。&lt;/p&gt;
&lt;p&gt;忙了一会发现，原来PHP没有Application对象这个概念，于是我想到了全局变量，噩梦便开始了。（Application
和全局变量其实完全不是同一个概念）&lt;/p&gt;
&lt;p&gt;我使用的框架是CakePHP，查找资料后，找到了几种CakePHP中使用全局变量的方法。&lt;/p&gt;
&lt;h3&gt;一、使用bootstrap.php文件&lt;/h3&gt;
&lt;p&gt;在app/config 下面，有一个bootstrap文件，从名字就可以看出，这个是在控制器之前加载的文件，根据官方的描述，有下面几个用法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义方便的函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册全局常量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义新增的控制器，视图，控制器路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这个文件可以实现全局变量的声明。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;globalAAC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;globalAAC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;globalAAC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;currentMessageId&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;onlineUsers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在其他文件中就可以调用这个全局变量了。&lt;/p&gt;
&lt;h3&gt;二、通过Configure 类&lt;/h3&gt;
&lt;p&gt;Configure类是CakePHP用来进行配置文件的地方，通过write() 和read()方法，也能实现全局变量的读写操作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Aac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentMessageId&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Aac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentMessageId&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，还有一个使用Configure的偏门方法，我从 &lt;a href="http://debuggable.com/posts/need-to-share-global-
variables-throughout-your-app:480f4dd5-6f64-4c88-812d-46d5cbdd56cb"&gt;Need to share global variables throughout your
app? » Debuggable Ltd&lt;/a&gt; 看到的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;$config =&amp;amp; Configure::getInstance();&lt;/p&gt;
&lt;p&gt;debug($config-&amp;gt;myVariable);&lt;/p&gt;
&lt;p&gt;其实就是通过引用操作Configure 类内部的getInstance() 方法，看源码就能看出来。&lt;/p&gt;
&lt;h3&gt;三、关于类似Application 对象的全局变量&lt;/h3&gt;
&lt;p&gt;以上两种方法都没错，都可以操作全局变量，但是我却都操作失败了，为此我折腾了整整一天。&lt;/p&gt;
&lt;p&gt;我甚至一度把错误归结到CakePHP，后来才发现，原来我冤枉它了。问题的根本是在于，这个全局变量根本不是我所想的那个Application 对象。&lt;/p&gt;
&lt;p&gt;什么是Application 对象？Application 对象用于存储和访问来自任何页面的变量，类似于 session
对象。不同之处在于，所有的用户分享一个 Application 对象，而 session 对象和用户的关系是一一对应的。&lt;/p&gt;
&lt;p&gt;在翻阅PHP资料之后，我终于在ChinaUNIX找到一些蛛丝马迹 &lt;a href="http://bbs.chinaunix.net/viewthread.php?tid=79537"&gt;全局变量，在多个页面的可以使用吗？ - Php -
ChinaUnix.net&lt;/a&gt;
。文中一位读者给了很肯定的回答"php中没有基于整个网站的全局变量，一般用数据库什么的替代方案。"。&lt;/p&gt;
&lt;p&gt;我再检查一个基于PHP的聊天系统，果然是通过数据库的 online_users来实现在线用户的保存。&lt;/p&gt;
&lt;p&gt;吃亏吃在用传统的Java思想做PHP编程，并且PHP接触时间太短，以后学习的时候必须多用用心了~&lt;/p&gt;</summary><category term="AzaAjaxChat"></category><category term="CakePHP"></category></entry><entry><title>使用Firebug和FirePHP调试PHP[译文]</title><link href="/2010/03/use-firebug-and-firephp-debugging-php/" rel="alternate"></link><updated>2010-03-15T00:00:00+08:00</updated><author><name>alswl</name></author><id>tag:,2010-03-15:2010/03/use-firebug-and-firephp-debugging-php/</id><summary type="html">&lt;p&gt;这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href="http://www.sitepoint.com/blogs/2010/02/09/debug-php-firebug-firephp/"&gt;Debug PHP with Firebug and
FirePHP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译言的链接：&lt;a href="http://article.yeeyan.org/view/119553/94520"&gt;译言网 |
使用Firebug和FirePHP调试PHP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;×××××以下译文××××××&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.sitepoint.com/blogs/wp-content/uploads/2010/02/firephp.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你和我一样，你会在开发网页项目时候完全无法离开&lt;a href="http://getfirebug.com/"&gt;FireBug&lt;/a&gt;。这个小巧的"臭虫"是一个神奇而有用的H
TML/CSS/JavaScript/Ajax调试器。但是你也许不知道这个还可以用来调试PHP，没错，它可以，感谢一款名为FirePHP的FireFox插件
。&lt;/p&gt;
&lt;p&gt;通过一个小小的服务端库，和这款在Firebug上的插件，你的PHP脚本能够发送调试信息到浏览器，轻易的通过HTTP相应头编码。一旦你设置，你可以在Fiire
bug的控制台获得PHP脚本警告和错误，就感觉像直接调试JavaScript一样&lt;/p&gt;
&lt;p&gt;使用这个工具，首先你需要安装&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/6149"&gt;FirePHP插件&lt;/a&gt;
。这个插件需要你已经安装FireBug。装好FirePHP之后，重新打开Firebug面板时候，你会看到新加了一个蓝色的臭虫图标。点击这个图标会出现一个开启
或者关闭FirePHP的菜单。&lt;/p&gt;
&lt;p&gt;&lt;img alt="FirePHP Menu" src="http://www.sitepoint.com/blogs/wp-content/uploads/2010/02" title="/Screen-shot-2010-02-09-at-1.59.56-PM.png" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;当然，这时候我们还无法做任何事，你还需要安装FirePHP的服务端，点击&lt;a href="http://www.firephp.org/HQ/Install.htm"&gt;这里&lt;/a&gt;下载。这是一个独立的版本，你可以手动下载或者使用PEAR。装后之后，你可是轻松的将这个库加入你的代码。它被设计了很多版本来整合入多个框架或者管理系统，比如
&lt;a href="http://wordpress.org/extend/plugins/wp-
firephp/"&gt;WP-FirePHP plugin for WordPress&lt;/a&gt; 和 &lt;a href="http://joomlacode.org/gf/project/kune
na/frs/?action=FrsReleaseView&amp;amp;release_id=11823"&gt;JFirePHP plugin for Joomla&lt;/a&gt;。暂时不管这些，我们将把精力集中在独立的功能上。&lt;/p&gt;
&lt;p&gt;一旦你在你服务器上部署了FirePHP库，你还需要在你的代码中加入以下的代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require_once('FirePHPCore/fb.php');&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是因为FirePHP通过HTTP头发送记录的数据，你需要缓存你的代码产生的输出，从而来响应头信息从这里获取代码生成的内容。这个可以通过在代码头部的&lt;code&gt;ob_
start&lt;/code&gt;来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ob_start();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当这些步骤完成后，你可以开始使用FirePHP了。你需要做的只是调用&lt;code&gt;fb&lt;/code&gt;函数在任何你想要记录的地方。同时你也可以使用一个可选的标签和常量去定义预定义信息
，一个错误，一个警告，或者一条信息。&lt;/p&gt;
&lt;p&gt;$var&amp;amp;nbsp_place_holder;=&amp;amp;nbsp_place_holder;array('a'=&amp;gt;'pizza',&amp;amp;nbsp_place_hold
er;'b'=&amp;gt;'cookies',&amp;amp;nbsp_place_holder;'c'=&amp;gt;'celery');&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;fb($var);&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;fb($var,&amp;amp;nbsp_place_holder;"An&amp;amp;nbsp_place_holder;array");&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;fb($var,&amp;amp;nbsp_place_holder;FirePHP::WARN);&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;fb($var,&amp;amp;nbsp_place_holder;FirePHP::INFO);&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;fb($var,&amp;amp;nbsp_place_holder;'An&amp;amp;nbsp_place_holder;array&amp;amp;nbsp_place_holder;with&amp;amp;
nbsp_place_holder;an&amp;amp;nbsp_place_holder;Error&amp;amp;nbsp_place_holder;type',&amp;amp;nbsp_pla
ce_holder;FirePHP::ERROR);&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;An array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FirePHP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FirePHP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FirePHP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些代码将在Firebug控制台输出如下所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="FirePHP Console Output" src="http://www.sitepoint.com/blogs/wp-" title="content/uploads/2010/02/Screen-shot-2010-02-09-at-2.39.22-PM.png" /&gt;&lt;/p&gt;
&lt;p&gt;你也可以使用FirePHP来跟踪你程序的执行情况：通过使用&lt;code&gt;FirePHP::TRACE常量，你可以在&lt;/code&gt; &lt;code&gt;fb被调用的地方查看``行数、类名和方法名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;function&amp;amp;nbsp_place_holder;hello()&amp;amp;nbsp_place_holder;{&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;fb('Hello&amp;amp;nbsp_place_holder;World!',&amp;amp;nbs
p_place_holder;FirePHP::TRACE);&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;}&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;function&amp;amp;nbsp_place_holder;greet()&amp;amp;nbsp_place_holder;{&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;&amp;amp;nbsp_place_holder;&amp;amp;nbsp_place_holder;hello();&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;}&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;greet();&amp;amp;nbsp_place_holder;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FirePHP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();}&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;产生的输出如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="FirePHP Trace Output" src="http://www.sitepoint.com/blogs/wp-" title="content/uploads/2010/02/Screen-shot-2010-02-09-at-3.00.40-PM.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个跟踪功能可以完美的调试更复杂的代码，让你精确的知道你的方法是在哪里被调用的。&lt;/p&gt;
&lt;p&gt;当然，别忘了你需要在你代码发布之前移除你的调试语句。&lt;/p&gt;
&lt;p&gt;这里还有很多FirePHP的内容没有涉及到。我只是向你简单展示一下FirePHP的API，还有很多高级的面向对象API。你可以获得更多相关内容在
&lt;a href="http://www.firephp.org/HQ/Use.htm"&gt;FirePHP site&lt;/a&gt;，要记得看它哦～&lt;/p&gt;</summary><category term="Firebug"></category><category term="FirePHP"></category><category term="译文"></category></entry></feed>